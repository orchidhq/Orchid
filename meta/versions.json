[
  {
    "patch": true,
    "components": {
      "major": "1",
      "minor": "0",
      "patch": "0"
    },
    "releaseNotes": "<p>qwerty<\/p>\n",
    "major": true,
    "minor": true,
    "version": "1.0.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": false,
    "components": {
      "major": "0",
      "minor": "21",
      "patch": "0"
    },
    "releaseNotes": "<h2 id=\"improvements\"><a href=\"#improvements\" id=\"improvements\" class=\"anchor\"><\/a>Improvements<\/h2>\n<ul>\n<li>Experimental sourcedocs are now enabled by default<\/li>\n<li>Adds <code>collectionPages<\/code> menu item, which matches the same lookup behavior as the findAll() function. See\n<a href=\"https://orchid.run/wiki/user-manual/core-concepts/menus#collection-pages-menu-item\">Menus<\/a> for usage.<\/li>\n<li>Use <code>0.5<\/code> as default sitemap entry priority and always add priority to sitemap entries<\/li>\n<li>Updates Kodiak version to 0.5.0, with several bugfixes for Dokka output, and preparation for generation of class\nhierarchy diagrams (still WIP)<\/li>\n<li>Sourcedocs modules can now link to one another. Projects such as multi-module Java libraries or Kotlin multiplatform\nprojects can now associate Orchid's documentation modules to one another, cross-linking to base classes or packages.\nSee docs <a href=\"https://orchid.run/plugins/orchid-kotlindoc-feature#configuration-1\">here<\/a><\/li>\n<li>Deprecation messages are now only shown in diagnose mode. A warning notifying of detected deprecation usage or\ndiagnosed problems is now shown on normal builds.<\/li>\n<li>Major improvements to asset management, external asset downloading, and asset inlining\n<ul>\n<li>Extra CSS/JS can now be configured as objects, and options like <code>download<\/code> and <code>inline<\/code> are available in extra CSS<\/li>\n<li>A regression causing external assets to not download has been fixed<\/li>\n<li>See docs <a href=\"https://orchid.run/wiki/user-manual/core-concepts/assets#configuring-additional-assets\">here<\/a><\/li>\n<\/ul>\n<\/li>\n<li>New config DSL for setting up the <code>config.yml<\/code> in integration tests, and dramatically improved diagnostics for page\nhtml assertion failures<\/li>\n<\/ul>\n<h2 id=\"bug-fixes\"><a href=\"#bug-fixes\" id=\"bug-fixes\" class=\"anchor\"><\/a>Bug Fixes<\/h2>\n<ul>\n<li>Fixes bugs with <code>orchidSearch<\/code> component\n<ul>\n<li>homepage is now included in search results<\/li>\n<li>SourceDocs element names and comments are now included in search results<\/li>\n<\/ul>\n<\/li>\n<li>Improves diagnostic output of orchid-test APIs<\/li>\n<li>Support various different lettercasing for homepage file<\/li>\n<li>Fixes several cosmetic issues with Copper theme<\/li>\n<li>Fixes issue of <code>-SNAPSHOT<\/code> being included in the Orchid version logs<\/li>\n<li>Formatting issues with Kotlindocs have been fixed<\/li>\n<\/ul>\n<h2 id=\"breaking-changes\"><a href=\"#breaking-changes\" id=\"breaking-changes\" class=\"anchor\"><\/a>Breaking Changes<\/h2>\n<p>This release includes 1 major breaking change to end-users, and the deprecation of several other end-user features which\nwill be removed in a future release:<\/p>\n<ul>\n<li>The <code>--experimentalSourceDoc<\/code> is no longer needed, as experiemental SourceDocs are now the default functionality. If\nyou are still using the legacy sourcedocs, you can still use them for a short time longer, but you must now add the\n<code>--legacySourceDoc<\/code> flag to Orchid. Sites still building docs on legacy SourceDocs will not work without that flag,\nbut you must now migrate to the new SourceDocs. Legacy sourcedocs will be removed entirely in the next major\nrelease.<\/li>\n<li><code>{% styles %}<\/code> is now included within the <code>{% head %}<\/code> template tag. The <code>{% styles %}<\/code> tag now does nothing, and in\nthe next major version will be removed, causing template errors.<\/li>\n<li><code>{% scripts %}<\/code> has been replaced by the  <code>{% body %}<\/code> and <code>{% endbody %}<\/code> template tags. <code>{% scripts %}<\/code> will be\nremoved in the next major version, causing template errors.<\/li>\n<\/ul>\n<p>In additional, there are several changes to both internal and public code APIs. The following are only of importance to\ndevelopers making custom Orchid plugins, but can be ignored by anyone else as they do not impact end-user functionality.<\/p>\n<ul>\n<li>The signature for <code>fun loadAssets()<\/code> in themes, pages, and components has been changed to\n<code>loadAssets(delegate: AssetManagerDelegate)<\/code>.\n<ul>\n<li>In <code>loadAssets<\/code>, calls to <code>addCss<\/code> and <code>addJs<\/code> should now be made on that delegate: <code>delegate.addCss(&quot;...&quot;)<\/code>,\n<code>delegate.addJs(&quot;...&quot;)<\/code>. You can also use <code>with(delegate) { ... }<\/code> in Kotlin to reduce the boilerplate.<\/li>\n<li>Previously, custom code needed to be written to prevent some external assets from being downloaded, but now the\n<code>addCss<\/code> and <code>addJs<\/code> methods accept a configuration lambda or object with these available options. They are the\nsame options available to <code>extraCss<\/code> and <code>extraJs<\/code>, so there is now difference between assets loaded in\n<code>loadAssets()<\/code> or attached from the extra assets.<\/li>\n<\/ul>\n<\/li>\n<li>orchid-test methods for directly selecting and testing HTML have been removed. Instead, you should use the\n<code>htmlHeadMatches<\/code> and <code>htmlBodyMatches<\/code> methods to build DOM subtrees. However, diagnostic output is greatly\nimproved for these matchers.<\/li>\n<li>Meta-components can now render content to the page head, or the start or end of the HTML body. This is currently only\nreserved for future use with official Orchid plugins, but may be of interest to develoers making custom plugins in\nthe Orchid community.<\/li>\n<li>Methods from <code>ResourceService<\/code> for locating assets has been significantly improved. Rather than calling methods like\n<code>getResourceEntry()<\/code> and <code>locateLocalResource()<\/code> on the <code>context<\/code>, they have now been moved into dedicated\n<code>OrchidResourceSources<\/code> which can be gotten through the context. The <code>ResourceService<\/code> now only has methods to get\nthe following types of resource sources:\n<ul>\n<li><code>getDefaultResourceSource()<\/code> - Replaces <code>getResourceEntry()<\/code> and <code>getResourceEntries()<\/code>, which are now implemented\non this default resource source. This will delegate the actual resource lookup to the site resources, theme,\nand registered plugins. They are also cached to improve lookup performance.<\/li>\n<li><code>getFlexibleResourceSource()<\/code> - Wraps the default resource source to add more flexible resource-lookup logic to\nit. Normal lookups must match both filename and extension, but flexible lookups will be abel to match by\nfilename only, selecting a resource of any file extension. Replaces call to <code>locateLocalResourceEntry()<\/code> and\n<code>findClosestFile()<\/code>. Note that <code>findClosestFile()<\/code> is deprecated as it does not delegate to the default resource\nsource, and so should be avoided.<\/li>\n<li><code>getTemplateResourceSource()<\/code> - Wraps the default resource source to add template-locating logic to it. Replaces\ncall to <code>locateTemplate()<\/code>.<\/li>\n<li><code>getDataResourceSource()<\/code> - Wraps the default resource source to add functionality for loading data markup into\na <code>Map<\/code>. Replaces call to <code>getDatafile<\/code> and <code>getDatafiles()<\/code>.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.21.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": false,
    "components": {
      "major": "0",
      "minor": "20",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>New <a href=\"https://orchid.run/plugins/orchid-snippets-feature\">Snippets<\/a> plugin allows you to lookup and embed snippets from code, files, and\neven external webpages!<\/li>\n<li>Improvements to Admin Panel styling. Forms and snippets located during the site build are care listed and can be\npreviewed in the admin panel.<\/li>\n<li>Allows Forms to be embedded with a new <code>form<\/code> tag, instead of only as Components as before. See docs\n<a href=\"https://orchid.run/plugins/orchid-forms-feature#form-tag\">here<\/a><\/li>\n<li>Replaces default accordion markup with details/summary tag for best usage in all themes<\/li>\n<li>Tabbed TemplateTags can now be rendered dynamically! You can now use loops and conditionals to add individual tabs to\nthe body of tabbed tags. See docs <a href=\"https://orchid.run/wiki/user-manual/core-concepts/templates#tabbed-tags-dynamic\">here<\/a>.<\/li>\n<li>Both the base URL and your theme can now be set in <code>config.yml<\/code>, instead of needing to be set in your Gradle or Maven\nbuild scripts. See docs <a href=\"https://orchid.run/wiki/user-manual/getting-started/site-config#basic-site-config\">here<\/a>.<\/li>\n<\/ul>\n<h2 id=\"breaking-changes\"><a href=\"#breaking-changes\" id=\"breaking-changes\" class=\"anchor\"><\/a>Breaking Changes<\/h2>\n<p>This release contains no breaking changes or deprecations of public, end-user features. Read on for important changes<\/p>\n<p>There have been some minor changes to the internal APIs. Most notable is that the <code>ModularList<\/code> primary constructor no\nlonger accepts an injected <code>OrchidContext<\/code>. The context should instead be provided lazily when calling <code>.get()<\/code> to get\nthe modular items from the list. In addition, I'm working on removing the requirement of an <code>OrchidContext<\/code> when\ncreating <code>OrchidReference<\/code> objects. While it's still there for now, many of its public methods, like <code>getServerPath()<\/code>\nand <code>toJSON()<\/code>, and <code>toString()<\/code>, must be provided with a context when called instead of using the Context set in its\nconstructor.<\/p>\n<p>In addition, Orchid is getting more strict on places where a non-null <code>OrchidPage<\/code> must be provided.\n<code>ModularPageList.get()<\/code> requires a non-null page, and <code>Theme<\/code>s must have a page for each time it is pushed to the\n<code>ThemeService<\/code> with <code>theme.doWithCurrentPage()<\/code>. This also means that Generators do not globally set Themes any more,\nand it is the responsibility of the Generator to wrap <code>context.render<\/code> calls with <code>theme.doWithCurrentPage()<\/code> using its\ndefault <code>ThemeRelation<\/code>. If you do not override <code>startGeneration()<\/code>, this will be done automatically, but if you are\noverriding <code>startGeneration()<\/code> you must make sure to add this functionality.<\/p>\n<p>Finally, the base URL is no longer available anytime during Orchid's lifetime. It is set at the start of each build, and\nthus is only available after indexing has started and when idle between builds. Attempting to get the base URL during\nOrchid startup will throw a NullPointerException.<\/p>\n",
    "major": false,
    "minor": true,
    "version": "0.20.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "19",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Improve Asciidoc formatting. Specifically, other files relative to the source file can now be included. See caveats\n<a href=\"https://orchid.run/plugins/orchid-asciidoc-feature#includes\">here<\/a>.<\/li>\n<li>Automatically add <code>CNAME<\/code> files to GithubPages deploys, if not already present in the deployed site. The CNAME value\nwill be inferred from the base URL of the site during the deploy. See docs\n<a href=\"https://orchid.run/plugins/orchid-github-feature#github-pages-publisher\">here<\/a>.<\/li>\n<li>Adds <code>feedLinks<\/code> metaComponent to Posts plugin, which adds <code>&lt;link rel='alternate'&gt;<\/code> tags to page heads, pointing to\nthe generated feed pages. See docs\n<a href=\"https://orchid.run/plugins/orchid-posts-feature#rss-and-atom-feeds\">here<\/a>.<\/li>\n<li>Partial support for JDK 12+. Note that changes to the Javadoc since JDK 12 make the <a href=\"https://orchid.run/plugins/orchid-javadoc-feature\">orchid-javadoc-feature<\/a> plugin\nincompatible with JDK 12+. This will resolved in a future release, but for now you will have to run Orchid on a JDK\nless than 12 for it to work.<\/li>\n<li>The dev server now dynamically renders indexed pages, instead of directly returning files from disk. This will prevent\npages from old builds from being rendered, makimg the dev server experience closer to what would actually be\nrendered in production. This is still a work in progres, and if you encounter issues, you can go back to the old\nfunctionality by adding the <code>--legacyFileServer<\/code> CLI flag.<\/li>\n<li>Copy over images uploaded and referenced from GitLab wikis<\/li>\n<li>Various bugfixes for Kotlindoc plugin<\/li>\n<\/ul>\n<h2 id=\"breaking-changes\"><a href=\"#breaking-changes\" id=\"breaking-changes\" class=\"anchor\"><\/a>Breaking Changes<\/h2>\n<p>This version includes the removal of several features that were deprecated since 0.18.0, outlined below:<\/p>\n<ul>\n<li>Themes will no longer add search functionality automatically through the use of the <code>legacySearch<\/code> option. You must\nnow migrate to the <code>orchidSearch<\/code> or <code>algoliaDocsearch<\/code> meta-component config instead, as described in the\n<a href=\"https://orchid.run/plugins/orchid-search-feature\">orchid-search-feature<\/a> docs.<\/li>\n<li>Usage of <code>index.queryPages<\/code>, introduced as a deprecated feature for backward-compatibility in 0.18.0, has now been\nremoved. You must set up custom <a href=\"https://orchid.run/plugins/orchid-archives-feature\">taxonomies<\/a> now.<\/li>\n<\/ul>\n<p>In addition, there has been a moderate reworking of the resource APIs that are not backward-compatible. This is part of\nan ongoing effort to extract this functionality into a reusable library outside of Orchid, which will eventually live\nin the <a href=\"https://github.com/copper-leaf/arcana\">copper-leaf/arcana<\/a> repo. The rest of these release notes are only\nrelevant to folks writing custom plugins, and in particular, custom <code>OrchidGenerators<\/code>. Custom Components, Menus, Tags,\nand Functions are unaffected by these changes.<\/p>\n<p>Below is a summary of the changes to Orchid's OrchidResource, OrchidPage, and OrchidGenerator APIs:<\/p>\n<ul>\n<li>Collections created by <code>OrchidGenerators<\/code> are now part of the model returned from <code>startIndexing()<\/code>, instead of being\na discrete method on the Generator class itself.<\/li>\n<li>Generators now run in 4 discrete <em>stages<\/em> instead of being ordered based on priority. This will enable future\nimprovements to performance and greater clarity of the intention behind Generator ordering. There is a 1-1 mapping\nfrom older priority constants to new Generator Stages. The priority constants remain in place by name, but are now\ninstances of <code>OrchidGenerator.Stage<\/code> enums instead of integer priorities. The stages are as follows:\n<ul>\n<li><code>Stage.WARM_UP<\/code> (previously `PRIORITY_INIT): A Stage for Generators that produce pages that Content pages depend\non, like registering global assets and warming up other caches which improve overall build performance.<\/li>\n<li><code>Stage.CONTENT<\/code> (previously `PRIORITY_EARLY): A Stage for Generators that produce content pages. These are pages\nthat are generally standalone pages, only having relationships to other pages from the same Generator.<\/li>\n<li><code>Stage.COLLECTION<\/code> (previously `PRIORITY_DEFAULT): A Stage for Generators that collect Content pages into groups,\ntaxonomies, etc, and optionally generate additional Content pages displaying those collections of pages.<\/li>\n<li><code>Stage.META<\/code> (previously `PRIORITY_LATE): A Stage for Generators that produce metadata about your site. These are\nnot Content pages, and are usually intended for <em>computers<\/em> to read, not humans, such as sitemaps, search\nindices, etc.<\/li>\n<\/ul>\n<\/li>\n<li><code>orchid-pages-feature<\/code> must now be constructed with an additional <code>RenderService.RenderMode<\/code> constant in their constructor.\nThis constant replaces calls to <code>context.render*()<\/code> calls, typically done from the\n<code>OrchidGenerator.startGenerating()<\/code> callback, and enables Orchid to determine how to render each page automatically\nwithout needing to override that method. Orchid will also render pages on-the-fly when running the dev server, which\nwill eventually be able to significantly improve the development experience. The mapping of <code>context.render*()<\/code>\ncalls to the new constants are as follows:\n<ul>\n<li><code>context.renderString()<\/code> -&gt; Removed, as it was a development-only API.<\/li>\n<li><code>context.renderTemplate()<\/code> -&gt; <code>RenderService.RenderMode.TEMPLATE<\/code><\/li>\n<li><code>context.renderRaw()<\/code> -&gt; <code>RenderService.RenderMode.RAW<\/code><\/li>\n<li><code>context.renderBinary()<\/code> -&gt; <code>RenderService.RenderMode.BINARY<\/code><\/li>\n<\/ul>\n<\/li>\n<li>The APIs for creating Resources has been partially rewritten. All of these classes have been rewritten in Kotlin and\nare now null-safe in Kotlin, and the contract is expected to be followed when used from Java. These APIs will\ncontinue to evolve as I continue to extract them to a separate library. The following are the main differences from\nthe old APIs to the new ones:\n<ul>\n<li>All resources are now considered &quot;freeable&quot;, but this is much more of an implementation detail now instead of\nsomething developers must think about. Resources now simply return an <code>InputStream<\/code> describing their contents,\nand the framework will take care of the rest, including caching and freeing that content as appropriate.<\/li>\n<li>The interfaces for <code>LocalResourceSource<\/code>, <code>ThemeResourceSource<\/code>, and <code>PluginResourceSource<\/code> are now singleton\n<em>scope objects<\/em>. Internally, resource sources are now initialized with one of these markers. Instead of having\nseparate <code>context.get*ResourceEntry()<\/code> or <code>get*ResourceEntries<\/code> methods, there is a single context method for\neach that accepts one of these Scope objects to filer resource sources by.<\/li>\n<li><code>AbstractTheme<\/code> no longer implements the <code>OrchidResourceSource<\/code> interface. Themes now return a resource source\ninstead.<\/li>\n<li><code>OrchidIntegrationTest<\/code> can now take any type of resource in its test methods, instead of only being able to\ncreate String resources. In particular, the new <code>classpathResource()<\/code> function in the testing DSL loads a\nresource from the classpath (especially useful for using binary resources in integration tests).<\/li>\n<li>Resources should now be passed to <code>context.compile()<\/code>. This allows compilers to know the source location of a\nresource they are processing, and can then import other resources relative to their source, such as when\nresolving includes from Asciidoc markup.<\/li>\n<\/ul>\n<\/li>\n<li><code>OrchidCompiler.compile()<\/code> now writes to an <code>OutputStream<\/code> passed to it, instead of returning compiled String content.<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.19.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "18",
      "patch": "0"
    },
    "releaseNotes": "<article class=\"message is-danger\">\n\n  <div class=\"message-body\">\n  <p>Orchid 0.18.0 contains many new and breaking changes, which are briefly outlined in these release notes. Be sure to\nreview the <a href=\"https://orchid.run/migration/0_18\">Migration Guide<\/a> for a complete list of breaking changes and how\nto address them.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"new-features\"><a href=\"#new-features\" id=\"new-features\" class=\"anchor\"><\/a>New Features<\/h2>\n<ul>\n<li>New <a href=\"https://orchid.run/plugins/orchid-test\">orchid-test<\/a> library, for running integration tests of custom Orchid components.<\/li>\n<li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/internal-links#debugging-internal-links\">Diagnosis Mode<\/a> for detecting\nbroken links in your site.<\/li>\n<li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/components#meta-components\">Meta Components<\/a> improve workflow for adding\nasset-only components and other metadata to pages.<\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-search-feature#algolia-docsearch\">Algolia Docsearch<\/a> native integration<\/li>\n<li>Introduction of experimental <a href=\"https://orchid.run/plugins/orchid-sourcedoc-feature\">orchid-sourcedoc-feature<\/a>, to replace existing code documentation plugins (currently\nan opt-in feature).<\/li>\n<li>Addition of <a href=\"https://orchid.run/plugins/orchid-archives-feature#predefined-collection-archives\">Predefined Collection Archives<\/a>\nfor easier creation of archives based on familiar page collections.<\/li>\n<\/ul>\n<h2 id=\"improvements-and-bugfixes\"><a href=\"#improvements-and-bugfixes\" id=\"improvements-and-bugfixes\" class=\"anchor\"><\/a>Improvements and Bugfixes<\/h2>\n<ul>\n<li>Components are now rendered using the Pebble <code>embed<\/code> tag by default, making it easier for themes to add wrapper markup<\/li>\n<li>Orchid is now being tested on JDKs 8, 9, 10, and 11<\/li>\n<li><code>itemId<\/code> is now a static property of pages and can be viewed from the Admin Panel<\/li>\n<li>Completely redesigned documentation site, with a new logo and a new domain<\/li>\n<li>Repo has been moved to the @orchidhd Github organization<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.18.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "17",
      "patch": "0"
    },
    "releaseNotes": "<blockquote>\n<p>Orchid 0.17.0 contains many new and breaking changes, which are briefly outlined in these relase notes. Be sure to\nreview the <a href=\"https://orchid.run/migration/0_17\">Migration Guide<\/a> for a complete list of breaking changes and how to\naddress them.<\/p>\n<\/blockquote>\n<h2 id=\"new-features\"><a href=\"#new-features\" id=\"new-features\" class=\"anchor\"><\/a>New Features<\/h2>\n<ul>\n<li>New &quot;integrations&quot; projects\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-azure-feature\">orchid-azure-feature<\/a><\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-bitbucket-feature\">orchid-bitbucket-feature<\/a><\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-github-feature\">orchid-github-feature<\/a><\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-gitlab-feature\">orchid-gitlab-feature<\/a><\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-netlify-feature\">orchid-netlify-feature<\/a><\/li>\n<\/ul>\n<\/li>\n<li>Wiki sections can now be imported from Github and Gitlab project wikis (see integrations above)<\/li>\n<li>Sites can now be published to Bitbucket and Gitlab (see integrations above)<\/li>\n<li>New Shared Configurations allow user-defined archetype option groups. See full documentation\n<a href=\"https://orchid.run/wiki/user-manual/core-concepts/shared-config\">here<\/a><\/li>\n<\/ul>\n<h2 id=\"improvements-and-bugfixes\"><a href=\"#improvements-and-bugfixes\" id=\"improvements-and-bugfixes\" class=\"anchor\"><\/a>Improvements and Bugfixes<\/h2>\n<ul>\n<li><strong>Netlify Publisher<\/strong>\n<ul>\n<li>Now handles uploads of really large sites. Previously, deploys of more than a couple thousand pages or so would\ntime out and fail.<\/li>\n<li>It can infer the Netlify siteId from the Orchid base URL, and is now an optional property<\/li>\n<\/ul>\n<\/li>\n<li><strong>Wikis<\/strong>\n<ul>\n<li>PDF ebooks generated by Wiki plugin are now included in a Collection, so they can be linked to with the linking\nfunctions and in menus<\/li>\n<li>Fixed bug creating PDF ebooks for multiple sections<\/li>\n<\/ul>\n<\/li>\n<li><strong>Changelogs<\/strong>\n<ul>\n<li>Adds Archetype to Changelog entries from <code>changelog.allVersions<\/code> in <code>config.yml<\/code><\/li>\n<li>Version bumps are inferred from changelog entries, and no longer need to be manually entered<\/li>\n<li>Improves formatting of <code>meta/versions.json<\/code> file. Release notes can now be embedded in this JSON file<\/li>\n<\/ul>\n<\/li>\n<li><strong>Other<\/strong>\n<ul>\n<li>Improves console output of Git-based publishers and Swiftdoc plugin<\/li>\n<li>Swiftdoc plugin now accepts a list of source roots to find Swift sources, rather than a single directory<\/li>\n<li><code>.puml<\/code> file extension is now recognized as a PlantUML file by default<\/li>\n<li>Fixed NPE calling a TemplateFunction as a Clog-formatted string<\/li>\n<li>Fixes formatting of dates in sitemap XML files so as to not cause warnings from Google indices<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.17.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "16",
      "patch": "0"
    },
    "releaseNotes": "<h2 id=\"new-features\"><a href=\"#new-features\" id=\"new-features\" class=\"anchor\"><\/a>New Features<\/h2>\n<ul>\n<li>Adds new Copper theme! See a demo <a href=\"https://orchid.run/themes/orchid-copper-theme\">here<\/a>.<\/li>\n<li>Adds new orchid-docs-bundle bundle, for easier setup when using Orchid for project documentation. See a full docs\n<a href=\"https://orchid.run/bundles/orchid-docs-bundle\">here<\/a>. It includes the following plugins:\n<ul>\n<li><strong>Orchid Editorial<\/strong><\/li>\n<li><strong>Orchid Pages<\/strong><\/li>\n<li><strong>Orchid Wiki<\/strong><\/li>\n<li><strong>Orchid Forms<\/strong><\/li>\n<li><strong>Orchid Changelog<\/strong><\/li>\n<li><strong>Orchid Search<\/strong><\/li>\n<li><strong>Orchid Diagrams<\/strong><\/li>\n<li><strong>Orchid Syntax Highlighter<\/strong><\/li>\n<\/ul>\n<\/li>\n<li>Adds new Groovydoc plugin for documenting Groovy/Java source code. See full docs <a href=\"https://orchid.run/plugins/orchid-groovydoc-feature\">here<\/a><\/li>\n<\/ul>\n<h2 id=\"bug-fixes\"><a href=\"#bug-fixes\" id=\"bug-fixes\" class=\"anchor\"><\/a>Bug Fixes<\/h2>\n<ul>\n<li>Improves importing and compiling of SASS/SCSS files\n<ul>\n<li>Sass (indented) syntax is now partially supported. JSass is limited in that it does not allow indented-style\nimports, so Orchid will fully compile all indented-style imports at the import site, essentially copying the\ncompiled CSS to the import site. This means that you <em>can<\/em> import indented-style Sass code, but variables,\nfunctions, mixins etc. will not be imported from indented-style Sass files, and already-declared variables,\nfunctions, mixins etc. will not be accessible to the file being imported.<\/li>\n<li>Relative imports are now supported. The first file is expected to be loaded from <code>assets/css<\/code> as normal, but\nsubsequent relative imports will be imported relative to the existing file location.<\/li>\n<li>Absolute imports are now supported, by prefixing an import path with <code>/<\/code>. These files are then located absolute to\nyour site's resources directory, rathern than the normal <code>assets/css<\/code> directory. Files imported from within the\nabsolutely-imported file follow the <em>new<\/em> directory as the context for further relative imports.<\/li>\n<\/ul>\n<\/li>\n<li>Fixes issue using default favicons. Now, sites that do not specify a favicon will use Orchid's default one, rather\nthan showing an empty/broken image as the favicon.<\/li>\n<li>Fixes Krow table display in Windows terminals. As windows terminals do not support many UTF-8 characters, the borders\nused for the summary table displayed poorly. Now, standard ASCII characters are used to draw the borders of the\nresults table on Windows so that it is readable.<\/li>\n<\/ul>\n<h2 id=\"potentially-breaking-changes\"><a href=\"#potentially-breaking-changes\" id=\"potentially-breaking-changes\" class=\"anchor\"><\/a>Potentially-Breaking Changes<\/h2>\n<p>There were no major updates to the Orchid framework in this release, but many of its dependencies have been updated to\nnewer versions which might cause issues.<\/p>\n",
    "major": false,
    "minor": true,
    "version": "0.16.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": false,
    "components": {
      "major": "0",
      "minor": "15",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Fixes Archetype ordering for Static Pages, Posts, and Wikis, so that the archtype data overrides correctly according\nto intended priority<\/li>\n<\/ul>\n<h2 id=\"breaking-changes\"><a href=\"#breaking-changes\" id=\"breaking-changes\" class=\"anchor\"><\/a>Breaking Changes<\/h2>\n<ul>\n<li>Archetypes for Static Page groups are no longer nested under <code>staticPages<\/code> in <code>config.yml<\/code>. The new Archetype location\nis simply <code>pages.{pageGroup}<\/code>, instead of <code>pages.staticPages.{pageGroup}<\/code>.<\/li>\n<li>Archetypes for Post Categories groups are no longer nested under <code>postPages<\/code> in <code>config.yml<\/code>. The new Archetype\nlocation is simply <code>posts.{postCategory}<\/code>, instead of <code>posts.postPages.{postCategory}<\/code>.<\/li>\n<li>Archetypes for Wiki Sections groups are no longer nested under <code>wikiPages<\/code> in <code>config.yml<\/code>. The new Archetype location\nis simply <code>wiki.{wikiSection}<\/code>, instead of <code>wiki.wikiPages.{wikiSection}<\/code>.<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.15.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": false,
    "components": {
      "major": "0",
      "minor": "14",
      "patch": "0"
    },
    "releaseNotes": "<h2 id=\"bug-fixes\"><a href=\"#bug-fixes\" id=\"bug-fixes\" class=\"anchor\"><\/a>Bug Fixes<\/h2>\n<ul>\n<li>Fixes broken excerpt function<\/li>\n<li>Updates FutureImperfect theme to work with new Asset Manager<\/li>\n<li>Improves asset functions to prevent collisions with AssetRelation assets<\/li>\n<li>Updates to Kotlin 1.3! And updates other dependencies to match<\/li>\n<\/ul>\n<h2 id=\"breaking-changes\"><a href=\"#breaking-changes\" id=\"breaking-changes\" class=\"anchor\"><\/a>Breaking Changes<\/h2>\n<ul>\n<li>Updates to Kotlin 1.3. You may need to update some of your Kotlin code to work properly with 1.3.<\/li>\n<li>Pebble template syntax for <code>set<\/code> tag has been changed. The identifier must be a plain name, evaluated expressions\nare no longer supported. (e.g. <code>{% set 'identifier' = 'value' %}<\/code> is not longer valid, use\n<code>{% set identifier = 'value' %}<\/code> instead)<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.14.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "13",
      "patch": "0"
    },
    "releaseNotes": "<p>This is a major release which contains numerous breaking changes. Please review the following changes carefully to make\nsure your site is updated properly.<\/p>\n<h2 id=\"new-features\"><a href=\"#new-features\" id=\"new-features\" class=\"anchor\"><\/a>New Features<\/h2>\n<ul>\n<li>Adds Radio Buttons as available form field types.<\/li>\n<li>Archetypes are now auto-documented in the admin panel alongside options fields.<\/li>\n<li><code>.properties<\/code> files can now be used as data files, or used as the Front Matter format.<\/li>\n<li>Netlify CMS configs are now set up to generate modular list form definitions. When <a href=\"https://github.com/netlify/netlify-cms/pull/1857#issuecomment-437908110\">this PR on Netlify CMS<\/a>\nis merged, Orchid will already be set up to work with it.<\/li>\n<li>Wikis can now generate offline documentation! Add <code>createPdf: true<\/code> to each Wiki section's config that you want\noffline docs, and Orchid will compile all the content for that section into a PDF.<\/li>\n<li>A new Asset Management API! You can use the <code>asset()<\/code> template function to load an asset dynamically load and render\nan asset. Asset rendering is lazy, which allows you to transform your assets, such as rotating, scaling, or resizing\nan image.<\/li>\n<li>Added a <code>parseAs<\/code> function which works similarly to <code>compileAs<\/code>, but returns parsed data instead of a rendered String.<\/li>\n<\/ul>\n<h2 id=\"bug-fixes\"><a href=\"#bug-fixes\" id=\"bug-fixes\" class=\"anchor\"><\/a>Bug Fixes<\/h2>\n<ul>\n<li>Menu items were not the most intuitive, especially when trying to render a submenu that also had an index page at its\nroot. A single menu item can now have both a page it references itself, and a list of children menu items, leaving\nthe theme to decide how to display such a situation.<\/li>\n<li>Fixes issue setting asset directories as Strings in <code>config.yml<\/code>.<\/li>\n<li>Makes option types linkable in admin panel again.<\/li>\n<li>Fixed several issues with bad configurations in Netlify CMS config, and errors using it locally with Orchid's server.<\/li>\n<li>Prevents assets from being rendered more than once, especially when added as extra CSS or JS. Orchid now tracks the\nassets rendered throughout the entire build cycle, and only renders whats necessary.<\/li>\n<li>Assets attached to Posts (and other similar objects) now reference an actual asset rather than just being Strings.\nThese assets are rendered lazily, and so can be transformed using the normal asset transformation functions.<\/li>\n<\/ul>\n<h2 id=\"breaking-changes\"><a href=\"#breaking-changes\" id=\"breaking-changes\" class=\"anchor\"><\/a>Breaking Changes<\/h2>\n<ul>\n<li>Menu classes have been renamed and its public method signatures have changed significantly.\n<ul>\n<li><code>OrchidMenuItemImpl<\/code> is now <code>MenuItem<\/code>. In addition, creating menu items now follows a Java-style Builder pattern\nrather then using overloaded constructors.<\/li>\n<li><code>OrchidMenuItem<\/code> is now <code>OrchidMenuFactory<\/code>.<\/li>\n<\/ul>\n<\/li>\n<li>Default assets directory is now <code>assets/media<\/code> rather than just <code>assets<\/code>.<\/li>\n<li>Breadcrumbs APIs have been simplified, and many of its classes have been removed. Instead of the possibility of\nmultiple breadcrumb types, there is just a single <code>BreadcrumbStrategy<\/code>, and Orchid expects plugins to manage the\nbreadcrumb structure by setting parent pages appropriately.<\/li>\n<li>The Forms plugin no longer creates its own pages, and forms are only loaded from data files (<code>.yaml<\/code>, etc.). A form\nshould link to an arbitrary submission page using a PageReference at <code>redirectionPage<\/code>.<\/li>\n<li>Updates Orchid Gradle plugin so extra args are passed directly, instead of split and reformatted.<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.13.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "12",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Fixes bugs in querying index, and makes more useful overall<\/li>\n<li>Adds menu items to link to pages relative to the current page, or a page queried from the index<\/li>\n<li>Allows CSS and JS to be placed inline in a page from Front Matter<\/li>\n<li>Updates Netlify CMS to 2.0<\/li>\n<li>Adds descriptions to all common plugins items, like components, menu items, etc. Descriptions are viewable from admin\npanel, to make it easier to understand what you can do to build your site.<\/li>\n<li>Improves styling of admin panel to be more useful<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.12.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "11",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Adds Kotlin documentation with Dokka<\/li>\n<li>Allows page previous, next, and parent links to be overridden in Front Matter configs<\/li>\n<li>Makes Homepage URL &quot;pretty&quot;<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.11.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "10",
      "patch": "0"
    },
    "releaseNotes": "<p><strong>This is a major release, which contains several breaking changes. Read carefully, your site might not properly\nif you do not update you site in line with these changes.<\/strong><\/p>\n<h3 id=\"notable-new-features\"><a href=\"#notable-new-features\" id=\"notable-new-features\" class=\"anchor\"><\/a>Notable New Features<\/h3>\n<ul>\n<li>orchid-javadoc-feature no longer requires a separate Gradle plugin! The Orchid plugin will take care of starting and running\nthe Javadoc program and does not rely on Gradle doing it for you. <strong>This means that the\n<code>com.eden.orchidJavadocPlugin<\/code> Gradle plugin has been removed, and you must remove it from your <code>build.gradle<\/code>\nscripts.<\/strong><\/li>\n<li>Parsing command line flags now uses the same Options extraction framework as the rest of Orchid, and so is much easier\nto add custom flags.<\/li>\n<li>Refactors resource source APIs to be more extensible.<\/li>\n<\/ul>\n<h3 id=\"breaking-changes-for-end-users\"><a href=\"#breaking-changes-for-end-users\" id=\"breaking-changes-for-end-users\" class=\"anchor\"><\/a>Breaking Changes for End-users<\/h3>\n<ul>\n<li><code>com.eden.orchidJavadocPlugin<\/code> no longer exists in v0.10.0 and above, and must be removed from your build scripts<\/li>\n<li>FastClasspathScanner APIs have been changed significantly, and the project renamed to ClassGraph. Refer to the new\n<a href=\"https://github.com/classgraph/classgraph/wiki\">ClassGraph Wiki<\/a> to see how to migrate your code.<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.10.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "9",
      "patch": "0"
    },
    "releaseNotes": "<p><strong>This is a major release, which contains several breaking changes. Read carefully, your site might not properly\nif you do not update you site in line with these changes.<\/strong><\/p>\n<h3 id=\"notable-new-features\"><a href=\"#notable-new-features\" id=\"notable-new-features\" class=\"anchor\"><\/a>Notable New Features<\/h3>\n<ul>\n<li>Tags can now be easily set up to used tabbed content. The Writer's Blocks plugin includes implementations for Tabs and\nan Accordion<\/li>\n<li>Publishing to Github Pages now has several publishing modes, which will allow you to publish without overwriting the\nold site. This is perfect for managing library documentation, as it will allow you to keep the docs around for every\nolder version of your project.<\/li>\n<li>The <code>data<\/code> directory has been changed to <code>config<\/code> to match the <code>config.yml<\/code> file it corresponds to. In addition, you\ncan now create a <code>data.yml<\/code> and use datafiles in the <code>data<\/code> directory to host arbitrary data used in your site. The\ndata in <code>data<\/code> is not included as options, so there is no fear of your data accidentally changing the configuration\nof your site in any way, it is just data and nothing more.<\/li>\n<li>Layouts are now much easier to set up and are more prescriptive, with no more &quot;magic&quot; included you need to know.\nAnything that should be included in your layouts is automatically documented in your admin panel's TemplateTags.<\/li>\n<\/ul>\n<h3 id=\"all-changes\"><a href=\"#all-changes\" id=\"all-changes\" class=\"anchor\"><\/a>All Changes<\/h3>\n<ul>\n<li>Makes TemplateTags and TemplateFunctions page-aware<\/li>\n<li>Changes Parsers to return a Map rather than a JSONObject<\/li>\n<li>Updates Pebble to 3.0.0 release version. Adds 'serialize' method to Parsers so we can write objects back into that representation if needed<\/li>\n<li>Caches compiled page content in the Page, frees the page directly instead of just its resource<\/li>\n<li>Adds accordion tabbed tag. Displays tabs in the order they are parsed<\/li>\n<li>Updates dependency versions<\/li>\n<li>Adds Tabs tabbed tag to WritersBlocks plugin<\/li>\n<li>Changes API of TemplateTags to support tags with inner tabs<\/li>\n<li>Adds multiple publishing modes for GithubPages publisher, adds bean validation to all Publishers<\/li>\n<li>Changes signature of TemplateFunctions so that filtered input is just set as an Option<\/li>\n<li>Makes all options extraction use Maps and Lists instead of JSONObjects and JSONArrays<\/li>\n<li>Sets up Hibernate Validator for validating classes with Options<\/li>\n<li>Implements scripts, styles, head, and page tags to remove the 'magic' includes previously used.<\/li>\n<li>Fixes issue in docs where bundles landing pages were not linking to their plugin pages<\/li>\n<li>Updates to Pebble 3.0, adds custom AttributeResolver to call a 'get' method with the String attribute, which allows for accessing front matter of pages and also for JSONObjects<\/li>\n<li>Renames 'dropdown' menu item to 'submenu'<\/li>\n<li>Changes name of <code>data<\/code> directory to <code>config<\/code>, changes <code>templates<\/code> parameter in OrchidPage, OrchidComponent, and FormField to <code>template<\/code><\/li>\n<\/ul>\n<h3 id=\"breaking-changes-for-end-users\"><a href=\"#breaking-changes-for-end-users\" id=\"breaking-changes-for-end-users\" class=\"anchor\"><\/a>Breaking Changes for End-users<\/h3>\n<ul>\n<li>Changes name of <code>data<\/code> directory to <code>config<\/code><\/li>\n<li>changes <code>templates<\/code> parameter in OrchidPage, OrchidComponent, and FormField to <code>template<\/code> (it still accepts either a\nString or an array of strings)<\/li>\n<li>Renames <code>dropdown<\/code> menu item to <code>submenu<\/code><\/li>\n<li>Many classes and methods have been changed in a non-backwards-compatible way. Updating should be pretty\nstraightforward, but you may need to view the changes in the commit history to know exactly what to change.<\/li>\n<li>Updates to Pebble 3.0.0. Old templates will still work as they did previously, but there is some new functionality\navailable, and some behavior might be different than it was. View the\n<a href=\"https://github.com/PebbleTemplates/pebble/releases/tag/v3.0.0\">Pebble changelog<\/a> to know more.<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.9.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "8",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Splits Gradle plugin into a base a Javadoc plugin\n<ul>\n<li>Base: <code>com.eden.orchidPlugin<\/code><\/li>\n<li>Javadoc: <code>com.eden.orchidJavadocPlugin<\/code><\/li>\n<\/ul>\n<\/li>\n<li>Gradle plugins now use the same version as the rest of Orchid<\/li>\n<li>Refactored options framework to make it simpler to extend and easier to use<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.8.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": false,
    "components": {
      "major": "0",
      "minor": "7",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Adds basic concept of Options Archetypes, applies it to all OrchidPage types<\/li>\n<li>Updates dependency versions<\/li>\n<\/ul>\n",
    "major": false,
    "minor": true,
    "version": "0.7.0",
    "url": "#{'changelog'|baseUrl}"
  },
  {
    "patch": true,
    "components": {
      "major": "0",
      "minor": "6",
      "patch": "0"
    },
    "releaseNotes": "<ul>\n<li>Updates all plugins to Kotlin<\/li>\n<li>Minor bugfixes and behavior improvements across all plugins<\/li>\n<li>Sets up all plugins to generate their own reference documentation<\/li>\n<\/ul>\n",
    "major": true,
    "minor": true,
    "version": "0.6.0",
    "url": "#{'changelog'|baseUrl}"
  }
]