{
  "ownKey": "wiki",
  "childrenPages": {"wiki": {
    "ownKey": "wiki",
    "childrenPages": {
      "user-manual": {
        "ownKey": "user-manual",
        "childrenPages": {
          "getting-started": {
            "ownKey": "getting-started",
            "childrenPages": {
              "admin-panel": {
                "ownKey": "admin-panel",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "admin-panel",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/admin-panel"
                  },
                  "next": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "plugins",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/plugins"
                  },
                  "previous": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "site-config",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/site-config"
                  },
                  "description": "Orchid's unique admin panel brings all your plugins' documentation to you, always up-to-date",
                  "title": "Admin Panel",
                  "content": "<p>The Orchid Admin panel provides a great way to view everything that <em>can<\/em> be done with your current site, and helping\nyou set up your site most effectively. Since Orchid is self-documenting by its very nature, it is able to inspect your\ncurrent plugins and themes and generate a reference of all the available generators, components, etc. that you can use\nand all the options available on them. And since it is self documenting, everything you see in the Admin Panel is\nguaranteed to be the most up-to-date info available for your current plugin versions, so you never again have to trust\nthat the plugin developers are keeping their documentation relevant over time.<\/p>\n<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>With your Orchid site running locally in <code>serve<\/code> mode and the <a href=\"https://orchid.run/plugins/orchid-plugin-docs-feature\">orchid-plugin-docs-feature<\/a> plugin installed, all you\nhave to do is visit <code>http://localhost:8080/admin<\/code> in your browser to access the Admin Panel.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin.png\" alt=\"Admin panel\" /><\/p>\n<h2 id=\"sidebar\"><a href=\"#sidebar\" id=\"sidebar\" class=\"anchor\"><\/a>Sidebar<\/h2>\n<p>Click the &quot;hamburger&quot; icon on the top left to open a sidebar with a list of the most common components of your site that\nyou will be configuring. In addition, you can view a list of anything that could possible be extended in Orchid, to give\nyou a sense of what you could customize with plugins.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin-sidebar.png\" alt=\"Admin panel sidebar\" /><\/p>\n<h2 id=\"plugin-documentation\"><a href=\"#plugin-documentation\" id=\"plugin-documentation\" class=\"anchor\"><\/a>Plugin Documentation<\/h2>\n<p>Clicking on one of these items takes you to a page with its documentation automatically generated and displayed for easy\nuse. Below is an example for the Pages plugin's generator, which is responsible for rendering content from the <code>pages/<\/code>\ndirectory into pages in your site.<\/p>\n<p>You'll notice it has a sample YAML configuration for this generator. This shows the all the possible configuration\noptions, which are guaranteed to match the version of the plugin you're using with no upkeep from the plugin creator,\nand the default values for those options.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin-generator.png\" alt=\"Admin panel generator\" /><\/p>\n<h2 id=\"manage-panel\"><a href=\"#manage-panel\" id=\"manage-panel\" class=\"anchor\"><\/a>Manage Panel<\/h2>\n<p>The &quot;Manage&quot; button on the top right opens a panel with some relevant content about your site, and a command box.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin-manage.png\" alt=\"Admin panel manage panel\" /><\/p>\n<h2 id=\"collection-info\"><a href=\"#collection-info\" id=\"collection-info\" class=\"anchor\"><\/a>Collection Info<\/h2>\n<p>Clicking into one of the rows of the &quot;Collections&quot; table in the Manage Panel will show all the pages in that collection,\nand also related collections. This helps you understand the logical structure of your site's content.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin-collection.png\" alt=\"Admin panel manage panel\" /><\/p>\n<h2 id=\"build-progress\"><a href=\"#build-progress\" id=\"build-progress\" class=\"anchor\"><\/a>Build Progress<\/h2>\n<p>The header will also indicate indexing and generation progress during a build.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin-progress.png\" alt=\"Admin panel progress\" /><\/p>\n<h2 id=\"netlify-cms-integration\"><a href=\"#netlify-cms-integration\" id=\"netlify-cms-integration\" class=\"anchor\"><\/a>Netlify CMS Integration<\/h2>\n<p>If you have the <a href=\"https://orchid.run/plugins/orchid-netlify-cms-feature\">orchid-netlify-cms-feature<\/a> plugin installed, it will be embedded directly within the admin panel.<\/p>\n<p><img src=\"https://orchid.run/assets/media/admin-netlify-cms.png\" alt=\"Admin panel progress\" /><\/p>\n"
                }]
              },
              "basic-usage": {
                "ownKey": "basic-usage",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "basic-usage",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/basic-usage"
                  },
                  "next": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "directory-structure",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/directory-structure"
                  },
                  "previous": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "quickstart",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/quickstart"
                  },
                  "description": "Learn the basic commands to build and deploy your Orchid static site",
                  "title": "Basic Usage",
                  "content": "<p>Orchid is a <strong>static site generator<\/strong> with a focus on building really great documentation sites. Its main job is to take\ncontent from a variety of sources (such as Markdown or comments in your project's code), allow a series of plugins to\ntransform that content into pages, and then render those pages to files. From there, you are free to deploy these files\nto any webserver you'd like, and Orchid can help you with that too!<\/p>\n<p>Whether you run Orchid from Gradle, Maven, or a kscript, you'll have the following tasks available to you:<\/p>\n<h2 id=\"build\"><a href=\"#build\" id=\"build\" class=\"anchor\"><\/a>Build<\/h2>\n<p>A <code>build<\/code> in Orchid will take your content and configurations, and generate a site in your configured output directory.\nSimple as that.<\/p>\n<p><strong>Example Usage<\/strong><\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"F2OMEUIJsd\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>kscript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"F2OMEUIJsd\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./gradlew orchidBuild\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./mvnw orchid:build\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./sbtw orchidBuild\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>kscript ./orchid.kts build\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"serve\"><a href=\"#serve\" id=\"serve\" class=\"anchor\"><\/a>Serve<\/h2>\n<p>Running Orchid in <code>serve<\/code> mode will first build your site, but then also start a local webserver for you to easily\npreview it. In addition, it will watch your content directory for changes and rebuild with each change. And if you have\nthe <a href=\"https://orchid.run/plugins/orchid-plugin-docs-feature\">orchid-plugin-docs-feature<\/a> plugin installed, you'll also be able to visit an admin panel at <code>/admin<\/code> and\nautomatically get the most up-to-date documentation for your installed plugins delivered right to you!<\/p>\n<p><strong>Example Usage<\/strong><\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"1kKHlvvAo4\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>kscript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"1kKHlvvAo4\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./gradlew orchidServe\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./mvnw orchid:serve\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./sbtw orchidServe\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>kscript ./orchid.kts serve\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"deploy\"><a href=\"#deploy\" id=\"deploy\" class=\"anchor\"><\/a>Deploy<\/h2>\n<p>Once you're happy with your site, it's time to take it live! The <code>deploy<\/code> task will build your site and then publish it\nto a variety of destinations, such as <a href=\"https://orchid.run/plugins/orchid-netlify-feature\">Netlify<\/a> or <a href=\"https://orchid.run/plugins/orchid-github-feature\">GitHub Pages<\/a>, but also has some other\ngoodies like uploading release notes to <a href=\"https://orchid.run/plugins/orchid-github-feature\">GitHub Releases<\/a>.<\/p>\n<p><strong>Example Usage<\/strong><\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"nrpI1fOXsx\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>kscript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"nrpI1fOXsx\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./gradlew orchidDeploy\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./mvnw orchid:deploy\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./sbtw orchidDeploy\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>kscript ./orchid.kts deploy\n<\/code><\/pre><\/div>\n\n<\/div>\n<h2 id=\"run-task\"><a href=\"#run-task\" id=\"run-task\" class=\"anchor\"><\/a>Run Task<\/h2>\n<p>In addition to the commands above, you can pass the name of an Orchid task directly through the CLI as an additional\n<code>runTask<\/code> parameter. Available commands are <code>build<\/code>, <code>deploy<\/code>, and <code>serve<\/code>.<\/p>\n<p><strong>Example Usage<\/strong><\/p>\n<div class=\"tabs\">\n  <ul data-tabs=\"gNmuJTxLuo\">\n  \n    <li class=\"is-active\"><a>Gradle<\/a><\/li>\n  \n    <li ><a>Maven<\/a><\/li>\n  \n    <li ><a>SBT<\/a><\/li>\n  \n    <li ><a>kscript<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"gNmuJTxLuo\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./gradlew orchidRun -PorchidRunTask=build\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./mvnw orchid:run -Dorchid.runTask=build\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>./sbtw -Dorchid.runTask=build orchidRun\n<\/code><\/pre><\/div>\n\n  <div class=\" tab-hidden content is-medium-tablet is-large-fullhd\"><pre><code>kscript ./orchid.kts build\n<\/code><\/pre><\/div>\n\n<\/div>\n"
                }]
              },
              "quickstart": {
                "ownKey": "quickstart",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "quickstart",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/quickstart"
                  },
                  "next": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "basic-usage",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/basic-usage"
                  },
                  "previous": {
                    "path": "wiki/user-manual",
                    "baseUrl": "https://orchid.run",
                    "fileName": "getting-started",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started"
                  },
                  "description": "Get set up with a new or existing project.",
                  "title": "Quick-Start",
                  "content": "<h2 id=\"start-a-new-orchid-project\"><a href=\"#start-a-new-orchid-project\" id=\"start-a-new-orchid-project\" class=\"anchor\"><\/a>Start a new Orchid project<\/h2>\n<p>The simplest way to get started with Orchid is to use the Orchid Starter repo as a base.<\/p>\n<pre><code class=\"language-sh\">git clone https://github.com/orchidhq/OrchidStarter.git\ncd OrchidStarter\n./gradlew orchidServe\n<\/code><\/pre>\n<h2 id=\"deploy-to-netlify\"><a href=\"#deploy-to-netlify\" id=\"deploy-to-netlify\" class=\"anchor\"><\/a>Deploy to Netlify<\/h2>\n<p>Alternatively, you can simply click the &quot;Deploy to Netlify&quot; button below to automatically clone, build, and deploy the\nOrchidStarter repo to the Netlify CDN.<\/p>\n<p><a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/orchidhq/OrchidStarter\"><img src=\"https://www.netlify.com/img/deploy/button.svg\" alt=\"Deploy to Netlify\" /><\/a><\/p>\n<h2 id=\"integrate-orchid-into-an-existing-project\"><a href=\"#integrate-orchid-into-an-existing-project\" id=\"integrate-orchid-into-an-existing-project\" class=\"anchor\"><\/a>Integrate Orchid into an existing project<\/h2>\n<p>The Starter repo is great if you are setting up Orchid as a standalone website, but Orchid was designed to be integrated\ninto any project. Orchid can be set up from Gradle, Maven, or started manually through scriptlets or from another\napplication.<\/p>\n<h3 id=\"gradle\"><a href=\"#gradle\" id=\"gradle\" class=\"anchor\"><\/a>Gradle<\/h3>\n<p>To use Orchid from a Gradle project, setup your project's build.gradle file like so:<\/p>\n<pre><code class=\"language-groovy\">// build.gradle\nplugins {\n    // Add the official Orchid Gradle plugin so you can use Orchid with the custom DSL   \n    id &quot;com.eden.orchidPlugin&quot; version &quot;0.21.1&quot;\n}\n\nrepositories {\n    // Orchid uses dependencies from both Jcenter and Jitpack, so both must be included. jcenter also includes \n    // everything available from MavenCentral, while Jitpack makes accessible any Github project.\n    mavenCentral()\n    maven { url &quot;https://kotlin.bintray.com/kotlinx&quot; }\n}\n\ndependencies {\n    // Add an Orchid Bundle. orchid-all-bundle comes with all official themes included.\n    // You must include a theme separately when using the orchid-blog-bundle bundle.\n    // Any additional plugins may be added as dependencies here as well.\n    orchidRuntime 'io.github.copper-leaf.orchid:orchid-all-bundle:0.21.1'\n}\n\norchid {\n    // All properties are optional\n    theme   = &quot;{theme}&quot;                           // can also be set as `site.theme` in `config.yml`\n    version = &quot;${project.version}&quot;                // defaults to project version\n    baseUrl = &quot;{baseUrl}&quot;                         // a baseUrl prepended to all generated links. Can also be set as `site.baseUrl` in `config.yml` Defaults to '/'\n    srcDir  = &quot;path/to/new/source/directory&quot;      // defaults to 'src/orchid/resources'\n    destDir = &quot;path/to/new/destination/directory&quot; // defaults to 'build/docs/orchid'\n    runTask = &quot;build&quot;                             // specify a task to run with 'gradle orchidRun'\n}\n<\/code><\/pre>\n<p>You can now run Orchid in the following ways:<\/p>\n<ol>\n<li><code>./gradlew orchidRun<\/code> - Runs an Orchid task. The <code>runTask<\/code> should be specified in <code>build.gradle<\/code> or passed as a\nGradle project property (<code>-PorchidRunTask=build<\/code>). The task <code>help<\/code> will show a list of all tasks that can be\nrun given the plugins currently installed.<\/li>\n<li><code>./gradlew orchidBuild<\/code> - Runs the Orchid build task a single time then exits. The resulting Orchid site will be in\n<code>build/docs/orchid<\/code> unless the output directory has been changed. You can then view the site by starting any HTTP\nfile server in the root of the output directory, or deploy this folder directly to your webserver.<\/li>\n<li><code>./gradlew orchidServe<\/code> - Sets up a development server and watches files for changes. The site can be viewed at\n<code>localhost:8080<\/code> (or the closest available port).<\/li>\n<li><code>./gradlew orchidDeploy<\/code> - Runs the orchid build, then deploys it using Orchid's <a href=\"https://orchid.run/wiki/user-manual/core-concepts/publication\">deployment pipeline<\/a>\nYou can create and run your own deployment scripts, create a release on Github from changelogs, or publish the site\ndirectly to Github Pages or Netlify.<\/li>\n<\/ol>\n<p><em>On windows, all the above commands need to be run with <code>gradlew<\/code> instead of <code>./gradlew<\/code>.<\/em><\/p>\n<p>The Orchid Gradle plugin adds a new configuration and content root to your project, in the <code>src/orchid<\/code> directory\n(you may have to create this folder yourself). All your site content sits in <code>src/orchid/resources<\/code>, and any\nadditional classes you'd like to include as a private plugin can be placed in <code>src/orchid/java<\/code>.<\/p>\n<h3 id=\"maven\"><a href=\"#maven\" id=\"maven\" class=\"anchor\"><\/a>Maven<\/h3>\n<p>To use Orchid from a Maven project, setup your project's pom.xml file like so:<\/p>\n<pre><code class=\"language-xml\">&lt;!-- pom.xml --&gt;\n&lt;project&gt;\n    ...\n    \n    &lt;properties&gt;\n        &lt;orchid.version&gt;0.21.1&lt;/orchid.version&gt;\n    &lt;/properties&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;!-- Add the official Orchid Gradle plugin so you can use Orchid with the custom DSL --&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;io.github.copper-leaf.orchid&lt;/groupId&gt;\n                &lt;artifactId&gt;orchid-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${orchid.version}&lt;/version&gt;\n\n                &lt;!-- Add an Orchid Bundle. orchid-all-bundle comes with all official themes included.\n                     You must include a theme separately when using the orchid-blog-bundle bundle.\n                     Any additional plugins may be added as dependencies here as well. --&gt;\n                &lt;dependencies&gt;\n                    &lt;dependency&gt;\n                        &lt;groupId&gt;io.github.copper-leaf.orchid&lt;/groupId&gt;\n                        &lt;artifactId&gt;orchid-all-bundle&lt;/artifactId&gt;\n                        &lt;version&gt;${orchid.version}&lt;/version&gt;\n                    &lt;/dependency&gt;\n                &lt;/dependencies&gt;\n\n                &lt;configuration&gt;\n                    &lt;!-- All properties are optional --&gt;\n                    &lt;theme&gt;${theme}&lt;/theme&gt;                              &lt;!-- can also be set as `site.theme` in `config.yml` --&gt;\n                    &lt;version&gt;${project.version}&lt;/version&gt;                &lt;!-- defaults to project version --&gt;\n                    &lt;baseUrl&gt;${baseUrl}&lt;/baseUrl&gt;                        &lt;!-- a baseUrl prepended to all generated links. Can also be set as `site.baseUrl` in `config.yml` Defaults to '/' --&gt;\n                    &lt;srcDir&gt;path/to/new/source/directory&lt;/srcDir&gt;        &lt;!-- defaults to 'src/orchid/resources' --&gt;\n                    &lt;destDir&gt;path/to/new/destination/directory&lt;/destDir&gt; &lt;!-- defaults to 'target/docs/orchid' --&gt;\n                    &lt;runTask&gt;build&lt;/runTask&gt;                             &lt;!-- specify a task to run with 'mvn orchid:run' --&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n\n    &lt;!-- Orchid uses dependencies from both Jcenter and Jitpack, so both must be included. jcenter also includes \n         everything available from MavenCentral, while Jitpack makes accessible any Github project. --&gt;\n    &lt;pluginRepositories&gt;\n        &lt;pluginRepository&gt;\n            &lt;id&gt;jcenter&lt;/id&gt;\n            &lt;name&gt;bintray-plugins&lt;/name&gt;\n            &lt;url&gt;https://jcenter.bintray.com&lt;/url&gt;\n        &lt;/pluginRepository&gt;\n        &lt;pluginRepository&gt;\n            &lt;id&gt;kotlinx&lt;/id&gt;\n            &lt;url&gt;https://kotlin.bintray.com/kotlinx&lt;/url&gt;\n        &lt;/pluginRepository&gt;\n    &lt;/pluginRepositories&gt;\n&lt;/project&gt;\n<\/code><\/pre>\n<p>You can now run Orchid in the following ways:<\/p>\n<ol>\n<li><code>./mvn orchid:run<\/code> - Runs an Orchid task. The <code>runTask<\/code> property should be specified in <code>pom.xml<\/code> or passed as a\nMaven system property (<code>-Dorchid.runTask=build<\/code>). The task <code>help<\/code> will show a list of all tasks that can be\nrun given the plugins currently installed.<\/li>\n<li><code>./mvn orchid:build<\/code> - Runs the Orchid build task a single time then exits. The resulting Orchid site will be in\n<code>target/docs/orchid<\/code> unless the output directory has been changed. You can then view the site by starting any HTTP\nfile server in the root of the output directory, or deploy this folder directly to your webserver.<\/li>\n<li><code>./mvn orchid:serve<\/code> - Sets up a development server and watches files for changes. The site can be viewed at\n<code>localhost:8080<\/code> (or the closest available port).<\/li>\n<li><code>./mvn orchid:deploy<\/code> - Runs the Orchid build, then deploys it using Orchid's <a href=\"https://orchid.run/wiki/user-manual/deployment/publication-pipeline\">deployment pipeline<\/a>\nYou can create and run your own deployment scripts, create a release on Github from changelogs, or publish the site\ndirectly to Github Pages or Netlify.<\/li>\n<\/ol>\n<h3 id=\"kscript\"><a href=\"#kscript\" id=\"kscript\" class=\"anchor\"><\/a>kscript<\/h3>\n<p>If you're using Orchid to build a standalone site (not integrated as the docs for another project in the same repo), a\nfull Gradle or Maven setup may be a bit overkill. Instead, you may use a tool like\n<a href=\"https://github.com/holgerbrandl/kscript\">kscript<\/a> to bootstrap and run Orchid yourself with a more minimalistic project\nstructure. The basic API below is specifically created for kscript, but can be easily adapted for other JVM scripting\ntools, or used like a library and started from another application.<\/p>\n<pre><code class=\"language-kotlin\">// orchid.kts\n@file:MavenRepository(&quot;kotlinx&quot;, &quot;https://kotlin.bintray.com/kotlinx&quot;)\n\n@file:DependsOn(&quot;io.github.copper-leaf.orchid:orchid-all-bundle:0.21.1&quot;)\n\nimport com.eden.orchid.Orchid\nimport com.eden.orchid.StandardModule\n\nval flags = HashMap&lt;String, Any&gt;()\n\n// The following properties are optional\nflags[&quot;theme&quot;]   = &quot;{theme}&quot;                           // can also be set as `site.theme` in `config.yml`\nflags[&quot;version&quot;] = &quot;0.21.1&quot;\nflags[&quot;baseUrl&quot;] = &quot;{baseUrl}&quot;                         // a baseUrl prepended to all generated links. Can also be set as `site.baseUrl` in `config.yml` Defaults to '/'\nflags[&quot;srcDir&quot;]  = &quot;path/to/new/source/directory&quot;      // defaults to './src'\nflags[&quot;destDir&quot;] = &quot;path/to/new/destination/directory&quot; // defaults to './site'\nflags[&quot;runTask&quot;] = &quot;build&quot;                             // specify a default task to run when not supplied on the command line\n\nval modules = listOf(StandardModule.builder()\n        .args(args) // pass in the array of command-line args and let Orchid parse them out\n        .flags(flags) // pass a map with any additional args\n        .build()\n)\nOrchid.getInstance().start(modules)\n<\/code><\/pre>\n<p>You can now start Orchid directly with its CLI, using the following commands:<\/p>\n<ol>\n<li><code>kscript ./path/to/scriptlet.kts &lt;task&gt; [--&lt;flag&gt; &lt;flag value&gt;]<\/code> - Runs an Orchid task by name. Additional parameters\nmay be specified after the task name like <code>--theme Editorial<\/code>, which take precedence over the default values\nspecified in the scriptlet. The default tasks are:\n<ol>\n<li><code>build<\/code> - Runs the Orchid build task a single time then exits. The resulting Orchid site will be in\n<code>build/docs/orchid<\/code> unless the output directory has been changed. You can then view the site by starting any\nHTTP file server in the root of the output directory, or deploy this folder directly to your webserver.<\/li>\n<li><code>serve<\/code> - Sets up a development server and watches files for changes. The site can be viewed at <code>localhost:8080<\/code>\n(or the closest available port).<\/li>\n<li><code>deploy<\/code> - Runs the Orchid build, then deploys it using Orchid's <a href=\"https://orchid.run/wiki/user-manual/deployment/publication-pipeline\">deployment pipeline<\/a>\nYou can create and run your own deployment scripts, create a release on Github from changelogs, or publish the\nsite directly to Github Pages or Netlify.<\/li>\n<\/ol>\n<\/li>\n<li><code>kscript ./path/to/scriptlet.kts help<\/code> - Print out basic usage and all available tasks and command-line options.<\/li>\n<\/ol>\n<h3 id=\"sbt\"><a href=\"#sbt\" id=\"sbt\" class=\"anchor\"><\/a>sbt<\/h3>\n<p>Your sbt project should look something like this:<\/p>\n<pre><code> amazeballs/\n      |\n      |\u2014\u2014 build.sbt\n      |\n      |\u2014\u2014 src/\n      |    |\n      |    +\u2014\u2014 main/\n      |          |\n      |          +\u2014\u2014 scala/\n      |          |     |\n      |          |     +\u2014\u2014 Amazeballs.scala\n      |          |\n      |          +\u2014\u2014 orchid/\n      |                 |\n      |                 +\u2014\u2014 resources/  &lt;== ORCHID SOURCE FILES GO HERE\n      |                         |\n      |\u2014\u2014 project/              +- homepage.md\n             |\n             +\u2014\u2014 build.properties\n             |\n             +\u2014\u2014 plugins.sbt\n<\/code><\/pre>\n<p>If you wish to integrate orchid into an <code>sbt<\/code> project, you'll use the Orchid sbt plugin. To install it\nin your project, you'll need to ensure that at least the following is included in your <code>project/plugins.sbt<\/code>:<\/p>\n<pre><code>resolvers += Resolver.jcenterRepo // hosts Orchid and its components\nresolvers += Resolver.bintrayRepo(&quot;copper-leaf&quot;, &quot;sbt-plugins&quot;) // hosts Orchid SBT plugin\n\naddSbtPlugin( &quot;io.github.copper-leaf.orchid&quot; % &quot;sbt-orchid&quot; % &quot;0.21.1&quot; )\n<\/code><\/pre>\n<p>(You will usually want to include a bit more than this in <code>project/plugins.sbt<\/code>. The much <a href=\"#rich-projectpluginssbt-example\">richer <code>project/plugins.sbt<\/code> example below<\/a> is a better starting point.)<\/p>\n<p>Then place the source files for your Orchid site in <code>src/main/orchid/resources<\/code>.<\/p>\n<p>Now, on the sbt command line you can run:<\/p>\n<ol>\n<li><code>orchidBuild<\/code> - Runs the Orchid build task a single time then completes. The resulting Orchid site will be in\n<code>target/orchid<\/code> unless the <code>orchidDestination<\/code> setting has been customized. You can then view the site by starting any\nHTTP file server in the root of the output directory, or deploy this folder directly to your webserver.<\/li>\n<li><code>orchidServe<\/code> - Sets up a development server and watches files for changes. The site can be viewed at <code>localhost:8080<\/code>\n(or the closest available port).<\/li>\n<li><code>orchidDeploy<\/code> - Runs the Orchid build, then deploys the generated site using Orchid's <a href=\"https://orchid.run/wiki/user-manual/deployment/publication-pipeline\">deployment pipeline<\/a>\nYou can create and run your own deployment scripts, create and release on Github from changelogs, or publish the\nsite directly to Github Pages or Netlify.<\/li>\n<\/ol>\n<p>You can also run these tasks directly from your OS command line as <code>sbt orchidBuild<\/code>, <code>sbt orchidServe<\/code>, or <code>sbt orchidDeploy<\/code>.\nYou can run Orchid-related tasks generically with <code>orchidRun<\/code>. For example, the following are all equivalent to running <code>orchidBuild<\/code>:<\/p>\n<ul>\n<li><code>&gt; orchidRun build<\/code> from the sbt command line<\/li>\n<li><code>$ sbt &quot;orchidRun build&quot;<\/code> from your OS command line<\/li>\n<li><code>$ sbt -Dorchid.runTask=build orchidRun<\/code> from your OS command line<\/li>\n<\/ul>\n<p>Available commands are <code>build<\/code>, <code>deploy<\/code>, and <code>serve<\/code>.<\/p>\n<h4 id=\"sbt-plugin-configuration\"><a href=\"#sbt-plugin-configuration\" id=\"sbt-plugin-configuration\" class=\"anchor\"><\/a>sbt plugin configuration<\/h4>\n<ul>\n<li><a href=\"#basic\">basic<\/a><\/li>\n<li><a href=\"#rich-projectpluginssbt-example\">rich <code>project/plugins.sbt<\/code> example<\/a><\/li>\n<li><a href=\"#all-buildsbt-settings\">all <code>build.sbt<\/code> settings<\/a><\/li>\n<\/ul>\n<h5 id=\"basic\"><a href=\"#basic\" id=\"basic\" class=\"anchor\"><\/a>basic<\/h5>\n<p>In your project's <code>build.sbt<\/code> file, you will usually want to configure an Orchid theme. That's just:<\/p>\n<pre><code>orchidTheme := &quot;BsDoc&quot;\n<\/code><\/pre>\n<p>However, for this to work, you will need to make sure the theme and any other features\nyour site relies upon are available to the build. Orchid offers a very rich feature set, made available via distinct, dynamically loaded dependencies.\nIn order to use these features, you'll want to add them as dependies <em>of the build, not your project<\/em>.<\/p>\n<p>The easiest way to do this is just include these dependencies in your <code>project/plugins.sbt<\/code> file.\n<a href=\"#rich-projectpluginssbt-example\">Below<\/a> is a very rich example <code>project/plugins.sbt<\/code> file. You can use any of the main Orchid features\nsimply by uncommenting the associated dependencies. For the <code>BsDoc<\/code> theme to be made available, for example,\nyou'd want to uncomment the line containing <code>libraryDependencies += orchidComponent( &quot;orchid-bsdoc-theme&quot; )<\/code>.<\/p>\n<h5 id=\"rich-projectpluginssbt-example\"><a href=\"#rich-projectpluginssbt-example\" id=\"rich-projectpluginssbt-example\" class=\"anchor\"><\/a>rich <code>project/plugins.sbt<\/code> example<\/h5>\n<pre><code class=\"language-scala\">// build.sbt\nresolvers += Resolver.jcenterRepo // hosts Orchid and its components\nresolvers += Resolver.bintrayRepo(&quot;copper-leaf&quot;, &quot;sbt-plugins&quot;) // hosts Orchid SBT plugin\n\nval OrchidVersion = &quot;0.21.1&quot;\n\naddSbtPlugin(&quot;io.github.copper-leaf.orchid&quot; % &quot;sbt-orchid&quot; % OrchidVersion)\n\n/*\n *  Add desired Orchid components to the build\n */\n \ndef orchidComponent( name : String ) = &quot;io.github.copper-leaf.orchid&quot; % name % OrchidVersion\n\n/*\n *  The plugin includes orchid-core already as a dependency,\n *  but explicitly specifying it helps ensure version consistency\n *  with other components.\n */\n \nlibraryDependencies += orchidComponent( &quot;orchid-core&quot; )\n\n/*\n *  Uncomment the components you desire\n */\n\n/* Themes -- see https://orchid.run/themes */\n/* Don't forget to set 'orchidTheme' in build.sbt! */\n\n// libraryDependencies += orchidComponent( &quot;orchid-bsdoc-theme&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-copper-theme&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-editorial-theme&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-future-imperfect-theme&quot; )\n\n/* Plugins -- see https://orchid.run/plugins */\n\n// libraryDependencies += orchidComponent( &quot;orchid-pages-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-posts-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;OrchidPluginDocs&quot; )\n\n// libraryDependencies += orchidComponent( &quot;orchid-asciidoc-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;azure&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-bible-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-bitbucket-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-changelog-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-diagrams-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-forms-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-github-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-gitlab-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-groovydoc-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-javadoc-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-kss-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-kotlindoc-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-netlify-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-netlify-cms-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-presentations-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-search-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-swagger-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-swiftdoc-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-syntax-highlighter-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-archives-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-wiki-feature&quot; )\n// libraryDependencies += orchidComponent( &quot;orchid-writers-blocks-feature&quot; )\n\n<\/code><\/pre>\n<h5 id=\"all-buildsbt-settings\"><a href=\"#all-buildsbt-settings\" id=\"all-buildsbt-settings\" class=\"anchor\"><\/a>all <code>build.sbt<\/code> settings<\/h5>\n<ul>\n<li><code>orchidBaseUrl<\/code> ~ The base URL for generted site links<\/li>\n<li><code>orchidDestination<\/code> ~ The directory into which orchid sites are generated (<code>target/orchid<\/code> by default)<\/li>\n<li><code>orchidDryDeploy<\/code> ~ Allows running a dry deploy instead of a full deploy (<code>false<\/code> by default)<\/li>\n<li><code>orchidEnvironment<\/code> ~ The environment used to run the orchid site. (<code>debug<\/code> by default)<\/li>\n<li><code>orchidPort<\/code> ~ The port to run the dev server on. (<code>8080<\/code> by default)<\/li>\n<li><code>orchidResources<\/code> ~ The directory of source documents Orchid directly transforms (<code>src/main/orchid/resources<\/code>, or more precisely <code>orchidSource.value<\/code> / &quot;resources&quot;, by default)<\/li>\n<li><code>orchidSource<\/code> ~ The <em>top-level<\/em> directory for orchid-related source documents (<code>src/main/orchid<\/code> by default)<\/li>\n<li><code>orchidTheme<\/code>~ The theme that will be imposed on the generated orchid site (Theme <code>Default<\/code> by default)<\/li>\n<li><code>orchidVersion<\/code> ~ The version of the orchid site that will be generated (Your sbt project's <code>version<\/code> by default)<\/li>\n<\/ul>\n"
                }]
              },
              "site-config": {
                "ownKey": "site-config",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "site-config",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/site-config"
                  },
                  "next": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "admin-panel",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/admin-panel"
                  },
                  "previous": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "directory-structure",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/directory-structure"
                  },
                  "description": "How to configure Orchid and scale the configuration as your site grows",
                  "title": "Configuration",
                  "content": "<p>A config file <code>config.yml<\/code> in the root of the resources directory serves as the root of all site options. The entire\nsite can be fully described in this one file, but if you have lots of options and want to make it easier to manage it\nall, you may break it out into individual files in the <code>config/<\/code> directory. Orchid merges the options in <code>config/<\/code> with\nthose in <code>config.yml<\/code>, which are then made available to all parts of the Orchid build. Configuration options are loaded\nbefore every build when running in &quot;serve&quot; mode.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>Note: Orchid supports many data languages, including TOML. You may name your config file <code>config.tml<\/code> to parse it as\nTOML rather than YAML, or <code>config.json<\/code> to parse as JSON. The same goes for all files in <code>config/<\/code> and <code>data/<\/code>, and\ndifferent files can use different formats as needed.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"basic-site-config\"><a href=\"#basic-site-config\" id=\"basic-site-config\" class=\"anchor\"><\/a>Basic Site Config<\/h2>\n<hr />\n<pre><code class=\"language-yaml\">site:\n  baseUrl: 'https://www.example.com/' (1)\n  theme: 'Editorial' (2)\n\ntheme: # (3)\n  menu: \n    - type: 'readme' \n    - type: 'license' \nwiki: # (4) \n  sections:\n    - 'userManual'\n    - 'developersGuide'\nservices: # (5)\n  generators:\n    disabled:\n      - 'javadoc'\n      - 'posts'\n  \nallPages: # (6)\n  layout: single\n<\/code><\/pre>\n<ol>\n<li>Set the base URL to be prepended to all generated links. Plugins can provide various helpers for generating base\nURLs, such as the <a href=\"https://orchid.run/plugins/orchid-netlify-feature\">orchid-netlify-feature<\/a> plugin looking up the proper base URL for Netlify CI branch preview\nor production builds.<\/li>\n<li>Set the default theme to use for your site.<\/li>\n<li>Theme options come from <code>theme<\/code> or from an object at the theme's <code>key<\/code>. When using multiple themes, you may want to\nuse individual theme keys to configure each theme independently, but <code>theme<\/code> is generally easier to quickly try out\ndifferent themes.<\/li>\n<li>Generator options come from an object at that plugin's key<\/li>\n<li>Services are all scoped under the <code>services<\/code> object, and are used to configure the behavior of the Orchid framework.<\/li>\n<li>In addition to the options defined in a page's FrontMatter, you may have a set of shared options that <em>all<\/em> pages, or\nspecific sub-sets of pages should have in common. This is an example of <strong>archetypes<\/strong>, learn more about them here.<\/li>\n<\/ol>\n<p>For larger and more complex sites, a single <code>config.yml<\/code> file will get messy very quickly. You may break up your\nmonolithic <code>config.yml<\/code> into as many smaller files as you need, simply by adding a file in the <code>config/<\/code> directory,\nwhose filename corresponds to its options key. This process is recursive, and you can further break up <em>those<\/em> files by\ncreating directories within <code>config/<\/code>, and so on. You may also specify a filename <em>and<\/em> and folder, and the two will be\nmerged into one single options object, where the options in the file take precedence over the folder.<\/p>\n<p>For example, the following YAML configs are equivalent:<\/p>\n<p><strong>Config in one single config.yml<\/strong><\/p>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  siteName: 'My Site'\n  components:\n    - type: pageContent\n    - type: readme\n    - type: license\n  menu:\n    - type: page\n      itemId: 'About'\n    - type: link\n      title: 'Contact'\n      url: '/contact'\n<\/code><\/pre>\n<p><strong>Config broken into several files<\/strong><\/p>\n<pre><code class=\"language-yaml\"># config.yml (you could even omit config.yml if desired)\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config/site.yml\nbaseUrl: 'https://www.example.com/'\ntheme: 'Editorial'\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config/theme.yml\nsiteName: 'My Site'\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config/theme/components.yml\n- type: pageContent\n- type: readme\n- type: license\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config/theme/menu.yml\n- type: page\n  itemId: 'About'\n- type: link\n  title: 'Contact'\n  url: '/contact'\n<\/code><\/pre>\n"
                }]
              },
              "plugins": {
                "ownKey": "plugins",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "plugins",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/plugins"
                  },
                  "next": {
                    "path": "wiki/user-manual",
                    "baseUrl": "https://orchid.run",
                    "fileName": "core-concepts",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts"
                  },
                  "previous": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "admin-panel",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/admin-panel"
                  },
                  "description": "Orchid's many plugins ease the transition from other tools, see the best plugins here.",
                  "title": "Plugins",
                  "content": "<p>Orchid was created from the very beginning to support plugins. In fact, everything that Orchid does is set up in a\nmodular, pluggable way, which makes it possible to customize your site with exactly the features you want and nothing\nmore.<\/p>\n<h2 id=\"popular-plugins\"><a href=\"#popular-plugins\" id=\"popular-plugins\" class=\"anchor\"><\/a>Popular Plugins<\/h2>\n<h3 id=\"static-pages\"><a href=\"#static-pages\" id=\"static-pages\" class=\"anchor\"><\/a><a href=\"https://orchid.run/plugins/orchid-pages-feature\">Static Pages<\/a><\/h3>\n<p>Add static pages with rich taxonomy to your Orchid site.<\/p>\n<h3 id=\"blog-posts\"><a href=\"#blog-posts\" id=\"blog-posts\" class=\"anchor\"><\/a><a href=\"https://orchid.run/plugins/orchid-posts-feature\">Blog Posts<\/a><\/h3>\n<p>Add Jekyll-like blogging functionality to your Orchid site.<\/p>\n<h3 id=\"wikis\"><a href=\"#wikis\" id=\"wikis\" class=\"anchor\"><\/a><a href=\"https://orchid.run/plugins/orchid-wiki-feature\">Wikis<\/a><\/h3>\n<p>A Gitbook-like wiki for your Orchid site.<\/p>\n<h3 id=\"code-docs\"><a href=\"#code-docs\" id=\"code-docs\" class=\"anchor\"><\/a><a href=\"https://orchid.run/plugins/orchid-sourcedoc-feature\">Code Docs<\/a><\/h3>\n<p>The base module for adding code documentation to Orchid with Kodiak<\/p>\n<h2 id=\"complete-plugin-list\"><a href=\"#complete-plugin-list\" id=\"complete-plugin-list\" class=\"anchor\"><\/a>Complete Plugin List<\/h2>\n<p>The full list of available plugins is available in the plugin directory. You can also browse themes, or find bundles\nof plugins which are frequently used together.<\/p>\n<div class=\"field is-grouped is-grouped-multiline\">\n  <p class=\"control is-expanded\">\n    <a href=\"https://orchid.run/plugins\" class=\"button is-primary is-block\">Browse Plugins<\/a>\n  <\/p>\n  <p class=\"control is-expanded\">\n    <a href=\"https://orchid.run/themes\" class=\"button is-primary is-block\">Browse Themes<\/a>\n  <\/p>\n  <p class=\"control is-expanded\">\n    <a href=\"https://orchid.run/bundles\" class=\"button is-primary is-block\">Browse Bundles<\/a>\n  <\/p>\n<\/div>\n<h2 id=\"custom-plugins\"><a href=\"#custom-plugins\" id=\"custom-plugins\" class=\"anchor\"><\/a>Custom Plugins<\/h2>\n<p>If you're interested in creating custom plugins for Orchid, either for private use or to publish publicly, check out the\n<a href=\"https://orchid.run/wiki/user-manual/extending\">Extending Orchid<\/a> guide.<\/p>\n"
                }]
              },
              "directory-structure": {
                "ownKey": "directory-structure",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "directory-structure",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/directory-structure"
                  },
                  "next": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "site-config",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/site-config"
                  },
                  "previous": {
                    "path": "wiki/user-manual/getting-started",
                    "baseUrl": "https://orchid.run",
                    "fileName": "basic-usage",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/getting-started/basic-usage"
                  },
                  "description": "Overview of Orchid's directory structure",
                  "title": "Directory Structure",
                  "content": "<p>A typical Orchid site looks like this:<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n├── config/\n├── data.yml\n├── data/\n├── assets/\n|   ├── css/\n|   ├── js/\n|   └── media/\n└── templates/\n    ├── layouts/\n    ├── pages/\n    ├── components/\n    ├── tags/\n    └── includes/\n<\/code><\/pre>\n<h2 id=\"directory-structure-overview\"><a href=\"#directory-structure-overview\" id=\"directory-structure-overview\" class=\"anchor\"><\/a>Directory Structure Overview<\/h2>\n<p>None of the files listed above are required. Orchid will work just fine if you choose to omit any (or all) of them.<\/p>\n<p>The following is a high-level overview of the main directories and important files you'll need to know to customize your\nsite.<\/p>\n<h3 id=\"configyml\"><a href=\"#configyml\" id=\"configyml\" class=\"anchor\"><\/a>config.yml<\/h3>\n<p>The <code>config.yml<\/code> file is the main configuration for everything. In here you can configure plugins, themes, and certain\ncore Orchid functionality. It doesn't have to be YAML either, can be set up in any format you choose, such as TOML or\nJSON. You can break up large <code>config.yml<\/code> files by moving parts of it into individual files in <code>config/<\/code>. Learn more\nabout this here.<\/p>\n<h3 id=\"datayml\"><a href=\"#datayml\" id=\"datayml\" class=\"anchor\"><\/a>data.yml<\/h3>\n<p>These <code>data.yml<\/code> and <code>data/<\/code> files will be loaded in exactly the same way as <code>config.yml<\/code>, and then made available in\nyour templates through the <code>data<\/code> variable.<\/p>\n<h3 id=\"homepagemd\"><a href=\"#homepagemd\" id=\"homepagemd\" class=\"anchor\"><\/a>homepage.md<\/h3>\n<p>This file is the landing page for your entire site. If it is not present, Orchid will create a basic landing page for\nyou.<\/p>\n<h3 id=\"assets\"><a href=\"#assets\" id=\"assets\" class=\"anchor\"><\/a>assets/<\/h3>\n<p>Put all the CSS, JS, images, or other assets you need here. Typically, CSS and SCSS files go in <code>assets/css<\/code> and JS\nfiles go in <code>assets/js<\/code>, and these will only be coped to the built site if you actually use them. All files in\n<code>assets/media<\/code> are copied over by default, but you can set additional directories to always copy over if you need.<\/p>\n<h3 id=\"templates\"><a href=\"#templates\" id=\"templates\" class=\"anchor\"><\/a>templates/<\/h3>\n<p>Unlike many static site generators, Orchid distributes its themes as plugins which fully encapsulate their templates and\nassets. This means you do not need to copy a bunch of files into your project to use a theme. However, you may want to\ncustomize of the default templates. Any templates in the <code>templates/<\/code> directory will override those defined by the theme\nor other plugins.<\/p>\n<h3 id=\"content\"><a href=\"#content\" id=\"content\" class=\"anchor\"><\/a>Content<\/h3>\n<p>Content in Orchid comes from plugins, such as <a href=\"https://orchid.run/plugins/orchid-pages-feature\">orchid-pages-feature<\/a>, <a href=\"https://orchid.run/plugins/orchid-posts-feature\">orchid-posts-feature<\/a>, or\n<a href=\"https://orchid.run/plugins/orchid-wiki-feature\">orchid-wiki-feature<\/a>. Each plugin is free to use whatever directory structure it wants, so make sure to check out\nthe documentation for your plugins to know where they get their content from.<\/p>\n"
                }]
              }
            },
            "ownPages": [{
              "reference": {
                "path": "wiki/user-manual",
                "baseUrl": "https://orchid.run",
                "fileName": "getting-started",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/getting-started"
              },
              "next": {
                "path": "wiki/user-manual/getting-started",
                "baseUrl": "https://orchid.run",
                "fileName": "quickstart",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/getting-started/quickstart"
              },
              "description": "",
              "title": "Getting Started",
              "content": ""
            }]
          },
          "core-concepts": {
            "ownKey": "core-concepts",
            "childrenPages": {
              "themes": {
                "ownKey": "themes",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "themes",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/themes"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "compilers",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/compilers"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "pages",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/pages"
                  },
                  "description": "Using multiple themes, you can pick the right theme for different parts of your site.",
                  "title": "Themes",
                  "content": "<p>Themes are what create structure for your site and make it unique. At its core, an Orchid theme contributes CSS and\nJavascript assets to the pages using that theme, and it also helps decide the templates that are used to lay out\nyour pages. The templates and assets added by your theme can always be overridden in your local build, but it is never\nnecessary to know anything about the theme templates for it to work well with Orchid.<\/p>\n<h2 id=\"picking-a-theme\"><a href=\"#picking-a-theme\" id=\"picking-a-theme\" class=\"anchor\"><\/a>Picking a Theme<\/h2>\n<p>Themes in Orchid are added just as a dependency in your <code>build.gradle<\/code>, but they are not actually used in your site\nunless you set the <code>theme<\/code> property in <code>config.yml<\/code> :<\/p>\n<pre><code class=\"language-groovy\">// build.gradle\ndependencies {\n    orchidRuntime 'io.github.copper-leaf.orchid:orchid-editorial-theme:0.21.1'\n}\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config.yml\nsite:\n  theme: Editorial\n<\/code><\/pre>\n<p>Your theme's documentation should tell you what the key for the theme is, or you can find it in the Orchid Admin Panel.<\/p>\n<p>There are a number of <a href=\"https://orchid.run/themes\">officially-supported Orchid themes<\/a> for you to choose from, or else\nservices like <a href=\"https://jitpack.io/\">Jitpack<\/a> make it exceedingly simple for theme designers to publish new themes just\nby hosting the theme on Github, which makes it easier for you to get set up with community-developed themes.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>Note: If you have developed a theme that you'd like to feature in our showcase, you can submit a pull request to the\n<code>docs<\/code> branch of the Orchid repository and it will be featured on this site.<\/p>\n  <\/div>\n<\/article>\n<h2 id=\"configuring-your-theme\"><a href=\"#configuring-your-theme\" id=\"configuring-your-theme\" class=\"anchor\"><\/a>Configuring your Theme<\/h2>\n<p>Your themes are configured in your <code>config.yml<\/code>, using values from <code>theme<\/code>, or from the\n<a href=\"https://orchid.run/wiki/user-manual/getting-started/site-config\">config archetype<\/a> at the theme's key. For example, this current theme is <code>Editorial<\/code>, and\ncan be configured any of the following ways:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  primaryColor: #7E80CF\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config.yml\nEditorial:\n  primaryColor: #7E80CF\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config/theme.yml\nprimaryColor: #7E80CF\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config/Editorial.yml\nprimaryColor: #7E80CF\n<\/code><\/pre>\n<h2 id=\"using-multiple-themes\"><a href=\"#using-multiple-themes\" id=\"using-multiple-themes\" class=\"anchor\"><\/a>Using Multiple Themes<\/h2>\n<p>Orchid seamlessly supports multiple themes within a single build, allowing you to pick the best theme for each section\nof your site. You even use your base theme with different options for different areas of your site if you'd like.<\/p>\n<p>Orchid currently supports setting custom themes for the pages from each generator. Simply set the name of the Theme\nyou'd like to use in the generator's <code>theme<\/code> property in <code>config.yml<\/code>. The theme will use the normal theme options as\noutlines in the section above.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nwiki:\n  theme: 'Editorial'\n<\/code><\/pre>\n<p>Alternatively, you can set the <code>theme<\/code> property to an object with a property of <code>key<\/code> and a value of the theme's name.\nThis object is then used to configure the theme options for that specific theme as it is used by that generator's pages\nwhen they are rendered.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nwiki:\n  theme: \n    key: 'Editorial'\n    primaryColor: '#000000'\n<\/code><\/pre>\n<h2 id=\"custom-themes\"><a href=\"#custom-themes\" id=\"custom-themes\" class=\"anchor\"><\/a>Custom Themes<\/h2>\n<p>See more about creating custom themes <a href=\"https://orchid.run/wiki/user-manual/extending/custom-themes\">here<\/a>.<\/p>\n"
                }]
              },
              "components": {
                "ownKey": "components",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "components",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/components"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "menus",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/menus"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "front-matter",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/front-matter"
                  },
                  "description": "Components are single, logical blocks of content within a Page.",
                  "title": "Components",
                  "content": "<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Components are single, logical blocks of content within a Page. They typically represent the main content area of a\nPage, with many components being rendered sequentially into that one area. In fact, the Page Content you are currently\nreading is not a static part of the page layout, but is just a Component which renders the page content.<\/p>\n<p>Components are also commonly used to implement sidebars, footers, and other &quot;widget areas&quot; within a layout, and as such\ncan be defined by the theme. Since 0.18.0, Orchid also supports &quot;<a href=\"#meta-components\">meta components<\/a>&quot; whose only purpose\nis to add scripts, stylesheets, and meta tags to a page's <code>&lt;HEAD&gt;<\/code>. There is no difference in whether a Component is\nattached to a Page or a Theme.<\/p>\n<p>Components allow you to build a site with modular &quot;content blocks&quot; that are defined by the end-user, rather than forcing\nthe user to only use certain pre-defined templates as is normally the case with CMS and SSG themes. Each component is\neasy to set up and use with very little or no configuration required, but when combined with other components allows you\nto build highly complex and beautifully unique sites with very little effort.<\/p>\n<h2 id=\"using-components\"><a href=\"#using-components\" id=\"using-components\" class=\"anchor\"><\/a>Using Components<\/h2>\n<h3 id=\"basic-usage\"><a href=\"#basic-usage\" id=\"basic-usage\" class=\"anchor\"><\/a>Basic Usage<\/h3>\n<p>Components are usually defined in a page's Front Matter as a list of objects, with a <code>type<\/code> property telling Orchid\nwhich component to use. All pages have a <code>components<\/code> property that holds the normal components for a page, but anything\nthat has an option of type <code>ComponentHolder<\/code> can declare and use components in the exact same way.<\/p>\n<pre><code class=\"language-yaml\">\n---\n...\ncomponents:\n  - type: 'pageContent'\n  - type: 'form'\n    form: 'contact'\n---\n<\/code><\/pre>\n<p>Plugins and themes may provide their own component types, and any of them may be used anywhere in your site. Each\ncomponent type typically defines its own options in addition to those outlined below, so be sure to check out the\nplugin's documentation to see what is available. Or better yet, visit your <a href=\"https://orchid.run/wiki/user-manual/getting-started/admin-panel\">Admin Panel<\/a> to let Orchid\ntell you exactly what components and options are available to you with the guarantee of always being completely\nup-to-date.<\/p>\n<p>More commonly, components are added through <a href=\"https://orchid.run/wiki/user-manual/core-concepts/shared-config\">shared configurations<\/a>, to set up\nonce and be applied to many pages.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n\n# Add additional components to all pages generated from the `orchid-pages-feature` plugin\npages:\n  staticPages: \n    components:\n      - type: 'pageContent'\n      - type: 'form'\n        form: 'contact'\n\n# Different components added to all pages generated from the `orchid-wiki-feature` plugin\nwiki:\n  wikiPages: \n    components:\n      - type: 'pageContent'\n      - type: 'prism'\n<\/code><\/pre>\n<h3 id=\"component-ordering\"><a href=\"#component-ordering\" id=\"component-ordering\" class=\"anchor\"><\/a>Component Ordering<\/h3>\n<p>These components are rendered on the page in the order they are declared in that list. You may also explicitly set the\n<code>order<\/code> in which you want your components rendered. If no <code>order<\/code> is manually set, it will be assigned an order of 10x\nits position in the list. So the first item defaults to order 10, the second item has order 20, and so on. In the\nfollowing example, the <code>form<\/code> component will be rendered before the <code>pageContent<\/code> component, because it has a lower\n<code>order<\/code> value.<\/p>\n<pre><code class=\"language-yaml\">...\ncomponents:\n  - type: 'pageContent'\n    order: 20\n  - type: 'form'\n    form: 'contact'\n    order: 10\n\n# `form` will be displayed before the `pageContent`\n<\/code><\/pre>\n<h3 id=\"hiding-components\"><a href=\"#hiding-components\" id=\"hiding-components\" class=\"anchor\"><\/a>Hiding Components<\/h3>\n<p>You may manually hide components by setting <code>hidden: true<\/code>. This has the effect of not rendering a template for that\nComponent on the page, but will still include its CSS and JS assets.<\/p>\n<pre><code class=\"language-yaml\">...\ncomponents:\n  - type: 'pageContent'\n  - type: 'form'\n    form: 'contact'\n    hidden: true\n\n# `form` will not be rendered as a template, but its assets will still be included\n<\/code><\/pre>\n<h3 id=\"component-wrappers\"><a href=\"#component-wrappers\" id=\"component-wrappers\" class=\"anchor\"><\/a>Component Wrappers<\/h3>\n<p>Some themes will choose to wrap each component in additional markup, such as the &quot;boxes&quot; for the page content in the\n<a href=\"https://orchid.run/themes/orchid-future-imperfect-theme\">orchid-future-imperfect-theme<\/a> theme. But in some cases, you may wish that the doesn't\ndoesn't apply these wrappers to a particular component, like if it provides its own container markup. For these\nsituations, you may set <code>noWrapper: true<\/code> to render the component without a wrapper.<\/p>\n<pre><code class=\"language-yaml\">...\ncomponents:\n  - type: 'pageContent'\n  - type: 'form'\n    form: 'contact'\n    noWrapper: true\n\n# `form` will not be wrapped\n<\/code><\/pre>\n<h3 id=\"custom-component-templates\"><a href=\"#custom-component-templates\" id=\"custom-component-templates\" class=\"anchor\"><\/a>Custom Component Templates<\/h3>\n<p>Sometimes, the template that a plugin provides for a component doesn't look the greatest in your theme, or maybe you\nwant to use the same component in multiple places, but with different templates in each, as in the case of the sidebar\nand homepage of the <a href=\"https://github.com/orchidhq/OrchidStarter\">Orchid starter repo<\/a>. For these situations, you can\nprovide a custom template to render instead of the default given by the plugin ot theme. The <code>templates<\/code> property\naccepts either a single String or an array of Strings, the first of which that is found will be used.<\/p>\n<pre><code class=\"language-yaml\">...\ncomponents:\n  - type: 'pageContent'\n  - type: 'form'\n    form: 'contact'\n    template: 'customForm' \n\n# `form` will now prefer the `components/customForm.peb` template over `components/form.peb`  \n<\/code><\/pre>\n<h3 id=\"page-content-component\"><a href=\"#page-content-component\" id=\"page-content-component\" class=\"anchor\"><\/a>Page Content Component<\/h3>\n<p>Most pages include a Component that represents the intrinsic content of that Page. For example, a Blog post comes from a\nsingle source file and produces a single Page whose &quot;content&quot; is simply the text content of that file. This component is\nadded to Pages by default, unless the Generator or Page says otherwise. If you specify custom components to use on a\nPage and want to include the Page content, make sure to add the &quot;pageContent&quot; component.<\/p>\n<p>When rendering Page Content, it is common for the pages produced by different Generators to have different requirements\nin rendering. For example, a Page produces by the orchid-pages-feature may want to show a list of tags and its author, while a\nPage produced by the Wiki may want to highlight the Wiki section currently being read. To support this, Page Content\ncomponents load a &quot;page template&quot; in a similar way to how a page Layout template is chosen, but is just for that one,\nlogical block of content within a page, rather than the entire page.<\/p>\n<p>This even allows plugins to create simple, yet semantic, HTML page templates that look good in any theme, but that\nThemes can then override to make much more custom or bring more fully in-line with its own styling. These page templates\nthen always look the same for a given page type, regardless of the layout chosen, which aids in maintainability of a\ntheme.<\/p>\n<h2 id=\"component-assets\"><a href=\"#component-assets\" id=\"component-assets\" class=\"anchor\"><\/a>Component Assets<\/h2>\n<p>Components do not need to be declared on a page directly, but they are attached to the page when it is rendered, and is\nable to provide any kind of scripts or styles to the page in which it is being used.<\/p>\n<p>Some components, like the <a href=\"https://orchid.run/plugins/orchid-swagger-feature\">Swagger Component<\/a> add their own scripts and styles to the\npage. You do not need to do anything for this, the component will take care of telling Orchid to render its assets and\nadd them to the Page so they end up in the same blocks of scripts and styles that the Theme also provides.<\/p>\n<p>You are also free to add your own assets to any given component. For example, if you wanted to use a <code>form<\/code> component\non all your blog posts, but the styling wasn't quite to your liking, you could make your own SCSS file, add the styling\ncustomizations there, and then tell your <code>form<\/code> component to use your custom CSS. Then, every page that includes your\n<code>form<\/code> component will also automatically compile and include your custom styles. The same can be done for extra JS\nassets as well.<\/p>\n<pre><code class=\"language-yaml\">...\ncomponents:\n  - type: 'pageContent'\n  - type: 'form'\n    form: 'contact'\n    extraCSS:\n      - 'assets/css/form-overrides.scss'\n    extraJs:\n      - 'assets/js/form-ajax.js'\n<\/code><\/pre>\n<p>This is particularly useful when you are declaring your components in the <a href=\"https://orchid.run/wiki/user-manual/core-concepts/shared-config\">Archetypes<\/a> of a page rather than\nin the page's own Front Matter, as it allows you to add extra assets to numerous pages with a single declaration.<\/p>\n<pre><code class=\"language-yaml\"># page's Front Matter\ncomponents:\n  - type: 'form'\n    form: 'contact'\n    order: 100\n      \n# config.yml\nposts:\n  postPages:\n    components:\n      - type: 'pageContent'\n        order: 10\n      - type: 'form'\n        form: 'comment'\n        order: 50\n        extraCSS:\n          - 'assets/css/form-overrides.scss' \n<\/code><\/pre>\n<h2 id=\"meta-components\"><a href=\"#meta-components\" id=\"meta-components\" class=\"anchor\"><\/a>Meta Components<\/h2>\n<p>While many components add blocks of content to the page, another common use-case is attaching global assets to pages\nwithout rendering any content. A good example is the <code>prism<\/code> component from the <a href=\"https://orchid.run/plugins/orchid-syntax-highlighter-feature\">orchid-syntax-highlighter-feature<\/a>\nplugin, which configures and adds <a href=\"https://prismjs.com/\">Prism.js<\/a> to your site for browser-based syntax highlighting.<\/p>\n<p>Normally, when adding this component to a page you would have to also add the <code>pageContent<\/code> component, since it is not\nadded by default when other components are set. The typical usage would be like the following:<\/p>\n<pre><code class=\"language-yaml\">components:\n  - type: 'pageContent'\n  - type: 'prism'\n<\/code><\/pre>\n<p>This is problematic for several reasons:<\/p>\n<ol>\n<li>If multiple archetypes are trying to add similar components in this way, how do you decide which one gets to add\n<code>pageContent<\/code> and which ones don't? This is especially problematic if these components aren't added globally, but\nonly to a subset of you site, especially where those subsets overlap slightly. Without careful planning, you might\nrun into a situation where <code>pageContent<\/code> is added to a page multiple times!<\/li>\n<li>Since components are primarily attached to pages, the same component must be configured individually for each page.\nThis is inefficient, since ideally the component is a global thing, and probably makes more sense to be attached to\nthe theme and only configured once.<\/li>\n<\/ol>\n<p>To address this, Orchid 0.18.0 introduces the concept of &quot;Meta Components&quot;, which are simply a specialization of normal\nComponents. They can be attached to either the Theme (which is new), or to pages (which is the same as before). For\nbackward-compatibility, meta components can still be added to the normal component areas, but only components marked as\nsuch can be added to meta-component areas.<\/p>\n<p>Configuring them is just like regular components, but at the <code>metaComponents<\/code> key:<\/p>\n<pre><code class=\"language-markdown\"># pages/page-one.md\n---\ncomponents: \n  - ...\nmetaComponents:   # Meta components attached to a single page in its Front Matter\n  - type: 'prism'\n---\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config.yml\n\ntheme:\n  metaComponents:   # Meta components attached to the Theme, added to any page using that theme \n    - type: 'prism'\n\nwiki:\n  wikiPages:\n    metaComponents:   # Meta components attached to all pages in a specific Archetype. No need to specify `pageContent` anymore\n      - type: 'prism' \n<\/code><\/pre>\n"
                }]
              },
              "pages": {
                "ownKey": "pages",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "pages",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/pages"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "themes",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/themes"
                  },
                  "previous": {
                    "path": "wiki/user-manual",
                    "baseUrl": "https://orchid.run",
                    "fileName": "core-concepts",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts"
                  },
                  "description": "Pages are the most basic unit of data in Orchid, representing one file in your final site. Get to know the basic parts of an Orchid page and how other Orchid components relate.",
                  "title": "Pages",
                  "content": "<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Pages are the most basic unit of data in Orchid. Conceptually, a Page represents one file in your final site, whether\nits your homepage, a blog post, CSS or JS assets, images, or anything else.<\/p>\n<p>Orchid uses a plugin system to index your <em>pages<\/em> from a variety of different sources, such as Markdown files or code\ncomments, and then renders them to file embedded in a <em>theme<\/em>. The theme inserts the page content into a <em>layout<\/em>,\nusually with one or more <em>menus<\/em>.<\/p>\n<p>The <em>page content<\/em> is composed of a list of <em>components<\/em>, with one of these typically embedding the Markdown file\ncontents inside a <em>page template<\/em>. Pages may also have their own unique menus, which usually holds menu items related to\nthat specific page or its related pages.<\/p>\n<p><img src=\"https://orchid.run/assets/media/page-structure.png\" alt=\"Admin panel\" /><\/p>\n<h2 id=\"drafts\"><a href=\"#drafts\" id=\"drafts\" class=\"anchor\"><\/a>Drafts<\/h2>\n<p>Drafts are pages that are not yet ready to be published or were intended to be accessible only for a limited time and\nare now expired. Pages that are drafts will not be rendered or be discoverable by other plugins from the index.<\/p>\n<p>Any page can become a draft, and there are multiple ways to make a draft from any given page. The easiest way is just to\nset the page as a draft in its Front Matter:<\/p>\n<pre><code class=\"language-yaml\">\n---\n...\ndraft: true\n---\n<\/code><\/pre>\n<p>You can also set a <code>publishDate<\/code> or an <code>expiryDate<\/code> in the pages Front Matter, which both take a date in the ISO-8601\ndate format (<code>YYYY-MM-DD<\/code>) or datetime format (<code>YYYY-MM-DDThh:mm:ss<\/code>):<\/p>\n<pre><code class=\"language-yaml\">\n---\n...\npublishDate: '2018-03-01' # considered a draft until March 1st, 2018\nexpiryDate: '2018-04-01' # considered a draft after April 1st, 2018\n---\n<\/code><\/pre>\n<p>Some plugins may set the page's publish or expiry date themselves based on some external criteria. An example is the\nPosts plugin, where posts include their publish date in the filename, instead of finding it in the post's Front Matter.<\/p>\n<p>In some situations, you may wish to view your drafts during development. To do this, simply set the <code>includeDrafts<\/code>\noption to <code>true<\/code> on the <code>render<\/code> service in your <code>config.yml<\/code><\/p>\n<pre><code class=\"language-yaml\">...\nservices:\n  render:\n    includeDrafts: true\n<\/code><\/pre>\n"
                }]
              },
              "internal-links": {
                "ownKey": "internal-links",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "internal-links",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/internal-links"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "assets",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/assets"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "templates",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/templates"
                  },
                  "description": "Orchid's has a simple yet powerful convention for finding pages and generating links throughout your site.",
                  "title": "Internal Links",
                  "content": "<h2 id=\"locating-pages-with-collections\"><a href=\"#locating-pages-with-collections\" id=\"locating-pages-with-collections\" class=\"anchor\"><\/a>Locating Pages with Collections<\/h2>\n<p>Collections take groups of pages or other indexed content and make it accessible. Whenever you want to create a link\nfrom one page to another, you will typically use one of the <a href=\"#linking-utilities\">linking utilities<\/a> to lookup the\nrelated content. All these functions implement a similar interface, so using one over another is simple and always\nfamiliar.<\/p>\n<p>Searching within collections is designed to have a consistent API that allows your searches to be as simple and\nintuitive to use as possible. There are three fundamental properties that are important when searching a collection:\n<code>itemId<\/code>, <code>collectionType<\/code>, and <code>collectionId<\/code>. In the vast majority of searches, just providing the <code>itemId<\/code> is enough\nto uniquely identify the page of interest, but in the case that this is not specific enough, the <code>collectionType<\/code> and\n<code>collectionId<\/code> can be used to guarantee the search returns the page you expect.<\/p>\n<h3 id=\"item-id\"><a href=\"#item-id\" id=\"item-id\" class=\"anchor\"><\/a>Item Id<\/h3>\n<p>The <code>itemId<\/code> is usually the title of a page, but may be another &quot;identifier&quot; set up by specific plugins. Pages can have\nmore than one <code>itemId<\/code>, such as a class page from the <a href=\"https://orchid.run/plugins/orchid-kotlindoc-feature\">orchid-kotlindoc-feature<\/a> plugin having a title of the\nsimple class name, but having an additional ID for the fully-qualified name.<\/p>\n<p>Since 0.18.0, item IDs are no longer determined ad-hoc but are strongly defined for all pages, which means they can be\nfound in your <a href=\"https://orchid.run/wiki/user-manual/getting-started/admin-panel\">Admin Panel<\/a>!<\/p>\n<h3 id=\"collection-id\"><a href=\"#collection-id\" id=\"collection-id\" class=\"anchor\"><\/a>Collection Id<\/h3>\n<p>The <code>collectionId<\/code> is used to filter pages by those in a specific collection. An example of this is linking to another\npage in the same wiki, or linking to a blog post with a specific tag.<\/p>\n<h3 id=\"collection-type\"><a href=\"#collection-type\" id=\"collection-type\" class=\"anchor\"><\/a>Collection Type<\/h3>\n<p>The <code>collectionType<\/code> is usually defined to be the <code>key<\/code> of the generator which produced the collection. In this way, you\ncan pretty easily restrict the search results to those from a single plugin.<\/p>\n<h2 id=\"linking-utilities\"><a href=\"#linking-utilities\" id=\"linking-utilities\" class=\"anchor\"><\/a>Linking Utilities<\/h2>\n<h3 id=\"anchor-function\"><a href=\"#anchor-function\" id=\"anchor-function\" class=\"anchor\"><\/a>Anchor Function<\/h3>\n<p>Use the <code>anchor<\/code> function to easily create a link to another page in your Orchid site. If a page is found that matches\nthe query, an anchor tag is generated pointing to that page. If no page if found, the link text is returned directly,\nso this function will help prevent dead links.<\/p>\n<p>The first parameter is the link text to be displayed, and the rest are the normal search params. If only one parameter\nis given, it will be used as both the <code>itemId<\/code> <em>and<\/em> the link text, making it almost trivial to make a link.<\/p>\n<p>This function is analogous to the <code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/menus#page-menu-item&quot;&gt;page&lt;/a&gt;<\/code> menu item.<\/p>\n<pre><code class=\"language-twig\">{{ anchor('Link Text/Item Id') -&gt; &lt;a href=&quot;...&quot;&gt;Link Text&lt;/a&gt; or &quot;Link Text&quot; }}\n{{ anchor('Link Text', ['itemId', 'collectionId', 'collectionType']) }}\n{{ anchor(title='Link Text', itemId='itemId', collectionId='collectionId', collectionType='collectionType') }}\n\n<\/code><\/pre>\n<h3 id=\"link-function\"><a href=\"#link-function\" id=\"link-function\" class=\"anchor\"><\/a>Link Function<\/h3>\n<p>Use the <code>link<\/code> function to render just the String URL to a matching page. This is useful if you need to display that URL\ndirectly or you need an anchor to wrap other elements. Otherwise you should use <code>anchor<\/code> to let Orchid render the link\nfor you.<\/p>\n<p>This function is analogous to the <code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/menus#page-menu-item&quot;&gt;page&lt;/a&gt;<\/code> menu item.<\/p>\n<pre><code class=\"language-twig\">{{ link(['itemId', 'collectionId', 'collectionType']) -&gt; https://orchid.run/... }}\n{{ link(itemId='itemId', collectionId='collectionId', collectionType='collectionType') }}\n\n<\/code><\/pre>\n<h3 id=\"find-function\"><a href=\"#find-function\" id=\"find-function\" class=\"anchor\"><\/a>Find Function<\/h3>\n<p>The <code>find<\/code> function will find a matching page and return the page object directly to the template.<\/p>\n<p>This function is analogous to the <code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/menus#page-menu-item&quot;&gt;page&lt;/a&gt;<\/code> menu item.<\/p>\n<pre><code class=\"language-twig\">{{ find(['itemId', 'collectionId', 'collectionType']) -&gt; OrchidPage }}\n{{ find(itemId='itemId', collectionId='collectionId', collectionType='collectionType') }}\n\n<\/code><\/pre>\n<h3 id=\"find-all-function\"><a href=\"#find-all-function\" id=\"find-all-function\" class=\"anchor\"><\/a>Find All Function<\/h3>\n<p>The <code>findAll<\/code> method matches <em>all<\/em> pages in a given query, and returns the list of matching pages directly to the\ntemplate.<\/p>\n<p>This function is analogous to the\n<code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/menus#collection-pages-menu-item&quot;&gt;collectionPages&lt;/a&gt;<\/code> menu item.<\/p>\n<pre><code class=\"language-twig\">{{ findAll(['itemId', 'collectionId', 'collectionType']) -&gt; List&lt;OrchidPage&gt; }}\n{{ findAll(itemId='itemId', collectionId='collectionId', collectionType='collectionType') }}\n\n<\/code><\/pre>\n<h2 id=\"debugging-internal-links\"><a href=\"#debugging-internal-links\" id=\"debugging-internal-links\" class=\"anchor\"><\/a>Debugging Internal Links<\/h2>\n<p>Orchid 0.18.0 introduces a new &quot;diagnosis mode&quot; to help you find broken links and address various other issues in your\nsite. It can be enabled with the <code>--diagnose<\/code> CLI flag, or through the conventions of your build tool shown below:<\/p>\n<pre><code class=\"language-bash\"># Gradle\n./gradlew orchidBuild -PorchidDiagnose=true\n\n# Maven\n./mvnw orchidBuild -Dorchid.diagnose=true\n\n# SBT\n./sbtw -Dorchid.diagnose=true orchidBuild\n<\/code><\/pre>\n<p>When diagnosis mode is enabled, all cases where the <code>anchor()<\/code> function does not return a page will be printed to the\nterminal. The same behavior will be logged for other cases throughout the internals and plugins of Orchid which try to\nlink to a page but cannot. This is helpful for detecting cases where a page was renamed or removed, but links to it are\nstill active. It may indicate a link that needs to be updated, or a section of your documentation that needs to be\nremoved or rewritten.<\/p>\n<p>In addition to detecting broken links, diagnosis mode will also enable other diagnostic info, such as complete\nstacktraces from exceptions thrown while rendering a template.<\/p>\n"
                }]
              },
              "assets": {
                "ownKey": "assets",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "assets",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/assets"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "shared-config",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/shared-config"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "internal-links",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/internal-links"
                  },
                  "description": "Orchid accumulates assets from multiple sources before they are added to the page, including themes, plugins, components, and Front Matter.",
                  "title": "Assets",
                  "content": "<h2 id=\"asset-sources\"><a href=\"#asset-sources\" id=\"asset-sources\" class=\"anchor\"><\/a>Asset Sources<\/h2>\n<p>Orchid accumulates assets from multiple sources before they are added to the page as <code>&lt;script&gt;<\/code> and <code>&lt;style&gt;<\/code> tags. In\nparticular, assets can be contributed to a page from:<\/p>\n<ul>\n<li>the page itself: a plugin may add assets to its own pages to ensure proper styling or functionality of that page's\ncontent<\/li>\n<li>your selected theme: the theme's own styles and scripts are loaded and rendered once, but attached to all pages using\nthat theme<\/li>\n<li>components: all components, whether they are the page's components or as widget areas of the theme, are attached to\nthe page and can add assets to that page.<\/li>\n<\/ul>\n<h2 id=\"media-files\"><a href=\"#media-files\" id=\"media-files\" class=\"anchor\"><\/a>Media files<\/h2>\n<p>For assets that are not attached to a page, such as images or downloadable files, you must tell Orchid which folders you\nwant copied over. By default, any file <code>assets/media/<\/code> will be copied over directly if it is a binary file format (such\nas image files or PDFs), or compiled if it is a known file type (such as SCSS). You can configure additional directories\nin your <code>config.yml<\/code>.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nassets:\n  sourceDirs: \n    - 'assets/media'\n    - 'assets/overrides/css'\n    - 'assets/overrides/js'\n<\/code><\/pre>\n<p>If a file is not being copied over correctly, you may need to tell Orchid that it should be treated as a binary file\nstream instead of a character stream. You can set in your <code>config.yml<\/code> which file extensions should be treated as binary\ncontent. The following file extensions are considered binary by default:  <code>jpg<\/code>, <code>jpeg<\/code>, <code>png<\/code>, <code>pdf<\/code>, <code>gif<\/code>, <code>svg<\/code>,\n<code>otf<\/code>, <code>eot<\/code>, <code>ttf<\/code>, <code>woff<\/code>, <code>woff2<\/code><\/p>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  compilers: \n    binaryExtensions: \n      - 'jpeg'\n<\/code><\/pre>\n<h2 id=\"favicons\"><a href=\"#favicons\" id=\"favicons\" class=\"anchor\"><\/a>Favicons<\/h2>\n<p>Orchid takes care of rendering favicons for you. If you do not provide one yourself, it will use the default Orchid\nlogo. If you have your own favicon you'd like to use, simply drop it in your resources root named <code>favicon.ico<\/code> and\nOrchid will use that one instead.<\/p>\n<h2 id=\"additional-assets\"><a href=\"#additional-assets\" id=\"additional-assets\" class=\"anchor\"><\/a>Additional Assets<\/h2>\n<p>On anything that adds assets to the Page, you can also define additional assets to be added alongside them. This is\nadded as the <code>extraCss<\/code> or <code>extraJs<\/code> properties of the theme config in <code>config.yml<\/code>, a page's Front Matter, or in a\ncomponent's config.<\/p>\n<p>These assets take an arbitrary path to a resource, and will automatically compile it according to its file extension and\nrender it in the final site for you.<\/p>\n<h3 id=\"extra-assets-attached-to-a-theme\"><a href=\"#extra-assets-attached-to-a-theme\" id=\"extra-assets-attached-to-a-theme\" class=\"anchor\"><\/a>Extra Assets attached to a Theme<\/h3>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  extraCss:\n    - 'assets/css/custom.scss'\n  extraJs:\n    - 'assets/js/custom.js'\n<\/code><\/pre>\n<h3 id=\"extra-assets-attached-to-a-page\"><a href=\"#extra-assets-attached-to-a-page\" id=\"extra-assets-attached-to-a-page\" class=\"anchor\"><\/a>Extra Assets attached to a Page<\/h3>\n<pre><code class=\"language-yaml\"># pages/page-one.md\nextraCss:\n- 'assets/css/custom.scss'\nextraJs:\n- 'assets/js/custom.js'\n<\/code><\/pre>\n<h3 id=\"extra-assets-attached-to-a-component-in-an-archetype\"><a href=\"#extra-assets-attached-to-a-component-in-an-archetype\" id=\"extra-assets-attached-to-a-component-in-an-archetype\" class=\"anchor\"><\/a>Extra Assets attached to a Component in an Archetype<\/h3>\n<pre><code class=\"language-yaml\"># config.yml\nallPages:\n  components:\n    - type: 'pageContent'\n      extraCss:\n        - 'assets/css/custom.scss'\n      extraJs:\n        - 'assets/js/custom.js'\n<\/code><\/pre>\n<h3 id=\"configuring-additional-assets\"><a href=\"#configuring-additional-assets\" id=\"configuring-additional-assets\" class=\"anchor\"><\/a>Configuring Additional Assets<\/h3>\n<p>Depending on the use-case for adding additional assets, they may need some additional configuration. This can be done\ndirectly in the extra asset config:<\/p>\n<h4 id=\"extra-js-configuration\"><a href=\"#extra-js-configuration\" id=\"extra-js-configuration\" class=\"anchor\"><\/a>Extra JS Configuration<\/h4>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  extraJs:\n    - asset: 'assets/js/custom.js'\n      inlined: true\n<\/code><\/pre>\n<div class=\"tabs\">\n  <ul data-tabs=\"hcEyPUp3w6\">\n  \n    <li class=\"is-active\"><a>All Options<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"hcEyPUp3w6\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><table class=\"uk-table uk-table-divider\">\n  <thead>\n  <tr>\n    <th>Key<\/th>\n    <th>Type<\/th>\n    <th>Default Value<\/th>\n    <th>Description<\/th>\n  <\/tr>\n  <\/thead>\n  <tbody>\n  \n  <tr>\n    <td><code>asset<\/code><\/td>\n    <td>String<\/td>\n    <td>empty string<\/td>\n    <td><p>The resource to load as an extra script<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>async<\/code><\/td>\n    <td>boolean<\/td>\n    <td>false<\/td>\n    <td><p>If the resource is external, download it and serve it from the built site so the site doesn't depend on other servers being available.<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>attrs<\/code><\/td>\n    <td>Map&lt;String, String&gt;<\/td>\n    <td>{}<\/td>\n    <td><p>Arbitrary attributes to apply to this element when rendered to page<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>defer<\/code><\/td>\n    <td>boolean<\/td>\n    <td>false<\/td>\n    <td><p>If the resource is external, download it and serve it from the built site so the site doesn't depend on other servers being available.<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>download<\/code><\/td>\n    <td>boolean<\/td>\n    <td>true<\/td>\n    <td><p>If the resource is external, download it and serve it from the built site so the site doesn't depend on other servers being available.<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>inlined<\/code><\/td>\n    <td>boolean<\/td>\n    <td>false<\/td>\n    <td><p>Inlines the contents of this script directly into the page instead of being referenced from a URL.<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>module<\/code><\/td>\n    <td>boolean<\/td>\n    <td>false<\/td>\n    <td><p>If the resource is external, download it and serve it from the built site so the site doesn't depend on other servers being available.<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>nomodule<\/code><\/td>\n    <td>boolean<\/td>\n    <td>false<\/td>\n    <td><p>If the resource is external, download it and serve it from the built site so the site doesn't depend on other servers being available.<\/p>\n<\/td>\n  <\/tr>\n  \n  <\/tbody>\n<\/table><\/div>\n\n<\/div>\n<h4 id=\"extra-css-configuration\"><a href=\"#extra-css-configuration\" id=\"extra-css-configuration\" class=\"anchor\"><\/a>Extra CSS Configuration<\/h4>\n<pre><code class=\"language-yaml\"># config.yml\ntheme:\n  extraCss:\n    - asset: 'assets/css/custom.scss'\n      download: false\n<\/code><\/pre>\n<div class=\"tabs\">\n  <ul data-tabs=\"hRVnyeKYwl\">\n  \n    <li class=\"is-active\"><a>All Options<\/a><\/li>\n  \n  <\/ul>\n<\/div>\n<div data-panes=\"hRVnyeKYwl\">\n\n  <div class=\"is-block tab-hidden content is-medium-tablet is-large-fullhd\"><table class=\"uk-table uk-table-divider\">\n  <thead>\n  <tr>\n    <th>Key<\/th>\n    <th>Type<\/th>\n    <th>Default Value<\/th>\n    <th>Description<\/th>\n  <\/tr>\n  <\/thead>\n  <tbody>\n  \n  <tr>\n    <td><code>asset<\/code><\/td>\n    <td>String<\/td>\n    <td>empty string<\/td>\n    <td><p>The resource to load as an extra stylesheet<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>attrs<\/code><\/td>\n    <td>Map&lt;String, String&gt;<\/td>\n    <td>{}<\/td>\n    <td><p>Arbitrary attributes to apply to this element when rendered to page<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>download<\/code><\/td>\n    <td>boolean<\/td>\n    <td>true<\/td>\n    <td><p>If the resource is external, download it and serve it from the built site so the site doesn't depend on other servers being available.<\/p>\n<\/td>\n  <\/tr>\n  \n  <tr>\n    <td><code>inlined<\/code><\/td>\n    <td>boolean<\/td>\n    <td>false<\/td>\n    <td><p>Inlines the contents of this stylesheet directly into the page instead of being referenced from a URL.<\/p>\n<\/td>\n  <\/tr>\n  \n  <\/tbody>\n<\/table><\/div>\n\n<\/div>\n<h2 id=\"asset-transformations\"><a href=\"#asset-transformations\" id=\"asset-transformations\" class=\"anchor\"><\/a>Asset Transformations<\/h2>\n<p>Orchid includes basic support for media management, including simple image manipulation. You can use the <code>asset()<\/code>\ntemplate function to load an asset, and Orchid will make sure it ends up in your final site.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{{ 'assets/media/pic01.jpg'|asset }}\n\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/assets/media/pic01.jpg\" alt=\"asset\" /><\/p>\n<h3 id=\"rotate\"><a href=\"#rotate\" id=\"rotate\" class=\"anchor\"><\/a>Rotate<\/h3>\n<p>Rotate an image asset. Rotation angle is expressed in degrees.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{{ 'assets/media/pic01.jpg'|asset|rotate(90) }}\n\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/assets/media/pic01_rotate-90.0.jpg\" alt=\"rotated asset\" /><\/p>\n<h3 id=\"scale\"><a href=\"#scale\" id=\"scale\" class=\"anchor\"><\/a>Scale<\/h3>\n<p>Scale an image asset by a constant factor.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{{ 'assets/media/pic01.jpg'|asset|scale(0.85) }}\n\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/assets/media/pic01_scale-0.85.jpg\" alt=\"scaled asset\" /><\/p>\n<h3 id=\"resize\"><a href=\"#resize\" id=\"resize\" class=\"anchor\"><\/a>Resize<\/h3>\n<p>Resize an image asset to specific dimensions. By default, image is resized maintaining its aspect ratio, and is reduced\nto the largest image that can fit entirely within the specified dimensions. Use the <code>mode<\/code> parameter to resize the\nimage to exactly the specified dimensions, or crop it to a specified edge.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{{ 'assets/media/pic01.jpg'|asset|resize(800, 600, &quot;exact&quot;) }}\n\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/assets/media/pic01_400x300_fit.jpg\" alt=\"resized asset\" />\n<img src=\"https://orchid.run/assets/media/pic01_400x300_exact.jpg\" alt=\"exact resized asset\" />\n<img src=\"https://orchid.run/assets/media/pic01_400x300_cl.jpg\" alt=\"resized cropped center-left asset\" />\n<img src=\"https://orchid.run/assets/media/pic01_400x300_c.jpg\" alt=\"resized cropped center asset\" />\n<img src=\"https://orchid.run/assets/media/pic01_400x300_cr.jpg\" alt=\"resized cropped center-right asset\" /><\/p>\n<h3 id=\"rename\"><a href=\"#rename\" id=\"rename\" class=\"anchor\"><\/a>Rename<\/h3>\n<p>As assets are transformed, they automatically get renamed to ensure unique asset files are generated. However, you may\nwish to rename them youself, which can be done with the <code>rename()<\/code> filter, which accepts the standard permalink\nformatting string as an argument. If you provide a file extension in the permalink which does not match the original\nresource, it will be reformatted into the target file format if it is a valid image format.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{{ 'assets/media/pic01.jpg'|asset|rename(&quot;assets/media/hero.png&quot;) }}\n\n<\/code><\/pre>\n<h3 id=\"chaining\"><a href=\"#chaining\" id=\"chaining\" class=\"anchor\"><\/a>Chaining<\/h3>\n<p>Multiple transformations may be applied to a single asset. Simply use more than one of the above filters. You can use\nthe same filter more than once, and they will be applied in turn from left-to-right. Assets are not rendered until the\nend of the entire pipeline; intermediate assets are not created for each filter.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{{ 'assets/media/pic01.jpg'|asset|resize(800, 600, &quot;exact&quot;)|rotate(45)|rotate(45) }}\n\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/assets/media/pic01_400x300_fit.jpg\" alt=\"resized asset\" />\n<img src=\"https://orchid.run/assets/media/pic01_rotate-45.0.jpg\" alt=\"resized asset\" />\n<img src=\"https://orchid.run/assets/media/pic01_rotate-45.0.jpg\" alt=\"resized asset\" /><\/p>\n"
                }]
              },
              "templates": {
                "ownKey": "templates",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "templates",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/templates"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "internal-links",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/internal-links"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "breadcrumbs",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/breadcrumbs"
                  },
                  "description": "Orchid uses Pebble templates and a unique layout composition system for fast and flexible layout design.",
                  "title": "Templates",
                  "content": "<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Templates in Orchid all live within your resources' <code>templates/<\/code> directory, regardless of whether it comes from local\nresources, plugins, or themes. Anytime a layout is requested or another template is included/extended from Pebble, the\npath is referenced relative to <code>templates/<\/code>, even if it is not specified. It is not necessary to specify the extension\nof template files, either, as Orchid will infer the exact extension of a template based on what language the theme\nprefers.<\/p>\n<h2 id=\"layouts\"><a href=\"#layouts\" id=\"layouts\" class=\"anchor\"><\/a>Layouts<\/h2>\n<p>When a page is rendered, Orchid will embed it within a layout. The most basic layout looks like:<\/p>\n<pre><code class=\"language-twig\">&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n{% head %}\n&lt;/head&gt;\n&lt;body&gt;\n{% body %}\n    {% page %}\n{% endbody %}\n&lt;/body&gt;\n&lt;/html&gt;\n\n<\/code><\/pre>\n<p>Layouts typically come from the theme as a file in the <code>templates/layouts/<\/code> directory, or you may create your own layout\n(which usually extends a layout from your theme). They utilize Pebble markup to create the structure for your webpage.\nYou are free to use any of Pebble's core features for building flexible and reusable layouts, and Orchid adds a few tags\nof its own:<\/p>\n<ul>\n<li><code>{% head %}<\/code>: adds the standard meta and SEO tags to the HEAD of your webpage<\/li>\n<li><code>{% body %}...{% endbody %}<\/code>: adds stylesheets from the theme, page, and all components to this page<\/li>\n<li><code>{% page %}<\/code>: renders the main page content and page components<\/li>\n<\/ul>\n<p>In addition to the above tags, Orchid offers many additional features for building layouts, such as menus, breadcrumbs,\nand additional component areas.<\/p>\n<p>Layouts are chosen entirely by page configuration and are not dynamically chosen based on page type. You can change a\npage's layout with the <code>layout<\/code> property in a page's Front Matter. The default layout is <code>index<\/code>, which selects the\n<code>templates/layouts/index.peb<\/code> template.<\/p>\n<h2 id=\"page-templates\"><a href=\"#page-templates\" id=\"page-templates\" class=\"anchor\"><\/a>Page Templates<\/h2>\n<p>The <code>{% page %}<\/code> renders the page's main components, and one of these is typically the\nspecial <code>pageContent<\/code> component. This component picks a <em>page template<\/em> and renders the page's own content into that\ntemplate.<\/p>\n<p>The most basic page layout (and the default fallback for all pages) looks like:<\/p>\n<pre><code class=\"language-twig\">{{ page.content | raw }}\n\n<\/code><\/pre>\n<p>Page templates are usually defined by plugins as a file in the <code>templates/pages/<\/code> directory. Alternatively, you may\ncreate your own page template. They are dynamically chosen based on the type of page being rendered.<\/p>\n<p>The page type is determined by the plugin that created the page, and it may be set up such that a series of page\ntemplates may be tried based on page data, in a manner similar to the\n<a href=\"https://wphierarchy.com/\">Wordpress template hierarchy<\/a>. Of course, Orchid does\nnot follow the same hierarchy, but it was the main inspiration for how Orchid chooses page templates and it may give\nyou a better intuition on how to set up your templates.<\/p>\n<h3 id=\"example-layouts-vs-page-templates\"><a href=\"#example-layouts-vs-page-templates\" id=\"example-layouts-vs-page-templates\" class=\"anchor\"><\/a>Example: Layouts vs Page Templates<\/h3>\n<p>To demonstrate the differences between layouts and page templates, lets build a simple example. In this example, you\nare building a site with a main landing page which should span full-width and contain custom markup throughout the\nentire content body. You also have static pages that are also full width with custom content, but the content includes\nsome extra information for each page like the author and some additional links set in each page's front matter. You also\nhave a blog, where the pages each contain a sidebar with a listing of the tags on each post, and a wiki, where the\nsidebar contains the full menu for the wiki.<\/p>\n<p>A normal approach to setting these up would produce the following templates, each listed with the template they extend:<\/p>\n<ul>\n<li><code>homepage.peb<\/code> extends <code>single.peb<\/code><\/li>\n<li><code>staticPage.peb<\/code> extends <code>single.peb<\/code><\/li>\n<li><code>post.peb<\/code> extends <code>sidebar.peb<\/code><\/li>\n<li><code>wiki.peb<\/code> extends <code>sidebar.peb<\/code><\/li>\n<\/ul>\n<p>The problem with templates set up in this manner is that it forces each &quot;page type&quot; to know about the layout is is\ncontained in, when in reality the only thing that the template actually cares to customize is what's in the main content\nbody on the page. It also limits each page to <em>only<\/em> being able to use that one type of layout, unless you were to\ncopy the templates and make a new version for each page/layout combination:<\/p>\n<ul>\n<li><code>homepage-single.peb<\/code> extends <code>single.peb<\/code><\/li>\n<li><code>homepage-sidebar.peb<\/code> extends <code>sidebar.peb<\/code><\/li>\n<li><code>staticPage-single.peb<\/code> extends <code>single.peb<\/code><\/li>\n<li><code>staticPage-sidebar.peb<\/code> extends <code>sidebar.peb<\/code><\/li>\n<li><code>post-single.peb<\/code> extends <code>single.peb<\/code><\/li>\n<li><code>post-sidebar.peb<\/code> extends <code>sidebar.peb<\/code><\/li>\n<li><code>wiki-single.peb<\/code> extends <code>single.peb<\/code><\/li>\n<li><code>wiki-sidebar.peb<\/code> extends <code>sidebar.peb<\/code><\/li>\n<\/ul>\n<p>Page Templates set up in this manner is very much how themes in Wordpress are set up, and it ends up giving you a large\nnumber of theme files that become difficult to manage and refactor. And while you may be able to move the logic of the\npage &quot;layout&quot; into some conditional logic that sets up the actual layout to reduce the number of files needed, it still\nrequires the content body of the page to know information about the rest of the page that it really doesn't care about.\nContrast this the Orchid model of page templates and layouts:<\/p>\n<ul>\n<li>Layouts\n<ul>\n<li><code>single.peb<\/code><\/li>\n<li><code>sidebar.peb<\/code><\/li>\n<\/ul>\n<\/li>\n<li>Page Templates\n<ul>\n<li><code>homepage.peb<\/code> doesn't extend anything<\/li>\n<li><code>staticPage.peb<\/code> doesn't extend anything<\/li>\n<li><code>post.peb<\/code> doesn't extend anything<\/li>\n<li><code>wiki.peb<\/code> doesn't extend anything<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>This now allows us to embed <em>any<\/em> page template into <em>any<\/em> other layout, and neither one needs to know anything about\nthe markup, blocks, or filenames names of any of the others. You can even add a third layout, and start using that one\nwithout needing to change anything about the page templates, and no matter how many layouts or page types you have, you\nwill always be able to mix-and-match them as you please with no issues.<\/p>\n<p>All this allows Layouts to truly just be that: a template which &quot;lays out&quot; the various site pieces into their location\nwithin the page. The Page Template is then only concerned with its page-specific content and structure, and doesn't care\nabout the layout or even the theme, in which is is embedded.<\/p>\n<h2 id=\"component-templates\"><a href=\"#component-templates\" id=\"component-templates\" class=\"anchor\"><\/a>Component Templates<\/h2>\n<p>Component Templates work exactly the same as Page Templates, but for each Component on the Page. The Component type can\nspecify its own list of possible template patterns, which are expanded into a full list within the <code>components/<\/code>\n<code>{templateBase}<\/code> directory. The only difference here is that there is not &quot;default&quot; component template like there is\nwith a Page Template, and it is expected that plugins provide a template for the most generic markup needed for the\nspecific component to look good.<\/p>\n<h2 id=\"tag-templates\"><a href=\"#tag-templates\" id=\"tag-templates\" class=\"anchor\"><\/a>Tag Templates<\/h2>\n<p>Contrary to the flexibility of Components and Page templates, Tags are quite strict in the templates they allow for\nthemselves. This is intentional, as Pages and Components are by nature customized by the content of the page within\nwhich they reside, and what they output may look different based on the page using them. By contrast, Tags are intended\nto only be concerned with its inputs and outputs, and not have a template that is contingent on anything other than what\nit itself says. To that end, all custom Tag templates are found as the tag name within the <code>tags/<\/code> directory, and that's\nit.<\/p>\n<h3 id=\"simple-tags\"><a href=\"#simple-tags\" id=\"simple-tags\" class=\"anchor\"><\/a>Simple Tags<\/h3>\n<p>Some tags are simple and do not include a content block. Tags like <code>{% head %}<\/code> or <code>{% page %}<\/code> are exactly that and no\nmore. They may have some configuration values, but all content for these tags is up to the template used for these tags.<\/p>\n<h3 id=\"content-tags\"><a href=\"#content-tags\" id=\"content-tags\" class=\"anchor\"><\/a>Content Tags<\/h3>\n<p>Some tags are take a content block and embed it somewhere within the tag's template. Tags like <code>{% alert %}<\/code> must end\nwith a closing tag like <code>{% endalert %}<\/code>, and everything between the start ane end tags will be embeded as the tag's\ncontent.<\/p>\n<p>The tag content is always formatted according to Pebble by default, which may be confusing if the tag is precompiled\nin a Markdown page, where you'd expect the content to be formatted as Markdown. However, you can supply template filters\nto Content Tags which are applied to the content before being embedded. For example, to compile a tag's content as\nMarkdown:<\/p>\n<pre><code class=\"language-twig\">{% alert :: compileAs('md') %}\n## This will be a Markdown header\n\n** this is bold**\n{% endalert %}\n<\/code><\/pre>\n<h3 id=\"tabbed-tags-static\"><a href=\"#tabbed-tags-static\" id=\"tabbed-tags-static\" class=\"anchor\"><\/a>Tabbed Tags (Static)<\/h3>\n<p>Some tags, like <code>{% tabs %}<\/code> or <code>{% accordion %}<\/code> can contain <em>multiple<\/em> content sections.<\/p>\n<p>For tabbed tags where all tabs are statically-defined, you set them up as children of the main tag where each child tag\nis a custom-defined key, uniquely identifying each &quot;tab&quot;.<\/p>\n<pre><code class=\"language-twig\">{% tabs %}\n    {% one %}Tab Content One{% endone %}\n    {% two %}Tab Content Two{% endtwo %}\n{% endtabs %}\n<\/code><\/pre>\n<p>Just like normal Content Tags, the content is processed as Pebble, but you can supply filters to the tag to compile it\nin another way. You can provide filters on each individual &quot;tab&quot;, or on the parent tag to be applied to all child tabs:<\/p>\n<pre><code class=\"language-twig\">{% tabs :: compileAs('md') %}\n    {% one %}Tab Content One{% endone %}\n    {% two %}Tab Content Two{% endtwo %}\n{% endtabs %}\n<\/code><\/pre>\n<pre><code class=\"language-twig\">{% tabs %}\n    {% one :: compileAs('md') %}Tab Content One{% endone %}\n    {% two :: compileAs('md') %}Tab Content Two{% endtwo %}\n{% endtabs %}\n<\/code><\/pre>\n<h3 id=\"tabbed-tags-dynamic\"><a href=\"#tabbed-tags-dynamic\" id=\"tabbed-tags-dynamic\" class=\"anchor\"><\/a>Tabbed Tags (Dynamic)<\/h3>\n<p>In many cases, tabs are not defined statically, but rather are dynamically created from data. In these cases, you must\ndeclare the tag as <code>dynamic<\/code>, so that the content can be evaluted with loops, <code>ifs<\/code>, etc. As the contents are\n<em>evaluated<\/em>, tabs are &quot;pushed&quot; into the parent, which then renders them just the same as if they were defined\nstatically.<\/p>\n<pre><code class=\"language-twig\">{% tabs dynamic :: compileAs('md') %}\n    {% for i in range(1, 3) %}\n        {% tab ''~i %}Tab Content {{i}}{% endtab %}\n    {% endfor %}\n{% endtabs %}\n<\/code><\/pre>\n<h2 id=\"template-overrides\"><a href=\"#template-overrides\" id=\"template-overrides\" class=\"anchor\"><\/a>Template Overrides<\/h2>\n<p>Orchid has a well-defined order in which resources of any type are identified. This ordering sets Orchid up such that\nplugins provide basic templates which can always be customized later by the chosen Theme to match the markup of the\nentire site. But any resource defined by a theme or a plugin can always be overridden by your local site, so you never\nhave to edit core theme files to tweak the output of your site.<\/p>\n<h2 id=\"resource-lookup-order\"><a href=\"#resource-lookup-order\" id=\"resource-lookup-order\" class=\"anchor\"><\/a>Resource Lookup Order<\/h2>\n<p>The exact order in which all resources are located is shown in the diagram below. A resource can be anything, including\nyour templates and your content files, and each plugin or theme provides the resources bundled in its JarFile.<\/p>\n<p><img src=\"https://orchid.run/assets/media/resource-lookup-order.png\" alt=\"Resource Lookup Order\" title=\"Resource Lookup Order\" /><\/p>\n<h3 id=\"local-resource-sources\"><a href=\"#local-resource-sources\" id=\"local-resource-sources\" class=\"anchor\"><\/a>Local Resource Sources<\/h3>\n<p>Orchid ships with a single Local Resource Source, which locates resources as files within your <code>resourceDir<\/code>. This is\ntypically <code>src/orchid/resources<\/code> within the normal Gradle project structure, but can be changed by setting the <code>srcDir<\/code>\nin the <code>orchid<\/code> configuration block of your <code>build.gradle<\/code>.<\/p>\n<p>Local resource sources are special in the fact that plugins typically index content based on local resources only.<\/p>\n<p>While not currently implemented, Orchid supports having multiple Local resource sources in the case that you want to\nhost local resources in multiple base directories or connect to a <a href=\"https://headlesscms.org/\">Headless CMS<\/a> which manages\nyour content remotely or add content from your own private APIs or CMS. See the Developer's Guide for more on\nimplementing new resource sources.<\/p>\n<h3 id=\"theme-resource-sources\"><a href=\"#theme-resource-sources\" id=\"theme-resource-sources\" class=\"anchor\"><\/a>Theme Resource Sources<\/h3>\n<p>Themes are defined as being a Resource Source in themselves; that is, the Theme class directly provides Resources to\nOrchid from its JarFile. The resources that come from a theme are typically the final templates and assets that will be\nused in the rendered site, providing customization of those templates and assets from plugins which are usually fairly\ngeneric.<\/p>\n<p>When resolving a resource that doesn't exist in a local source, only the current theme is considered. The &quot;current&quot;\ntheme is usually the default theme set in <code>build.gradle<\/code> (in all cases except when rendering), or the theme that is set\nas a custom theme for a generator in <code>config.yml<\/code>.<\/p>\n<p>All assets (CSS and JS only) provided by a theme are rendered in the output site with a &quot;namespace&quot; that allows multiple\ninstances of the same theme to each provide different versions of the same assets (e.g. stylesheets with different\ncolors) without overwriting each other. This namespace is transparent to the theme picking which assets to add and which\nones are loaded on any given page, but the path of assets in the output site won't be the exact same as their input\npath.<\/p>\n<h3 id=\"plugin-resource-sources\"><a href=\"#plugin-resource-sources\" id=\"plugin-resource-sources\" class=\"anchor\"><\/a>Plugin Resource Sources<\/h3>\n<p>Plugins that contribute new things like Template Tags or Components must provide their own default templates so that\nthey can always be dropped into any new theme and still work great. Components may also inject CSS or Javascript into a\npage as well, which also comes from the plugin's resources. Keep in mind that <em>any<\/em> resource provided by a plugin can\n<strong><em>always<\/em><\/strong> be overridden by the theme or by your local resources, but without any customization plugins will still\nhave everything they need to function perfectly. This makes it very easy to add new plugins to your site, as they\nusually require no setup at all to work.<\/p>\n<h2 id=\"debugging-templates\"><a href=\"#debugging-templates\" id=\"debugging-templates\" class=\"anchor\"><\/a>Debugging Templates<\/h2>\n<p>Having trouble figuring out which layout or page template is used to render a page? When running Orchid in &quot;serve&quot; mode,\na comment section is added to the HEAD of each page with some useful information, such as the current template, the page\ntype, the list of possible page templates, and the resolved layout/page template.<\/p>\n"
                }]
              },
              "publication": {
                "ownKey": "publication",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "publication",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/publication"
                  },
                  "next": {
                    "path": "wiki/user-manual",
                    "baseUrl": "https://orchid.run",
                    "fileName": "extending",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "shared-config",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/shared-config"
                  },
                  "description": "Orchid's built-in deployment pipelines make it easier than ever to build and publish your site.",
                  "title": "Publication",
                  "content": "<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Orchid comes with a simple, yet flexible and powerful mechanism for deploying your site once it has been built. Rather\nthan struggling to set up shell scripts to deploy your site, let Orchid do the hard for you. Your site is simple and\nbeautiful, letting others see it should be just the same.<\/p>\n<p>The typical approach to deployment with static sites is to have a CI server, like Travis CI or Netlify, build your site\nand then do something with the result of the build. This works well enough if you only run Orchid from one place, but it\ngets tricky if you end up changing CI providers or need to do a quick deploy from your local machine when the CI server\nis down.<\/p>\n<p>Every CI tool has their own custom method of deploying your site to AWS, Github Pages, etc. so you start to get locked\ninto that one provider. By moving the deployment process inside the lifecycle of an Orchid build process, you can\nsimplify the process and also prevent yourself from getting locked into any one CI tool.<\/p>\n<p>In addition, Orchid knows much more about your site than the CI server does, and it can use that knowledge to reduce\nthe amound of configuration needed.<\/p>\n<h2 id=\"publication-pipeline\"><a href=\"#publication-pipeline\" id=\"publication-pipeline\" class=\"anchor\"><\/a>Publication Pipeline<\/h2>\n<p>For production builds with Orchid that include a deployment step, run the <code>orchidDeploy<\/code> gradle task instead of\n<code>orchidBuild<\/code>. This will run the normal build as you'd expect, but follow that build with a deploy step after the build\ncompletes successfully. You can also run a deploy manually by issuing the deploy\ncommand from an interactive session or through the admin panel.<\/p>\n<h3 id=\"setup\"><a href=\"#setup\" id=\"setup\" class=\"anchor\"><\/a>Setup<\/h3>\n<p>Setting up a deployment pipeline is configured in your <code>config.yml<\/code> under the <code>services.publications.stages<\/code> key. It\nfollows the same modular configuration you've come to expect and love that is used for components, menus, and forms.<\/p>\n<pre><code class=\"language-yaml\">services:\n  publications:\n    stages:\n      - type: script\n        command: './deployCustom.sh'\n        cwd: '#{$0|resourcesDir}/scripts'\n      - type: ghPages\n        username: 'JavaEden'\n        project: 'Orchid'\n        branch: 'gh-pages'\n        versioned: true\n<\/code><\/pre>\n<p>Running the deployment pipeline is a 2-step process: validation, and execution.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>There are currently no publication stage implementations. The above is just an example of the pipeline configuration,\nand a couple examples of the expected, complete configurations for publishers. However, the pipelines API is complete,\nand you can safely build and share your own publisher implementations.<\/p>\n  <\/div>\n<\/article>\n<h3 id=\"validation\"><a href=\"#validation\" id=\"validation\" class=\"anchor\"><\/a>Validation<\/h3>\n<p>Every step in the pipeline is first validated, to make sure that it is set up correctly. While this is not foolproof,\nas it is left up to the developer to validate the build phase properly and fully, it can greatly help in reducing the\nchance of a botched deployment.<\/p>\n<p>During the validation phase, every publisher gets a chance to be validated. If any stage fails validation, the entire\npipeline will be aborted, and no stages will be executed. This allows you to perform sanity checks on the configuration\nto make sure all required fields are accounted for, and even to do other checks such as verify network connectivity.<\/p>\n<h3 id=\"execution\"><a href=\"#execution\" id=\"execution\" class=\"anchor\"><\/a>Execution<\/h3>\n<p>After all deployment stages have been validated, they will then be executed in the same order. If any pipeline stage\nfails, the entire deployment is aborted. Stages can be given custom ordering, and you can make expectations that a\nprevious stage will be executed have have its outputs ready for later stages. This allows the pipeline to be used as a\nfull post-processing pipeline rather than just a deployment mechanism. One example is to optimize all assets, or to\ncompress and uglify the resulting assets, which would be difficult to apply across all pages with the existing indexing\nand generating APIs.<\/p>\n<h3 id=\"dry-publishing\"><a href=\"#dry-publishing\" id=\"dry-publishing\" class=\"anchor\"><\/a>Dry Publishing<\/h3>\n<p>You can have Orchid run a dry deploy, and it will validate all publication stages for you without executing them. This\nallows you to quickly and safely ensure that you have your pipeline configured correctly at all stages before attempting\na full deploy.<\/p>\n<p>When <code>deploy<\/code> is run as an Orchid task (that is, with the <code>orchidDeploy<\/code> gradle task, or\n<code>orchidRun -PorchidRunTask=deploy<\/code>) the pipeline is not dry and is run as a full deploy.<\/p>\n<p>When <code>deploy<\/code> is run as a command, either from an xinteractive command-line session or submitted through the admin panel,\nit is dry by default. You can issue a command for a full deploy with <code>deploy -- -dry false<\/code> or (<code>deploy false<\/code> for\nshort).<\/p>\n<p>In addition, you can make any single deployment stage run dry, even when the rest aren't, with an option on the stage's\nconfig. Note that this does <em>not<\/em> override the flag on the entire process, so setting <code>dry<\/code> to false on a dry run will\nnot force that stage to execute anyway.<\/p>\n<pre><code class=\"language-yaml\">services:\n  publications:\n    stages:\n      - type: ghPages\n        username: 'JavaEden'\n        project: 'Orchid'\n        branch: 'gh-pages'\n        versioned: true\n        dry: true\n<\/code><\/pre>\n<h2 id=\"available-publishers\"><a href=\"#available-publishers\" id=\"available-publishers\" class=\"anchor\"><\/a>Available Publishers<\/h2>\n<p>There are several publishers available in <code>orchid-core<\/code>, but more may be available in plugins, or you may create your own.<\/p>\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-core\">Script<\/a> - Execute arbitrary shell scripts<\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-netlify-feature\">Netlify<\/a> - Upload your site to Netlify<\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-github-feature\">GitHub<\/a> - Push your site to GitHub Pages or create releases<\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-gitlab-feature\">Gitlab<\/a> - Push your site to Gitlab Pages<\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-bitbucket-feature\">Bitbucket<\/a> - Push your site to Gitlab Pages<\/li>\n<\/ul>\n"
                }]
              },
              "front-matter": {
                "ownKey": "front-matter",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "front-matter",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/front-matter"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "components",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/components"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "compilers",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/compilers"
                  },
                  "description": "Front Matter allows you to customize your Pages individually, adding components or menus to just that page.",
                  "title": "Front Matter",
                  "content": "<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Front Matter allows you to customize your Pages individually, adding components or menus to just that page, changing the\nlayout, or using configurations specific to the plugin it came from. The Front Matter is optional, but if used, it must\nbe the first thing in the file. Front Matter can use any of Orchid's parser languages, but YAML is the most common, and\ncomes between pairs of triple dashed lines, which is removed from the actual page output. Here's an example, which is\nthe actual Front Matter of this current page:<\/p>\n<pre><code class=\"language-yaml\">\n---\ntitle: Custom Page Title\ndescription: Page Descriptiption\n---\n<\/code><\/pre>\n<h2 id=\"front-matter-formats\"><a href=\"#front-matter-formats\" id=\"front-matter-formats\" class=\"anchor\"><\/a>Front Matter Formats<\/h2>\n<p>Front Matter can use different languages in two ways: by specifying the language's extension after the first set of\ndashes, or by using &quot;fences&quot; for that languages. As an example, TOML uses <code>+++<\/code> instead of <code>---<\/code>, and JSON uses <code>;;;<\/code>.\nThe following blocks of TOML Front Matter are equivalent to the YAML Front Matter block above:<\/p>\n<pre><code class=\"language-yaml\">---toml\ntitle = &quot;Page Configuration&quot;\ncustomItems = [\n  &quot;Item One&quot;,\n  &quot;Item Two&quot;,\n  &quot;Item Three&quot;\n]\n---\n<\/code><\/pre>\n<pre><code class=\"language-yaml\">+++\ntitle = &quot;Page Configuration&quot;\ncustomItems = [\n  &quot;Item One&quot;,\n  &quot;Item Two&quot;,\n  &quot;Item Three&quot;\n]\n+++\n<\/code><\/pre>\n<h2 id=\"custom-delimiters\"><a href=\"#custom-delimiters\" id=\"custom-delimiters\" class=\"anchor\"><\/a>Custom Delimiters<\/h2>\n<p>Orchid allows you to define custom delimiters for extracting Front Matter, such as for compatibility purposes, or for\nusing Front Matter as a comment when the normal syntax causes errors in your IDE.<\/p>\n<h3 id=\"example-css-comments\"><a href=\"#example-css-comments\" id=\"example-css-comments\" class=\"anchor\"><\/a>Example: CSS Comments<\/h3>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  compilers:\n    customDelimeters:\n      - regex: '^/\\\\*\\n(.*)\\n\\\\*/\\n'\n        group: '1'\n        parser: 'yml'\n        fileExtensions:\n          - 'css'\n<\/code><\/pre>\n<pre><code class=\"language-css\">/*\ntitle: &quot;Page Configuration&quot;\ncustomItems: \n  - Item One\n  - Item Two\n  - Item Three\n*/\n\n.button {\n  ...\n}\n<\/code><\/pre>\n<h3 id=\"example-jbake-compatibility\"><a href=\"#example-jbake-compatibility\" id=\"example-jbake-compatibility\" class=\"anchor\"><\/a>Example: JBake Compatibility<\/h3>\n<pre><code class=\"language-yaml\"># config.yml\nservices:\n  compilers:\n    customDelimeters:\n      - regex: '^(.*?)\\n~~~~~~\\n'\n        group: '1'\n        parser: 'properties'\n        fileExtensions:\n          - 'md'\n<\/code><\/pre>\n<pre><code class=\"language-markdown\">title=Weekly Links #2\ndate=2013-02-01\ntype=post\ntags=weekly links, java\nstatus=published\n~~~~~~\n\n# Markdown content\n\n...\n\n<\/code><\/pre>\n"
                }]
              },
              "shared-config": {
                "ownKey": "shared-config",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "shared-config",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/shared-config"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "publication",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/publication"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "assets",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/assets"
                  },
                  "description": "Shared Configurations give you the freedom to define your own Archetypes and apply them selectively.",
                  "title": "Shared Configuration",
                  "content": "<h2 id=\"archetypes\"><a href=\"#archetypes\" id=\"archetypes\" class=\"anchor\"><\/a>Archetypes<\/h2>\n<p>Most pages have configurations that are intended to be the same across all pages of that type. Front Matter allows you\nto customize the data for that single page, and some other Static Site Generators offer capabilities for generating new\npages with that common format already set up, but ultimately they offer no guarantee that <em>all<\/em> pages of a certain type\n<em>always<\/em> share the same options. This is where Orchid's Archetypes come in handy, and really begin to show the power and\nflexibility that Orchid offers with its options management.<\/p>\n<p>Archetypes inject data from a common source into each Page matching that Archetype, with that common source typically\nbeing your <code>config.yml<\/code>. These additional options are then merged with the page's Front Matter options (with options in\nthe Front Matter taking precedence over the Archetypal options). Certain data types may even have multiple Archetypes,\ngiving you hierarchical control over your page configuration.<\/p>\n<article class=\"message is-info\">\n\n  <div class=\"message-body\">\n  <p>NOTE: Archetypes are completely configurable in code, and aren't just limited to Pages. Some plugins may include data\ntypes which include their own Archetypes, and may even set up methods for pulling Archetypal data from sources other\nthan your <code>config.yml<\/code>. See your plugin's documentation to find out more, and consult the Developers Guide to learn\nabout configuring your own Archetypes.<\/p>\n  <\/div>\n<\/article>\n<p>As an example, I have the following snippet in this site's <code>config.yml<\/code>:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nallPages:\n  layout: single\n\nwiki:\n  wikiPages:\n    layout: geopattern2\n<\/code><\/pre>\n<p>The resulting layout for this page is ``.<\/p>\n<p>This page was created by the Wiki plugin, which decided that there exists a <code>wikiPages<\/code> archetype for all Wiki pages. So\nI can set the layout for <em>every<\/em> page in the Wiki from a single location in <code>config.yml<\/code>, instead of having to copy the\n<code>layout<\/code> option into every Wiki source page. But the page also belongs to the <code>allPages<\/code> Archetype, and will inherit\nthose properties as well. Archetypes are hierarchical, and in this case the <code>wikiPages<\/code> Archetype will take precedence\nover <code>allPages<\/code> in the case that both define the same property.<\/p>\n<p>And best of all, since all pages read from one location, it makes it trivial to change the layout across the theme,\nsince I only have to change it once to see it reflected everywhere. The same is true for configuring page menus,\ncomponents, draft status, or any other option.<\/p>\n<p>It is worth noting that there is fundamentally no difference with whether the data came from Front Matter or from the\nArchetype. When options are loaded into the Page, it is completely transparent from which source it came, so you can\nsimply work with the data without worrying that you've missed the Archetypes.<\/p>\n<h2 id=\"custom-common-configuration\"><a href=\"#custom-common-configuration\" id=\"custom-common-configuration\" class=\"anchor\"><\/a>Custom Common Configuration<\/h2>\n<h3 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h3>\n<p>Archetypes are really powerful and provide a clean, opinionated way to structure the common\nconfiguration for many pages of your site, but you will likely have certain pages that are related but which do not\nshare any common Archetypes. Shared Configuration is a special Archetype that gives you the freedom to define your own\noption groups.<\/p>\n<p>Let's start with an example. Say you have a site using Static Page Groups, and want to add an additional menu item to\nall the &quot;index&quot; pages for each group.<\/p>\n<pre><code class=\"language-text\">. / (resources root)\n├── homepage.md\n├── config.yml\n└── pages/\n    ├── group-one/\n    |   ├── index.md &lt;-- group-one index page\n    |   ├── 1-1.md\n    |   └── 1-2.md\n    ├── group-two/\n    |   ├── index.md &lt;-- group-two index page\n    |   ├── 2-1.md\n    |   └── 2-2.md\n    └── group-three/\n        ├── index.md &lt;-- group-three index page\n        ├── 3-1.md\n        └── 3-2.md\n<\/code><\/pre>\n<p>For the directory structure above, you can see each of the 3 page groups has a similar structure, and each one includes\na file named <code>index.md<\/code>, which we want to link to each of the other pages within the group. But the Static Pages plugin\ndoes not provide an Archetype that selects these pages only. The normal solution is to simply copy the configuration you\nneed to each of those pages, but that can get very difficult to keep in sync amongst all pages over time.<\/p>\n<p>Instead of copying this configuration to each page, we can just add the <code>from<\/code> property to each page's Front Matter,\nwhich points to a location within our site config, and now we only need to update the one config to change all pages.\nLikewise, adding new pages requires adding only a single line to these new pages.<\/p>\n<pre><code class=\"language-markdown\">// group-one/index.md\n---\nfrom: staticPages.groupIndex\n---\n\n...\n<\/code><\/pre>\n<pre><code class=\"language-markdown\">// group-two/index.md\n---\nfrom: staticPages.groupIndex\n---\n\n...\n<\/code><\/pre>\n<pre><code class=\"language-markdown\">// group-three/index.md\n---\nfrom: staticPages.groupIndex\n---\n\n...\n<\/code><\/pre>\n<p>All of these pages now include the configurations from <code>staticPages.groupIndex<\/code>, and we can add the configuration we\nwant to share to that location in <code>config.yml<\/code>.<\/p>\n<pre><code class=\"language-yaml\"># config.yml\nstaticPages:\n  groupIndex: # &lt;-- `from: staticPages.groupIndex` points here\n    menu:\n      - type: &quot;pageChildren&quot;\n<\/code><\/pre>\n<p>Now, with that set up in <code>config.yml<\/code>, the pages that include data <code>from: staticPages.groupIndex<\/code> will include the\n<code>pageChildren<\/code> menu item, in addition to the menu items defined in that page's own Front Matter and its other relevant\nArchetypes.<\/p>\n<p>Shared Configurations take precedence over normal Archetype data, such as <code>allPages<\/code>.<\/p>\n<h3 id=\"multiple-shared-configs\"><a href=\"#multiple-shared-configs\" id=\"multiple-shared-configs\" class=\"anchor\"><\/a>Multiple Shared Configs<\/h3>\n<p>You can also set up more than one SharedConfiguration for a single page by passing a list of pointers rather than single\none. If you pass multiple pointers to different shared config locations, the data from pointers later in the list take\nprecedence over those defined earlier.<\/p>\n<pre><code class=\"language-markdown\">// group-one/index.md\n---\nfrom: \n  - staticPages.groupIndex\n  - staticPages.specialIndex # &lt;-- options from here take precedence over those in `staticPages.groupIndex`\n---\n\n...\n<\/code><\/pre>\n"
                }]
              },
              "menus": {
                "ownKey": "menus",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "menus",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/menus"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "breadcrumbs",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/breadcrumbs"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "components",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/components"
                  },
                  "description": "Orchid's built-in menu generation intelligently connects site structure to site menus which adapt themselves to site content.",
                  "title": "Menus",
                  "content": "<h2 id=\"menus\"><a href=\"#menus\" id=\"menus\" class=\"anchor\"><\/a>Menus<\/h2>\n<p>Menus are typically defined by the Theme and by the Page, and it is common for both kinds of menus to appear on a single\noutput Page's layout. Menus typically pull pages from the Index to dynamically generate the menu items, so all that\nis required to keep a menu up-to-date is to choose the appropriate menu item types.<\/p>\n<p>It is common for plugins to define their own menu item types, especially ones that correspond directly to the Pages a\nGenerator in the plugin creates. The exact methods of pulling indexed pages into a menu item are left up to the plugin,\nand may be as opinionated as showing the latest blog posts in a single category, or as generic as simply asking for a\nURL to link to.<\/p>\n<p>The most common menu items are described below. Individual plugins may contribute additional types.<\/p>\n<h3 id=\"page-menu-item\"><a href=\"#page-menu-item\" id=\"page-menu-item\" class=\"anchor\"><\/a>Page Menu Item<\/h3>\n<p>Add an item to the menu to any single page in your site by its <code>itemId<\/code> (optionally filtered by <code>collectionType<\/code> and\n<code>collectionId<\/code>). See <a href=\"https://orchid.run/wiki/user-manual/core-concepts/internal-links\">Internal Links<\/a> for more about locating to pages with these properties.<\/p>\n<p>This menu item is analogous to the <code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/internal-links#find-function&quot;&gt;find()&lt;/a&gt;<\/code> or\n<code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/internal-links#anchor-function&quot;&gt;anchor()&lt;/a&gt;<\/code> template functions.<\/p>\n<pre><code class=\"language-yaml\">menu: \n  - type: `page`\n    itemId: 'itemId'\n    collectionId: 'collectionId'\n    collectionType: 'collectionType'\n<\/code><\/pre>\n<h3 id=\"collection-pages-menu-item\"><a href=\"#collection-pages-menu-item\" id=\"collection-pages-menu-item\" class=\"anchor\"><\/a>Collection Pages Menu Item<\/h3>\n<p>Add items to the menu to a group of pages located by their <code>collectionType<\/code> and <code>collectionId<\/code>. See\n<a href=\"https://orchid.run/wiki/user-manual/core-concepts/internal-links\">Internal Links<\/a> for more about locating to pages with these properties.<\/p>\n<p>This menu item is analogous to the\n<code>&lt;a href=&quot;https://orchid.run/wiki/user-manual/core-concepts/internal-links#find-all-function&quot;&gt;findAll()&lt;/a&gt;<\/code> template function.<\/p>\n<pre><code class=\"language-yaml\">menu: \n  - type: `collectionPages`\n    collectionId: 'collectionId'\n    collectionType: 'collectionType'\n<\/code><\/pre>\n"
                }]
              },
              "compilers": {
                "ownKey": "compilers",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "compilers",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/compilers"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "front-matter",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/front-matter"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "themes",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/themes"
                  },
                  "description": "Orchid includes native support for compiling Markdown, Asciidoc, Pebble, SCSS, PlantUML diagrams, and more.",
                  "title": "Compilers",
                  "content": "<p>Most content in Orchid comes from a file in your local filesystem. While each plugin is free to do whatever they want to\ngenerate their pages, it is common for plugins to base their internal content models around the filesystem, and as such,\nthe content from most plugins is written in a very similar way because the content for each entry works the same.<\/p>\n<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Generally speaking, the file's extension is used to determine how a file is processed, and the compiler processing the\nfile determines the output file extension. Here are some examples:<\/p>\n<ul>\n<li><code>.md -&gt; .html<\/code>: Markdown<\/li>\n<li><code>.peb -&gt; .html<\/code>: Pebble<\/li>\n<li><code>.scss -&gt; .css<\/code>: Sass, (SCSS syntax)<\/li>\n<li><code>.sass -&gt; .css<\/code>: Sass, (Sass syntax)<\/li>\n<li><code>.ad -&gt; .html<\/code>: AsciiDoc (requires <a href=\"https://orchid.run/plugins/orchid-asciidoc-feature\">orchid-asciidoc-feature<\/a> plugin)<\/li>\n<li><code>.uml -&gt; .svg<\/code>: PlantUML (requires <a href=\"https://orchid.run/plugins/orchid-diagrams-feature\">orchid-diagrams-feature<\/a> plugin)<\/li>\n<\/ul>\n<p>Orchid does not make a distinction between 'template' languages (like Pebble) or 'content' languages (like Markdown), As\na result, the content for your pages can be written in any language you like.<\/p>\n<h2 id=\"custom-output-extension\"><a href=\"#custom-output-extension\" id=\"custom-output-extension\" class=\"anchor\"><\/a>Custom Output Extension<\/h2>\n<p>The file itself is able to override the default output extension by having a filename in a format like\n<code>filename.output.input<\/code>, such as <code>contact.php.peb<\/code>. This tells Orchid to use the <code>.php<\/code> extension instead of the normal\n<code>.html<\/code> extension from the Pebble compiler. The result is <code>index.php<\/code>.<\/p>\n<h2 id=\"ignored-output-extensions\"><a href=\"#ignored-output-extensions\" id=\"ignored-output-extensions\" class=\"anchor\"><\/a>Ignored Output Extensions<\/h2>\n<p>There are some filenames which adhere to the above format that should not be used as the output extension. This is\ncommon for compiled and minified CSS or Javascript, which is often named something like <code>styles.min.css<\/code>.<\/p>\n<p>You can set certain extensions to be ignored when the filename is in that format. By default, <code>min<\/code> is already ignored,\nbut you may add your own ignored extensions as an array in the <code>ignoredOutputExtensions<\/code> option in <code>config.yml<\/code>:<\/p>\n<pre><code class=\"language-yaml\"># config.yml\n...\nservices:\n  compilers:\n    ignoredOutputExtensions:\n      - 'min'\n      - 'debug'\n<\/code><\/pre>\n<h2 id=\"precompilers\"><a href=\"#precompilers\" id=\"precompilers\" class=\"anchor\"><\/a>Precompilers<\/h2>\n<p>Typically files are processed as a compiler of their file extension. For example, a file with the <code>.md<\/code> extension will\nbe processed as Markdown.<\/p>\n<p>But before it is processed as Markdown, if it has a Front Matter header, it will be precompiled as Pebble. You can use\nthe full power of Pebble templates to add additional dynamic content to otherwise static content.<\/p>\n<pre><code class=\"language-yaml\">---\n---\n\n# {{ page.title }} --&gt; # Custom Page Title\n\n<\/code><\/pre>\n<p>Any variables set in the Front Matter may be accessed as variables in Pebble.<\/p>\n<pre><code class=\"language-yaml\">---\ntitle: Custom Page Title\nfoo: 'bar'\n---\n\n# {{ foo }} --&gt; # bar\n\n<\/code><\/pre>\n<p>There are a number of predefined variables that are available on every page:<\/p>\n<ul>\n<li><code>page<\/code>: refers to the current Page object<\/li>\n<li><code>theme<\/code>: refers to the theme rendering the current page<\/li>\n<li><code>site<\/code>: refers contains basic info about your Orchid site<\/li>\n<li><code>data<\/code>: all custom data loaded from <code>data.yml<\/code> and <code>data/<\/code> files<\/li>\n<\/ul>\n<p>If you need to use a Front Matter header but don't want to precompile that page, you can set <code>precompile: false<\/code> in the\nFront Matter:<\/p>\n<pre><code class=\"language-yaml\">---\nprecompile: false\n---\n\n# {{ page.title }} --&gt; # {{ page.title }}\n\n<\/code><\/pre>\n<p>Alternatively, you may choose to use another language as your precompiler language of choice. This may be done\nindividually by a single page by setting <code>precompileAs<\/code> to the desired language extension in its Front Matter, or for\nall pages by setting the <code>defaultPrecompilerExtension<\/code> option in your <code>config.yml<\/code>:<\/p>\n<pre><code class=\"language-yaml\">---\nprecompileAs: 'html'\n---\n\n# {{ page.title }} --&gt; # {{ page.title }}\n\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># config.yml\n...\nservices:\n  compilers:\n    defaultPrecompilerExtension: 'html'\n<\/code><\/pre>\n"
                }]
              },
              "breadcrumbs": {
                "ownKey": "breadcrumbs",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "breadcrumbs",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/breadcrumbs"
                  },
                  "next": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "templates",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/templates"
                  },
                  "previous": {
                    "path": "wiki/user-manual/core-concepts",
                    "baseUrl": "https://orchid.run",
                    "fileName": "menus",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/core-concepts/menus"
                  },
                  "description": "Orchid maintains a structured and flexible page hierarchy which allows for automatically-generated breadcrumbs.",
                  "title": "Breadcrumbs",
                  "content": "<h2 id=\"breadcrumbs\"><a href=\"#breadcrumbs\" id=\"breadcrumbs\" class=\"anchor\"><\/a>Breadcrumbs<\/h2>\n<p>Breadcrumbs are a common feature of many websites, and help visitors know where they are in the logical hierarchy of the\nsite. Orchid lets you add breadcrumbs to your pages, automatically building the breadcrumb structure based on what\nOrchid or its plugins know about your site.<\/p>\n<h3 id=\"rendering-breadcrumbs\"><a href=\"#rendering-breadcrumbs\" id=\"rendering-breadcrumbs\" class=\"anchor\"><\/a>Rendering Breadcrumbs<\/h3>\n<p>Including breadcrumbs in your site is really easy, just add the following line to your template wherever you'd like to\nplace your breadcrumbs.<\/p>\n<pre><code class=\"language-twig\"># Any page or template\n{% breadcrumbs %}\n\n<\/code><\/pre>\n<p>This will tell Orchid to lookup the breadcrumbs for the current page, and display it at that location. By default, it\nuses Bootstrap 4 markup (which is fully-compatible with Bootstrap 3), but as breadcrumbs are rendered as a Template Tag,\nthe styling can be overridden by your theme or by creating a custom <code>templates/tags/breadcrumbs.peb<\/code> template.<\/p>\n<p>In many cases, your theme will automatically include breadcrumbs for you, and so everything is already done for you. If\nyour theme does not supply breadcrumbs, you are free to use the tag to render them wherever you wish. A good place do\nadd this by creating a custom Layout, or by overridding the Page Template for the page types you wish to have\nbreadcrumbs.<\/p>\n<h3 id=\"customizing-breadcrumb-structure\"><a href=\"#customizing-breadcrumb-structure\" id=\"customizing-breadcrumb-structure\" class=\"anchor\"><\/a>Customizing Breadcrumb Structure<\/h3>\n<p>By default, Orchid will use a page's <code>parent<\/code> to determine how to build the breadcrumb structure. It will navigate up\nthrough the hierarchy of parent pages, stopping when a page has no parent. Many plugins, such as Wikis, will configure\nits own pages to have the parent page already set, and so rich breadcrumbs will come for free on these pages.<\/p>\n<p>For more control over the breadcrumbs for a particular section of your site, you can use the <a href=\"https://orchid.run/plugins/orchid-pages-feature\">Static Pages<\/a>\nplugin and set a reference to each page's parent page in its Front Matter. You can use a <code>key=value<\/code> reference in the\nFront Matter to link to a page with a specific Front Matter value, or use the page title.<\/p>\n<p>The following example shows how to manually build breadcrumbs with pages from the Static Pages plugin.<\/p>\n<pre><code class=\"language-yaml\"># pages/locations/all.md\n---\ntitle: 'All Locations'\nlocation: 'All'\n---\n\n# {% breadcrumbs %} renders as 'All Locations' \n\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># pages/locations/all/usa.md\n---\ntitle: 'United States'\nlocation: 'USA'\nparent: 'location=All'\n---\n\n# {% breadcrumbs %} renders as 'All Locations / United States' \n\n<\/code><\/pre>\n<pre><code class=\"language-yaml\"># pages/locations/all/usa/texas.md\n---\ntitle: 'Texas'\nlocation: 'TX'\nparent: 'location=USA'\n---\n\n# {% breadcrumbs %} renders as 'All Locations / United States / Texas' \n\n<\/code><\/pre>\n"
                }]
              }
            },
            "ownPages": [{
              "reference": {
                "path": "wiki/user-manual",
                "baseUrl": "https://orchid.run",
                "fileName": "core-concepts",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/core-concepts"
              },
              "next": {
                "path": "wiki/user-manual/core-concepts",
                "baseUrl": "https://orchid.run",
                "fileName": "pages",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/core-concepts/pages"
              },
              "previous": {
                "path": "wiki/user-manual/getting-started",
                "baseUrl": "https://orchid.run",
                "fileName": "plugins",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/getting-started/plugins"
              },
              "description": "",
              "title": "Core Concepts",
              "content": ""
            }]
          },
          "extending": {
            "ownKey": "extending",
            "childrenPages": {
              "options": {
                "ownKey": "options",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "options",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/options"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "lifecycle-events",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/lifecycle-events"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "registration",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/registration"
                  },
                  "description": "A declarative system for extracting options from site configuration or Front Matter makes your plugins self-documenting.",
                  "title": "Options",
                  "content": "<p>Orchid has a novel and very powerful way of managing options that makes it easier for both developers and users. For\ndevelopers, you can spend less time focusing on finding options, and also not be stuck with\n<a href=\"https://wiki.c2.com/?StringlyTyped\">Stringly-typed<\/a> options. For users, options are self-documenting, so you know you\nhave access to all possible options and have insight into their default values, even if the documentation isn't\nup-to-date.<\/p>\n<p>The core for Orchid's options processing is all implemented in <a href=\"https://github.com/JavaEden/Common\">JavaEden/Common<\/a>,\nwith Orchid and plugins contributing extensions that make it all easier to work with the specifics of Orchid options.<\/p>\n<p>In a nutshell, the options-processing works like the following (each section is covered in more detail in other pages):<\/p>\n<ol>\n<li>Run through all fields in a class and its parent classes and find the ones annotated with <code>@Option<\/code>.<\/li>\n<li>Gather additional data from all the Archetypes of a given class (Archetypes are declared as annotations on the class)<\/li>\n<li>Merge Archetypal data with the data that is passed directly to the Extractor.<\/li>\n<li>For each field:\n<ol>\n<li>Get the option name, which is either a String named in the <code>@Option<\/code> annotation, or the field name itself.<\/li>\n<li>Find the corresponding data in the full, merged data.<\/li>\n<li>Find an OptionExtractor that can handle the type of data that the field holds<\/li>\n<li>Pass the data to this OptionExtractor, which returns an instance that can be assigned to the field. If this value\ncomes back as empty, get the default value from the OptionExtractor, which is often defined as a custom\nannotation on that field.<\/li>\n<li>Assign the value received from the OptionExtractor to the field. This can be set through a Bean-style <code>setter<\/code>\nmethod, or by directly assigning the field.<\/li>\n<\/ol>\n<\/li>\n<\/ol>\n<p>The way options are found and assigned gives us several guarantees that make it very easy for developers to reason about\nand use options:<\/p>\n<ol>\n<li>An option is always assigned each Extraction. As some classes (such as singletons) have options extracted into them\nmultiple times in a single Orchid run (typically once per build cycle), this guarantees that options are always\nreset and nothing leaks from one extraction to the next.<\/li>\n<li>Options are type-safe, and converted the the type of the field automatically, regardless of their format in the\nactual declared options. For example, an integer field will always give a sensible Integer value: if the declared\nvalue is actually an int, it will be used as-is. If it is a String, the string will be parsed to an int. Likewise,\ndoubles, booleans, Java 8 Local Date, Time, and DateTimes, and many others are supported by default.<\/li>\n<li>Supporting new option types is as simple as creating a new OptionExtractor, and it then works everywhere. You no\nlonger have to bloat your code with the same type-coercion logic everywhere.<\/li>\n<li>An option looks up its data within its declared options, not the other way around. So we can safely set additional\nproperties for custom use outside of the Options processing, and we can also have multiple Options pull from the\nsame source data. There is no restriction on having unique option names when the names are set as Strings in the\n<code>@Option<\/code> annotation.<\/li>\n<li>Orchid knows all there is to bw known about every possible option, and is able to auto-generate documentation for\nall these options. Orchid is privy to each option's result type and default value, and descriptions can be attached\nto each option as well via the <code>@Description<\/code> annotation. This also means that the auto-generated documentation is\navailable during Orchid's runtime, so we tailor the documentation to only those classes that are relevant to\n<em>your specific build<\/em>, and bring it all to you rather than forcing you to go find it yourself.<\/li>\n<\/ol>\n"
                }]
              },
              "generators": {
                "ownKey": "generators",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "generators",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/generators"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "compilers",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/compilers"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "commands",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/commands"
                  },
                  "description": "",
                  "title": "Generators",
                  "content": ""
                }]
              },
              "custom-themes": {
                "ownKey": "custom-themes",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "custom-themes",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/custom-themes"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "registration",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/registration"
                  },
                  "previous": {
                    "path": "wiki/user-manual",
                    "baseUrl": "https://orchid.run",
                    "fileName": "extending",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending"
                  },
                  "description": "Learn more about creating custom themes in Orchid.",
                  "title": "Custom Themes",
                  "content": "<p>TODO<\/p>\n"
                }]
              },
              "registration": {
                "ownKey": "registration",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "registration",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/registration"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "options",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/options"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "custom-themes",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/custom-themes"
                  },
                  "description": "Orchid uses Google Guice to manage the plugin system, with some additional features that provide powerful introspection into your site from the admin panel.",
                  "title": "Registration",
                  "content": "<p>Orchid is built on top of Google Guice for dependency injection, and there really isn't anything that cannot be\nextended. A basic knowledge of Guice might be helpful for more advanced customization, but a basic explanation here will\ncertainly be enough to get started writing basic plugins.<\/p>\n<h2 id=\"dependency-injection\"><a href=\"#dependency-injection\" id=\"dependency-injection\" class=\"anchor\"><\/a>Dependency Injection<\/h2>\n<p>&quot;Dependency Injection&quot; (often shortened to DI) is a fancy term for a rather simple concept. To understand DI, lets look\nat a pretty standard example: logging. It is typical for an application to log information like the following snippet:<\/p>\n<pre><code class=\"language-java\">public class LoggerExample {\n    private final Logger logger;\n    \n    public LoggerExample() {\n        this.logger = LoggerFactory.getInstance();\n        this.logger.log(&quot;Hello World&quot;); \n    }\n} \n<\/code><\/pre>\n<p>This is commonly known as the <em>Factory Pattern<\/em>, and it has some issues. The most obvious issue is that the\nLoggerExample is tied to exactly one type of Logger, so it becomes difficult to swap that implementation out. Sure the\nimplementation can be changed within the factory body, this becomes much more difficult if the Logger required other\nconditions to be set up before it can be created.<\/p>\n<p>Dependency Injection allows us to instead set up our class such that the Logger is passed directly to its constructor.<\/p>\n<pre><code class=\"language-java\">public class LoggerExample {\n    private final Logger logger;\n    \n    @Inject\n    public LoggerExample(Logger logger) {\n        this.logger = logger;\n        this.logger.log(&quot;Hello World&quot;); \n    }\n} \n<\/code><\/pre>\n<p>Now, the burden of creating the Logger is up to another class, and the LoggerExample's only job is to simply use the\nlogger given to it. This makes it easier to test, but also gives consumers of the LoggerExample class information about\nwhat it does without looking at its source, namely that it is going to log something.<\/p>\n<p>Now at its heart, DI is a concept and not tied to any particular framework. You could actually just set up all your\nclasses to receive dependant objects in their only constructor and never need to set up a full framework, but this\nquickly gets too cumbersome as the project size grows and changes over time. So while it is possible to implement DI\nwithout a full framework, it is much more common to use a framework like Spring or Guice to do the hard work for you.<\/p>\n<p>That being said, Orchid is based on Guice, which has several advantages over Spring:<\/p>\n<ol>\n<li>Guice is smaller and more lightweight than Spring<\/li>\n<li>Guice has a much quicker startup time<\/li>\n<li>Spring is tailored very heavily for web applications and the Servlet lifecycle, but Guice is designed to work for\nany application. Since Orchid is not a web application, much of what is included in Spring by default is not needed.<\/li>\n<\/ol>\n<h2 id=\"guice-module-registration\"><a href=\"#guice-module-registration\" id=\"guice-module-registration\" class=\"anchor\"><\/a>Guice Module Registration<\/h2>\n<p>Nearly everything in Orchid is set up using dependency injection similar to as shown above, using Guice as the DI\nframework. But in order for Guice to know how to construct the dependencies that are injected, we need to tell Guice\nwhat classes can be used in our dependency graph. We do this by creating <strong>modules<\/strong> which instruct Guice on how to set\nthis up for us.<\/p>\n<p>When Orchid is first started, it scans the classpath, looking for all classes that implement the Guice <code>Module<\/code>\ninterface, collect them all together, and then pass them all to Guice for the actual injection. So simply including a\ndependency in your <code>build.gradle<\/code> which has a Module in it is enough for Orchid is add it to the Orchid build.<\/p>\n<pre><code class=\"language-java\">public class CustomModule extends OrchidModule {\n\n    @Override\n    protected void configure() {\n        bind(CustomService.class).to(CustomServiceImpl.class);\n        \n        addToSet(OrchidGenerator.class, CustomGenerator.class);\n    }\n} \n<\/code><\/pre>\n<p>You should generally have your modules extend <code>OrchidModule<\/code> rather than using the default Guice <code>AbstractModule<\/code> class,\nbecause it offers a few extra conveniences more useful for Orchid, and is itself a child class of <code>AbstractModule<\/code>. That\nbeing said, Orchid auto-registers any class that implements the Guice <code>Module<\/code> interface, so either can be used just as\neasily.<\/p>\n<p>Looking at the module above, you'll need to override the <code>configure()<\/code>, and in that method you will set up your\nbindings. There are two types of bindings you will commonly use for Orchid: binding concrete implementations to abstract\nclasses or interfaces, which is what is how Guice is typically used, and adding implementations to sets. The second is\n<em>by far<\/em> the most commonly used binding in Orchid, and if you are building your own extendible interfaces, should almost\nalways be the preferred way to set up your bindings. Both of these are described below.<\/p>\n<h3 id=\"simple-bindings\"><a href=\"#simple-bindings\" id=\"simple-bindings\" class=\"anchor\"><\/a>Simple Bindings<\/h3>\n<p>The <code>bind()<\/code> method takes an abstract class, and assigns a specific implementation class to it. Instances of this class\nshould <em>always<\/em> request injection of the abstract class, so that Guice can handle providing the concrete implementation,\nchanging it if necessary.<\/p>\n<p>If you are the one creating both the abstract and implementation classes, you should avoid setting up the association\nwithin the module itself. Instead of using <code>bind(A.class).to(B.class)<\/code>, you can instead use the <code>@ImplementedBy<\/code>\nannotation on the abstract class to set up an equivalent binding.<\/p>\n<pre><code class=\"language-java\">@ImplementedBy(B.class)\npublic interface A {\n} \npublic class B implements A {\n} \n<\/code><\/pre>\n<p>This method of using the <code>@ImplementedBy<\/code> annotation has several advantages over the module binding. First, it makes it\neasier to understand the intended relationship in the source code for both classes, and both the interface and the\nimplementation point directly to one another. In addition, bindings within a module have a higher priority than the\nannotation, which allows another plugin to extend yours by creating a module to register a different interface. Guice\nwill complain if two modules try to create a binding to the same interface, but it will happily accept both a module\nand annotation binding, treating the annotation as the &quot;default&quot;.<\/p>\n<h3 id=\"multi-bindings\"><a href=\"#multi-bindings\" id=\"multi-bindings\" class=\"anchor\"><\/a>Multi-Bindings<\/h3>\n<p>The most common types of bindings in Orchid are multi-bindings, or more specifically <em>set bindings<\/em>. What this means, is\nthat rather than having Guice inject a single instance, you can have it inject a <code>Set&lt;&gt;<\/code> of some type, where each\ninstance in that set is a unique type. This is how we can get a plugin architecture in Orchid, as most bindings are\nbound as sets rather than single instances, and you can contribute new implementations to any of those sets seamlessly.<\/p>\n<p>The <code>OrchidModule<\/code> class adds the <code>addToSet()<\/code> method, where the first parameter is the abstract class or interface\nclass, followed by a vararg list of implementation classes. Orchid will also keep track of all sets bound in this way so\nthat you can easily see every possible class type which can be extended through multi-bindings. You can see all\navailable set types from the <a href=\"https://orchid.run/wiki/user-manual/getting-started/admin-panel\">Admin Panel<\/a>.<\/p>\n<p>Some common examples of classes that are bound through sets are:<\/p>\n<ul>\n<li>Generators<\/li>\n<li>Components<\/li>\n<li>Menu Items<\/li>\n<li>Template Tags<\/li>\n<\/ul>\n<h2 id=\"ignoring-modules\"><a href=\"#ignoring-modules\" id=\"ignoring-modules\" class=\"anchor\"><\/a>Ignoring Modules<\/h2>\n<p>In some cases, you may wish for a particular module to not be auto-registered, even though it is on the classpath. A\ngood example is the <code>JavadocModule<\/code> from the <a href=\"https://orchid.run/plugins/orchid-javadoc-feature\">orchid-javadoc-feature<\/a> plugin. This plugin should\nonly register its bindings when Orchid has been started from the Javadoc tool, rather than Orchid's normal main class,\nand it manually adds the <code>JavadocModule<\/code> itself.<\/p>\n<p>For these cases, you can add the <code>@IgnoreModule<\/code> annotation to the module class to have it skipped during\nauto-registration.<\/p>\n<h1 id=\"understanding-the-orchid-content-model\"><a href=\"#understanding-the-orchid-content-model\" id=\"understanding-the-orchid-content-model\" class=\"anchor\"><\/a>Understanding the Orchid Content Model<\/h1>\n<p>Generators are at the very core of how Orchid is so flexible. While most static site generators define rules and models\naround how content is discovered and rendered, Orchid offloads this entire process to plugins, and instead build a\npowerful framework for making it <em>incredibly easy<\/em> to define these rules yourself. Some existing tools are pretty rigid,\nlike Jekyll's strong base of blogging content, while others are very flexible, like Hugo's custom taxonomies, but they\nare all limited to that <em>one<\/em> way of doing things. Orchid, on the other hand, is able to capture the essence of all\nthese tools and bring all their content models into one site, even opening the content for one plugin to build off the\ncontent of another, giving you unlimited possibilities.<\/p>\n<p>Orchid uses a unique way to create content that makes it easy to work with, but also gives a guarantee that the data you\nneed is available when you need it. To do this, it uses <strong>Generators<\/strong>, and employs a separate <em>indexing<\/em> and\n<em>generating<\/em> phase for each generator, which will be described in the next couple pages. But the big idea here is that\nOrchid allows plugins to load their data before any pages are rendered, so each rendered page can contain data from\nany other generator, knowing that it will always be there when you need it.<\/p>\n<p>This allows us to do some really cool things like building pages out of smaller Components, creating custom menus with\nmenu items dynamically populated from the pages that Orchid has indexed, and creating strong links among pages that\nadapt to changing URL structures, even between different plugins. In addition, this allows us to build powerful content\nmodels that each work in isolation, but work together really well when combined in the rendered templates.<\/p>\n<h2 id=\"available-content-models\"><a href=\"#available-content-models\" id=\"available-content-models\" class=\"anchor\"><\/a>Available Content Models<\/h2>\n<p>Orchid was created to take the best parts of many popular static site generators and similar tools, and bring them into\none place. Below is a list of some well-known tools whose content model has inspired some official Orchid plugins, along\nwith the Orchid plugins that came from this inspiration.<\/p>\n<ul>\n<li><a href=\"https://gohugo.io/\"><strong>Hugo<\/strong><\/a>\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-pages-feature\">orchid-pages-feature<\/a><\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-archives-feature\">orchid-archives-feature<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://jekyllrb.com/\"><strong>Jekyll<\/strong><\/a>\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-posts-feature\">orchid-posts-feature<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://toolchain.gitbook.com/\"><strong>Gitbook<\/strong><\/a>\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-wiki-feature\">orchid-wiki-feature<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://www.oracle.com/technetwork/java/javase/tech/index-jsp-135444.html\"><strong>Javadoc<\/strong><\/a>\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-javadoc-feature\">orchid-javadoc-feature<\/a><\/li>\n<li><a href=\"https://orchid.run/plugins/orchid-swiftdoc-feature\">orchid-swiftdoc-feature<\/a><\/li>\n<\/ul>\n<\/li>\n<li><a href=\"https://styleguide.sc5.io/\"><strong>SC5 Styleguide<\/strong><\/a>\n<ul>\n<li><a href=\"https://orchid.run/plugins/orchid-kss-feature\">orchid-kss-feature<\/a><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n"
                }]
              },
              "lifecycle-events": {
                "ownKey": "lifecycle-events",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "lifecycle-events",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/lifecycle-events"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "tasks",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/tasks"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "options",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/options"
                  },
                  "description": "There are many lifecycle hooks that can be subscribed to, which allow you to customize your site from code rather than configuration.",
                  "title": "Lifecycle Events",
                  "content": ""
                }]
              },
              "compilers": {
                "ownKey": "compilers",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "compilers",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/compilers"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "generators",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/generators"
                  },
                  "description": "Compilers allow you add additional content or template languages.",
                  "title": "Parsers and Compilers",
                  "content": ""
                }]
              },
              "tasks": {
                "ownKey": "tasks",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "tasks",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/tasks"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "commands",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/commands"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "lifecycle-events",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/lifecycle-events"
                  },
                  "description": "Tasks are the top-level actions that Orchid does to build or deploy your site from the command-line.",
                  "title": "Tasks",
                  "content": ""
                }]
              },
              "commands": {
                "ownKey": "commands",
                "ownPages": [{
                  "reference": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "commands",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/commands"
                  },
                  "next": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "generators",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/generators"
                  },
                  "previous": {
                    "path": "wiki/user-manual/extending",
                    "baseUrl": "https://orchid.run",
                    "fileName": "tasks",
                    "extension": "html",
                    "usePrettyUrl": true,
                    "link": "https://orchid.run/wiki/user-manual/extending/tasks"
                  },
                  "description": "Commands can be invoked from the Orchid shell or in the admin panel.",
                  "title": "Commands",
                  "content": ""
                }]
              }
            },
            "ownPages": [{
              "reference": {
                "path": "wiki/user-manual",
                "baseUrl": "https://orchid.run",
                "fileName": "extending",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/extending"
              },
              "next": {
                "path": "wiki/user-manual/extending",
                "baseUrl": "https://orchid.run",
                "fileName": "custom-themes",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/extending/custom-themes"
              },
              "previous": {
                "path": "wiki/user-manual/core-concepts",
                "baseUrl": "https://orchid.run",
                "fileName": "publication",
                "extension": "html",
                "usePrettyUrl": true,
                "link": "https://orchid.run/wiki/user-manual/core-concepts/publication"
              },
              "description": "",
              "title": "Extending Orchid",
              "content": ""
            }]
          }
        },
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://orchid.run",
            "fileName": "user-manual",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://orchid.run/wiki/user-manual"
          },
          "description": "",
          "title": "User   Manual",
          "content": "<html>\n <head><\/head>\n <body>\n  <h2 id=\"getting-started\"><a href=\"#getting-started\" id=\"getting-started\" class=\"anchor\"><\/a><a href=\"https://orchid.run/wiki/user-manual/getting-started\">Getting Started<\/a><\/h2> \n  <ul> \n   <li><a href=\"https://orchid.run/wiki/user-manual/getting-started/quickstart\">Quick-Start<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/getting-started/basic-usage\">Basic Usage<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/getting-started/directory-structure\">Directory Structure<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/getting-started/site-config\">Configuration<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/getting-started/admin-panel\">Admin Panel<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/getting-started/plugins\">Plugins<\/a><\/li> \n  <\/ul> \n  <h2 id=\"core-concepts\"><a href=\"#core-concepts\" id=\"core-concepts\" class=\"anchor\"><\/a><a href=\"https://orchid.run/wiki/user-manual/core-concepts\">Core Concepts<\/a><\/h2> \n  <ul> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/pages\">Pages<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/themes\">Themes<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/compilers\">Compilers<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/front-matter\">Front Matter<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/components\">Components<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/menus\">Menus<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/breadcrumbs\">Breadcrumbs<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/templates\">Templates<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/internal-links\">Internal Links<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/assets\">Assets<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/shared-config\">Shared Configuration<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/core-concepts/publication\">Publication<\/a><\/li> \n  <\/ul> \n  <h2 id=\"extending-orchid\"><a href=\"#extending-orchid\" id=\"extending-orchid\" class=\"anchor\"><\/a><a href=\"https://orchid.run/wiki/user-manual/extending\">Extending Orchid<\/a><\/h2> \n  <ul> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/custom-themes\">Custom Themes<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/registration\">Registration<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/options\">Options<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/lifecycle-events\">Lifecycle Events<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/tasks\">Tasks<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/commands\">Commands<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/generators\">Generators<\/a><\/li> \n   <li><a href=\"https://orchid.run/wiki/user-manual/extending/compilers\">Parsers and Compilers<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
        }]
      },
      "learn": {
        "ownKey": "learn",
        "childrenPages": {"tutorials": {
          "ownKey": "tutorials",
          "childrenPages": {
            "link-all-the-things": {
              "ownKey": "link-all-the-things",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "link-all-the-things",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/link-all-the-things"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "whats-on-the-menu",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/whats-on-the-menu"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "heart-of-the-front-matter",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/heart-of-the-front-matter"
                },
                "description": "Get to know the basics of how Orchid makes it easy to generate internal links in you site.",
                "title": "Link All The Things!",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>Our Orchid site is starting to get pretty well furnished and is easy to maintain, but there are still a few things we\nneed to clean up before it is fully ready-to-go. Most notably, we still have those hard-coded links in our locations\nindex page. In this tutorial, I will show you the way Orchid addresses this problem.<\/p>\n<p>Before continuing, make sure you have followed along with the previous tutorial and have started your local Orchid\nserver with <code>gradle orchidServe<\/code>. We will be building on that example in this tutorial.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/04\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"making-dynamic-links\"><a href=\"#making-dynamic-links\" id=\"making-dynamic-links\" class=\"anchor\"><\/a>Making Dynamic Links<\/h2>\n<p>Let's first review what we have in our <code>locations/index.md<\/code> page:<\/p>\n<pre><code class=\"language-twig\">- [Houston](http://localhost:8080/locations/houston)\n- [Dallas](http://localhost:8080/locations/dallas)\n- [Austin](http://localhost:8080/locations/austin)\n<\/code><\/pre>\n<p>There are a few issues with this. The first, most obvious issue is that these links are hardcoded to using our\ndevelopment base URL of <code>http://localhost:8080<\/code>. We don't want to go live with this site when it has links to\ndevelopment URLs, but Markdown doesn't have any way to dynamically change those links.<\/p>\n<p>But remember how we added a Front Matter block to enable Pebble precompilation in the previous tutorial? Even though we\ndon't really have any data to put in Front Matter, let's add it anyway so I can introduce you to one of the important\n<strong>global variables<\/strong> available to you in Orchid, <code>site<\/code>.<\/p>\n<h3 id=\"site-global-variable\"><a href=\"#site-global-variable\" id=\"site-global-variable\" class=\"anchor\"><\/a>Site Global Variable<\/h3>\n<p>The <code>site<\/code> variable is available on every page in Orchid, and contains a few properties that might be of use, either for\ndisplay or for control flow. A few notable properties are:<\/p>\n<ul>\n<li><code>site.about<\/code> - Additional information about your site, such as its title, avatar, favicon. Another tutorial will\nteach you how to customize these values<\/li>\n<li><code>site.baseUrl<\/code> - Your site's base URL<\/li>\n<li><code>site.debug<\/code> - True if Orchid is running in debug<\/li>\n<li><code>site.orchidVersion<\/code> - The current version of Orchid<\/li>\n<li><code>site.version<\/code> - The current version of your app or site<\/li>\n<\/ul>\n<p>The <code>site.baseUrl<\/code> property looks like just what we need! We can replace the hard-coded base URL in <code>locations/index.md<\/code>\nwith that variable instead, and it will automatically update these URLs based on the <code>baseUrl<\/code> property set in\n<code>build.gradle<\/code>.<\/p>\n<pre><code class=\"language-twig\">---\n---\n- [Houston]({{ site.baseUrl }}/locations/houston)\n- [Dallas]({{ site.baseUrl }}/locations/dallas)\n- [Austin]({{ site.baseUrl }}/locations/austin)\n\n<\/code><\/pre>\n<p>These links are still kind-of &quot;hard-coded&quot;, however, since the path of these links is just passed directly to the\nMarkdown processor. Instead, we cal pass these paths to the <code>baseUrl<\/code> Pebble filter, which allows Orchid to be a bit\nmore clever with these paths (to ensure proper formatting), and is also easier to understand and more idiomatic.<\/p>\n<pre><code class=\"language-twig\">---\n---\n- [Houston]({{ '/locations/houston'|baseUrl }})\n- [Dallas]({{ '/locations/dallas'|baseUrl }})\n- [Austin]({{ '/locations/austin'|baseUrl }})\n\n<\/code><\/pre>\n<p>And yet, we can still do better. There are still some parts to those URLs that might get changed without our knowing,\nwhich would lead to broken links. Let's see how we can avoid that.<\/p>\n<h2 id=\"linking-functions\"><a href=\"#linking-functions\" id=\"linking-functions\" class=\"anchor\"><\/a>Linking Functions<\/h2>\n<p>Orchid comes with a few functions that can be used to intelligently find other pages within your Orchid site. Generally-\nspeaking, you can use these functions to locate any page by its title, and from that, let Orchid generate the entire URL\nfor you. This separates the link that is printed out from your intent behind making the link, which is to go to a\nspecific, known page.<\/p>\n<h3 id=\"link-function\"><a href=\"#link-function\" id=\"link-function\" class=\"anchor\"><\/a>Link Function<\/h3>\n<p>The first function we can use is <code>link()<\/code>. Let's start with an example:<\/p>\n<pre><code class=\"language-twig\">---\n---\n- [Houston]({{ link('Houston') }})\n- [Dallas]({{ link('Dallas') }})\n- [Austin]({{ link('Austin') }})\n\n<\/code><\/pre>\n<p>Now, instead of manually creating the links to our individual location pages, we simply pass the <em>title<\/em> of our target\npage to the <code>link()<\/code> function, which returns the String URL of the page whose title is the same, which is exactly what\nwe want! If we change the location of our locations pages, say to <code>/locations/tx<\/code>, we do not have to go and update all\nour links to those pages as long as they still have the same title. In addition, these links use the same base URL that\nis in <code>site.baseUrl<\/code>, so we can trust that the links will adapt to both our development and production sites.<\/p>\n<h3 id=\"anchor-function\"><a href=\"#anchor-function\" id=\"anchor-function\" class=\"anchor\"><\/a>Anchor Function<\/h3>\n<p>The <code>link()<\/code> function is very useful, but there is still a problem. If we happen to pass the title of a page that\ndoesn't exist, it will simply return an empty string. But Markdown will still create an anchor tag, though it will just\nhave an empty <code>href<\/code> attribute. This is bad both for SEO and for your user's browsing experience. What we really want is\nto only create a clickable link if the page actually exists, otherwise just render text. While this isn't a perfect\nsolution, at least you will have the visual cue of text <em>not<\/em> being a link when it should, and it's less detrimental\nto your SEO.<\/p>\n<p>Most SSGs and CMSs would have you just check if that returned URL is empty, and wrap the link in an <code>if<\/code> statement. But\nthis gets tedious and makes your templates hard to read, so Orchid offers another tag, specifically designed for\nintelligently generating a clickable anchor link, <code>anchor()<\/code>. With the <code>anchor()<\/code> function, we can replace the entire\nMarkdown link, and let Orchid create it for us instead:<\/p>\n<pre><code class=\"language-twig\">---\n---\n- {{ anchor('Houston') }}\n- {{ anchor('Dallas') }}\n- {{ anchor('Austin') }}\n\n<\/code><\/pre>\n<p>Not only is our template easier to read now, but it won't generate links if the page doesn't exist, instead just\nreturning the text that is passed to the function directly. By default, the text passed to the function is used as the\ntext in the link, but this can be changed by passing an additional argument to the function. If there are 2 parameters,\nthen the first one is the text that will be displayed in the link, while the second is used to look up a page.<\/p>\n<pre><code class=\"language-twig\">---\n---\n- {{ anchor('Houston, TX', 'Houston') }}\n- {{ anchor('Dallas, TX', 'Dallas') }}\n- {{ anchor('Austin, TX', 'Austin') }}\n\n<\/code><\/pre>\n<h2 id=\"generating-the-page-list\"><a href=\"#generating-the-page-list\" id=\"generating-the-page-list\" class=\"anchor\"><\/a>Generating the Page List<\/h2>\n<h3 id=\"find-all-function\"><a href=\"#find-all-function\" id=\"find-all-function\" class=\"anchor\"><\/a>Find All Function<\/h3>\n<p>Our locations index page is looking really good now. All our links are fully dynamic and will automatically update if\nthe page is moved and for our different environments. But our business is growing very quickly, and we're adding new\nlocations almost daily! You don't want to have to update this list every time you add a new location; what you really\nwant is to have the entire list automatically generated based on the files you have already created for each location.<\/p>\n<p>Fortunately for you, Orchid has a way to handle that too, which works in very much the same way as just linking to a\nsingle page. There is a <code>findAll()<\/code> function that takes the same input as the <code>link()<\/code> and <code>anchor()<\/code> functions, but\ninstead of returning the String URL or anchor to that page, it will return a list of Page objects, which you can then\nuse to build links for yourself just as easily.<\/p>\n<p>Take a look at the snippet below as an example. It is incomplete because there is a bit more we will want to add to the\nfunctions parameters, but I'll get back to that in a moment. For now, just notice that we can iterate over the result\nand build links manually.<\/p>\n<pre><code class=\"language-twig\">{% for page in findAll(...) %}\n- [{{ page.title }}]({{ page.link }})\n{% endfor %}\n\n<\/code><\/pre>\n<h3 id=\"filtering-collections\"><a href=\"#filtering-collections\" id=\"filtering-collections\" class=\"anchor\"><\/a>Filtering Collections<\/h3>\n<p>In our example of small business locations, all the pages we want to link to come from the <code>pages<\/code> plugin, and more\nspecifically, because their topmost folder within <code>pages<\/code> is <code>locations/<\/code> they are considered to be in the <code>locations<\/code>\npage group. Together, these two properties are known as the <strong>collection type<\/strong> and <strong>collection ID<\/strong>.<\/p>\n<p>Each plugin that generates pages, like our Static Pages plugin, also generates one or more <em>collections<\/em> of pages. These\ncollections are what's actually underlying all the <code>link()<\/code>, <code>anchor()<\/code>, and <code>findAll()<\/code> functions, and they all allow\nyou to filter the pages that get matched by their corresponding <code>collectionType<\/code> and <code>collectionId<\/code>. It is up to the\nplugin to decide exactly how these are formatted, so be sure to check the plugin's documentation, but as a general rule\nof thumb, the <code>collectionType<\/code> matches the key of the generator they are from, while the <code>collectionId<\/code> is a specific\nsubset of the pages from that generator.<\/p>\n<p>When you pass a <code>collectionId<\/code> or <code>collectionType<\/code> to any of the above functions, the scope of the search is limited to\njust those matching collections. The <code>itemId<\/code> is the property we've been passing as the title, and is required for\n<code>link()<\/code> and <code>anchor()<\/code>, but is optional for <code>findAll()<\/code>. The <code>itemId<\/code> filters the pages contained within the matching\ncollections.<\/p>\n<p>Armed with this knowledge, we can finish out our example and not only generate dynamic links to our location pages, but\nalso dynamically generate the entire list!<\/p>\n<pre><code class=\"language-twig\">{% for page in findAll(collectionType='pages', collectionId='locations') %}\n- [{{ page.title }}]({{ page.link }})\n{% endfor %}\n\n<\/code><\/pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>And just like that, we can now maintain our Orchid site more easily than ever before! Not only are we able to update the\ncontent for all our locations pages at once (as we learned in the last tutorial), but we can generate our full list of\nlocations on the index page dynamically, so new locations are automatically included in that list.<\/p>\n<p>Let's review all the individual pieces we learned in this tutorial.<\/p>\n<ol>\n<li>Orchid offers many ways to generate dynamic links between your content. The first, and simplest way, is to use\n<code>site.baseUrl<\/code> which prints out your site's base URL, fro which you can manually build the link to a page. The\n<code>baseUrl<\/code> Pebble filter accomplishes the same thing, prepending the base URL to whatever is passed to it.<\/li>\n<li>Instead of manually building a URL, you can ask Orchid for the String URL to a page in your site with the <code>link()<\/code>\nfunction, and build a Markdown link using that.<\/li>\n<li>To prevent broken links, you can ask Orchid to build a full HTML anchor using the <code>anchor()<\/code> function. This uses the\nsame search query as used by the <code>link()<\/code> function, and you may optionally pass the text to include in the link as\nthe first parameter to this method.<\/li>\n<li>The same searches which generate single links can also be used to locate lists of pages from your Orchid site, using\nthe <code>findAll()<\/code> function. You can iterate over the results of this list and build links to these pages for each item\nin the list, which allows you to make dynamic lists of page links.<\/li>\n<li>The <code>link()<\/code>, <code>anchor()<\/code>, and <code>findAll()<\/code> functions also accept the optional <code>collectionType<\/code> and <code>collectionId<\/code>\nparameters, which filter the results and can be used to narrow your search to exactly the pages you want.<\/li>\n<\/ol>\n"
              }]
            },
            "heart-of-the-front-matter": {
              "ownKey": "heart-of-the-front-matter",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "heart-of-the-front-matter",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/heart-of-the-front-matter"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "link-all-the-things",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/link-all-the-things"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "homepage-and-static-pages",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/homepage-and-static-pages"
                },
                "description": "Practice using Front Matter to customize your site and use Pebble to make your content more dynamic.",
                "title": "The Heart of the (Front) Matter",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>Last tutorial we started to get our feet wet adding pages to our site and customizing their content. In this tutorial,\nI will introduce you to Front Matter and Page Templates, and show you how to use this to increase consistency among the\npages in your Orchid site.<\/p>\n<p>Before continuing, make sure you have followed along with the previous tutorial and have started your local Orchid\nserver with <code>gradle orchidServe<\/code>. We will be building on that example in this tutorial.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/03\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"front-matter\"><a href=\"#front-matter\" id=\"front-matter\" class=\"anchor\"><\/a>Front Matter<\/h2>\n<p>If you've worked with other static site generators, you're probably very familiar with Front Matter. Orchid uses Front\nMatter just like the other tools, but there are a few special things that Orchid does with Front Matter, so don't\nskip ahead just yet!<\/p>\n<h3 id=\"what-is-front-matter\"><a href=\"#what-is-front-matter\" id=\"what-is-front-matter\" class=\"anchor\"><\/a>What Is Front Matter?<\/h3>\n<p>Front Matter is a way to add configuration values and other data to a single page. It comes as a block of YAML between\npairs of triple-dashed lines at the very beginning of a page. Let's see how we can use Front Matter to customize the\ntitle of our <code>houston.md<\/code> page. Go ahead and change the contents of <code>pages/locations/houston.md<\/code> to the following:<\/p>\n<pre><code class=\"language-text\">\n---\ntitle: 'H-Town'\n---\n## Location\n\nHouston, TX\n\n## Address\n \n1234, Example Dr.\nHouston, TX, 12345\n\n## Phone\n\n(123) 456-7890\n\n## Business Hours\n\nM-F: 6am - 9pm\nSa: 6am - 10pm\nSu: Closed\n<\/code><\/pre>\n<p>When Orchid has rebuilt your site, refresh the page and you'll notice that it's title now displays as &quot;H-Town&quot; instead\nof &quot;Houston&quot;. You will also notice that the Front Matter has been removed from the actual page content, so that it is\nnot embedded into your theme with the rest of the text in the page.<\/p>\n<p>Whenever Orchid sees a page with a Front Matter block, it will remove that block from the page content, parse the text\nwithin the Front Matter as YAML, and use that to configure the page. There are lots of configuration values available\nfor use in the Front Matter, and a later tutorial will show you how to find all of these values, but you are not limited\nto just those configuration values. You can put whatever kind of data you want in your Front Matter, and it will become\navailable for use just the same.<\/p>\n<h3 id=\"pre-compilation\"><a href=\"#pre-compilation\" id=\"pre-compilation\" class=\"anchor\"><\/a>Pre-Compilation<\/h3>\n<p>Now that we have Front Matter added to the top of our page, Orchid will start doing something really cool. For our\n<code>houston.md<\/code> page, before it gets processed as Markdown, it will be <em>precompiled<\/em> as Pebble. Pebble is the main\ntemplating language used by Orchid, and it has a syntax very similar to Liquid or Twig, which means it can render any\ntext content it wants.<\/p>\n<p>What this means for us is that we can use Pebble to add dynamic data into our Markdown, which can then be processed as\nMarkdown afterwards.<\/p>\n<p>To see how this works, let's move the info for our Houston business location into its Front Matter, and then use Pebble\nto &quot;inject&quot; that data back into our Markdown.<\/p>\n<pre><code class=\"language-text\">---\ncity: 'Houston'\nstate: 'TX'\npostal_code: '12345'\naddress: '1234, Example Dr.'\nphone: '(123) 456-7890'\nbusiness_hours:\n  - 'M-F: 6am - 9pm'\n  - 'Sa: 6am - 10pm'\n  - 'Su: Closed'\n---\n## Location\n\n{{ city }}, {{ state }}\n\n## Address\n \n{{ address }}\n{{ city }}, {{ state }} {{ postal_code }}\n\n## Phone\n\n{{ phone }}\n\n## Business Hours\n\n{% for hours in business_hours %}\n- {{ hours }}\n{% endfor %}\n\n<\/code><\/pre>\n<p>It should be pretty obvious what's going on in this page now. All the tags that look like\n<code>{{ city }}<\/code> will print that variable into the page at that spot. There are also <em>tags<\/em>,\nsuch as the <code>{% for %}<\/code> and <code>{% if %}<\/code> tags, which will\niterate over the data or control which sections of content get displayed. This makes it possible to use Pebble kind-of\nlike a full programming language, and because it runs before the page is converted to Markdown, you can use it to build\nmore complex and powerful Markdown pages much more easily.<\/p>\n<p>This precompilation step is only performed for pages that have a Front Matter block, and it is entirely optional.\nHowever, in some cases you may find Pebble to make the underlying page format unparseable and may wish to disable it. If\nyou need to have Front Matter but don't want the rest of the page precompiled, you can set <code>precompile<\/code> to <code>false<\/code> in\nthe Front Matter. Alternatively, you may precompile it as a different language by setting <code>precompileAs<\/code> to the desired\nfile extension.<\/p>\n<p>Alright, so now that we've got our Houston page set up with Front Matter and being precompiled as Pebble, we should\nprobably do the same with our other locations pages as well.<\/p>\n<pre><code class=\"language-text\">---\ncity: 'Austin'\nstate: 'TX'\npostal_code: '12345'\naddress: '1234, Example Dr.'\nphone: '(123) 456-7890'\nbusiness_hours:\n  - 'M-F: 6am - 9pm'\n  - 'Sa: 6am - 10pm'\n  - 'Su: Closed'\n---\n## Location\n\n{{ city }}, {{ state }}\n\n## Address\n \n{{ address }}\n{{ city }}, {{ state }} {{ postal_code }}\n\n## Phone\n\n{{ phone }}\n\n## Business Hours\n\n{% for hours in business_hours %}\n- {{ hours }}\n{% endfor %}\n\n<\/code><\/pre>\n<pre><code class=\"language-text\">---\ncity: 'Dallas'\nstate: 'TX'\npostal_code: '12345'\naddress: '1234, Example Dr.'\nphone: '(123) 456-7890'\nbusiness_hours:\n  - 'M-F: 6am - 9pm'\n  - 'Sa: 6am - 10pm'\n  - 'Su: Closed'\n---\n## Location\n\n{{ city }}, {{ state }}\n\n## Address\n \n{{ address }}\n{{ city }}, {{ state }} {{ postal_code }}\n\n## Phone\n\n{{ phone }}\n\n## Business Hours\n\n{% for hours in business_hours %}\n- {{ hours }}\n{% endfor %}\n\n<\/code><\/pre>\n<p>But now you'll notice that the main content of all three of our pages is the exact same! We've managed to move all the\ndata into our Front Matter to make it easier to manage, but trying to keep all our locations pages looking the same will\nbe difficult if we have to change every page whenever we want to update it.<\/p>\n<p>Most SSGs and CMSs would address this with theme layouts. You would add a new layout for these locations pages, and in\nthat layout you'd put all the structured data that we currently have in our page content. While Orchid does have theme\nlayouts (we'll get to that in another tutorial), this can cause an issue as they aren't very reusable, and you end up\nwith a lot of single-use layouts that are all difficult to maintain or make site-wide changes with.<\/p>\n<p>To address this, Orchid introduces several new mechanisms for managing the content on a page that are maintainable,\nreusable, and composable. The technique we'll talk about in the rest of this tutorial is called <strong>page templates<\/strong>.<\/p>\n<h2 id=\"page-templates\"><a href=\"#page-templates\" id=\"page-templates\" class=\"anchor\"><\/a>Page Templates<\/h2>\n<h3 id=\"what-are-page-templates\"><a href=\"#what-are-page-templates\" id=\"what-are-page-templates\" class=\"anchor\"><\/a>What Are Page Templates?<\/h3>\n<p>Put simply, page templates are kind of like your theme's layout, except they are only concerned with the small section\nof the layout that displays your page content. Typically, a full layout also includes menus, sidebars, widget areas, and\nalso renders the full HTML structure, but a <em>page template<\/em> just structures the <em>page content<\/em>. While a normal CMS would\nhave you create <code>page-single.peb<\/code> and <code>page-sidebar.peb<\/code>, you can now just create a <code>pages/page.peb<\/code> template for your\npage content and then embed that in the <code>layouts/single.peb<\/code> or <code>layouts/sidebar.peb<\/code> theme layout.<\/p>\n<p>The different might seem insignificant in this small example, but for sites with many different types of pages and\nlayout styles, you will actually use exponentially fewer templates than the alternative. Consider that a site with 10\npage types and 3 different layouts would need <strong>30 templates<\/strong> in the traditional manner, but only 13 with Orchid! For\neven larger sites, the savings are even larger, and the maintenance burden will decrease significantly.<\/p>\n<h3 id=\"creating-a-page-template\"><a href=\"#creating-a-page-template\" id=\"creating-a-page-template\" class=\"anchor\"><\/a>Creating a Page Template<\/h3>\n<p>The first thing we'll need to do is make ourselves a new page template, and then we'll tell Orchid to use that template\ninstead of the default one. So make a page in <code>templates/pages/location.peb<\/code> and add the following content.<\/p>\n<pre><code class=\"language-twig\">{% filter compileAs('md') %}\n## Location\n\n{{ city }}, {{ state }}\n\n## Address\n\n{{ address }}\n{{ city }}, {{ state }} {{ postal_code }}\n\n## Phone\n\n{{ phone }}\n\n## Business Hours\n\n{% for hours in business_hours %}\n- {{ hours }}\n{% endfor %}\n\n---\n{% endfilter %}\n\n{{ page.content | raw }}\n\n<\/code><\/pre>\n<p>Notice that this new file has the <code>.peb<\/code> extension, which means it will be compiled as Pebble. Unlike our Markdown\npages, page templates should use the file extension for a <em>templating<\/em> language, like <code>.peb<\/code>, and it does not support\nprecompiling. This is because the page template is actually considered part of the <em>theme<\/em> and not part of the\n<em>page content<\/em>.<\/p>\n<p>As such, when setting up your page template, you should design it as if it were part of the theme, and include\n<code>{{ page.content | raw }}<\/code> at the appropriate area within that template. <code>page.content<\/code>\nis what is actually precompiling and rendering the Markdown of your page, and since Pebble is a <em>safe<\/em> templating\nlanguage, it will automatically escape the HTML page content to prevent cross-site-scripting (XSS) unless you use the\n<code>| raw<\/code> filter as it is printed out.<\/p>\n<h3 id=\"using-your-custom-page-template\"><a href=\"#using-your-custom-page-template\" id=\"using-your-custom-page-template\" class=\"anchor\"><\/a>Using Your Custom Page Template<\/h3>\n<p>To use our custom page template, we must add a property in each page's Front Matter telling Orchid which template we\nwant to use. The <code>templates<\/code> property accepts either a String or an array, and the first template that Orchid finds will\nbe loaded and used as the page template.<\/p>\n<pre><code class=\"language-text\">\n---\ncity: 'Houston'\nstate: 'TX'\npostal_code: '12345'\naddress: '1234, Example Dr.'\nphone: '(123) 456-7890'\nbusiness_hours:\n  - 'M-F: 6am - 9pm'\n  - 'Sa: 6am - 10pm'\n  - 'Su: Closed'\ntemplate: 'location'\n---\n\nHouston, TX location coming soon.\n<\/code><\/pre>\n<p>Orchid will look for the page template in several places. First it will look for a template in <code>templates/<\/code> that matches\nthe exact file path and filename. If that doesn't exist, it will look for any file with that filename in the\n<code>templates/pages/<\/code> directory. In either case, if a file extension is not provided, it will assume <code>.peb<\/code>. So by passing\n<code>location<\/code> as the template, our custom page template at <code>templates/pages/location.peb<\/code> will be used.<\/p>\n<p>Any time that you specify a custom template, it will be preferred to the defaults for that page type. Plugins with\nspecial page types may set special formats for looking up page templates without needing to specify it. For example, the\norchid-posts-feature plugin will default to looking for <code>post-[category].peb<\/code> or <code>post.peb<\/code> before falling back to <code>page.peb<\/code>.\nAll pages, if not specified by the plugin or by the user, fall back to using <code>page.peb<\/code>, which is automatically provided\nfor you.<\/p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>Let's review what we've learned in this tutorial.<\/p>\n<ol>\n<li>Orchid can render Markdown and other files just fine on their own, but you can optionally add a Front Matter block at\nthe start of the page to configure it or add custom data.<\/li>\n<li>When a Front Matter block is present in a page, it will be first precompiled as a Pebble template. You can use any\nPebble tags or inject any page or site variables into the content before it gets processed as Markdown.<\/li>\n<li>To increase consistency and ease the maintenance burden of large sites, you can use page templates in addition to\ntheme layouts to give structure to page content. Page templates can be mixed-and-matched with theme layouts to\nprovide great flexibility with many fewer templates than layouts alone.<\/li>\n<li>You can choose the page template with the <code>templates<\/code> property in a page's Front Matter. This can be a string or an\narray, and templates are typically kept in the <code>templates/pages/<\/code> directory.<\/li>\n<li>Plugins may provide their own formats for looking up page templates, but setting one yourself will override the\npreference of the plugin.<\/li>\n<\/ol>\n"
              }]
            },
            "amazing-admin-panel": {
              "ownKey": "amazing-admin-panel",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "amazing-admin-panel",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/amazing-admin-panel"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "how-to-document-kotlin",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/how-to-document-kotlin"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "all-about-archetypes",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/all-about-archetypes"
                },
                "description": "See how Orchid's unique admin panel documents your build for you.",
                "title": "The Amazing, Auto-Documenting Admin Panel",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>If you've been following along with these tutorials or been exploring some of the other great Orchid plugins, you may be\nstarting to realize just how much you can do with Orchid, and especially how difficult it can be to remember exactly how\nto use it all. It can be a bit tricky to navigate the documentation to find that one little snippet of code you need,\nand you have to hope that it is up-to-date and hasn't changed if you're not yet on the latest version.<\/p>\n<p>Fortunately, Orchid has a solution for all of these problems: an admin panel which brings the most relevant\ndocumentation to you in one central location, perfectly up-to-date with your version of Orchid. This tutorial will walk\nyou through setting up this plugin and navigating the admin panel to help you find what you need. And it<\/p>\n<p>Before continuing, make sure you have followed along with the previous tutorial and have started your local Orchid\nserver with <code>gradle orchidServe<\/code>. We will be building on that example in this tutorial.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/07\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"first-things-first\"><a href=\"#first-things-first\" id=\"first-things-first\" class=\"anchor\"><\/a>First Things First<\/h2>\n<p>Orchid is fundamentally created to be flexible and pluggable. The static pages we've been using to build our site is\nactually just a plugin, building on the core framework with an opinionated way to make static pages! This allows you to\npick-and-choose exactly the features you want to use in your site, and not be given a ton of stuff you'll never use.<\/p>\n<p>Orchid's admin panel is another feature that is available as a plugin, and is not included by default. Let's go ahead\nand get our site set up with this new plugin.<\/p>\n<h3 id=\"adding-the-plugin-docs-plugin\"><a href=\"#adding-the-plugin-docs-plugin\" id=\"adding-the-plugin-docs-plugin\" class=\"anchor\"><\/a>Adding the &quot;Plugin Docs&quot; plugin<\/h3>\n<p>As Orchid is a Java-based framework, it takes full advantage of several well-known tools for managing plugins. Plugins\nare distributed as a normal Maven dependencies, and when included on the classpath are bootstrapped automatically with\nno further configuration needed.<\/p>\n<p>What this means for you is that adding a single line to your <code>build.gradle<\/code> is all you need to do to install the admin\npanel. Add the following dependency, and you're good to go!<\/p>\n<pre><code class=\"language-groovy\">orchidCompile &quot;io.github.copper-leaf.orchid:OrchidPluginDocs:0.21.1&quot;\n<\/code><\/pre>\n<p>You'll need to fully restart Orchid in order for the new dependency to be added, but once it's started back up try\nvisiting <a href=\"http://localhost:8080/admin\">http://localhost:8080/admin<\/a> to see your shiny new admin panel, and then read on\nto learn how to use it!<\/p>\n<h2 id=\"admin-panel-features\"><a href=\"#admin-panel-features\" id=\"admin-panel-features\" class=\"anchor\"><\/a>Admin Panel Features<\/h2>\n<h3 id=\"collection-inspection\"><a href=\"#collection-inspection\" id=\"collection-inspection\" class=\"anchor\"><\/a>Collection Inspection<\/h3>\n<p>In the previous tutorials I've shown you how to create links to pages in your site, from both template function and menu\nitems. I just told you how to scope your page links so they select exactly the page you expect, which is a unique\ncombination of <code>itemId<\/code> (the page title), <code>collectionId<\/code> and <code>collectionType<\/code>.<\/p>\n<p>I showed you how to find these <code>collectionId<\/code> and <code>collectionType<\/code> values for the Pages plugin, but what if I never told\nthem to you? How would you ever know what the <code>collectionId<\/code> and <code>collectionType<\/code> is? This is the first problem that\nOrchid's admin panel can solve for you.<\/p>\n<p>Let's start by opening up the &quot;manage panel&quot;, by clicking &quot;Manage&quot; on the top-right of the page. It will open up a popup\npanel that looks like the following:<\/p>\n<p class=\"image-preview\"><img src=\"https://orchid.run/wiki/learn/tutorials/media/admin-01.png\" alt=\"manage panel\" /><\/p>\n<p>There is a lot of cool stuff you can find in this panel, but the important bit is the table to the bottom-right of it.\nThe headers of this table are exactly the <code>collectionId<\/code> and <code>collectionType<\/code> we didn't know how to find before! You\nknew that you had collections for the &quot;page groups&quot;, but there are several other collections in there too!<\/p>\n<p>Each plugin that produces pages will also create collections for those pages, and they will all be reflected in this\nlist. That means that this table is able to fully capture <em>all<\/em> collections of pages from <em>all<\/em> plugins you install or\ncreate, not just the official Orchid plugins. This fact alone can be quite helpful as it becomes a quick reference for\nfinding the exact values needed to filter page links, but there is more to these collections that Orchid's admin panel\ncan unlock. Let's click on the &quot;pages, locations&quot; row of that table, you should be taken to a page that looks like this:<\/p>\n<p class=\"image-preview\"><img src=\"https://orchid.run/wiki/learn/tutorials/media/admin-02.png\" alt=\"collection details\" /><\/p>\n<p>There's a lot going on in this page, but let's break it down a bit. It has 4 tabs, but we'll just look at the first one\nfor now. I'll get back to the other three tabs in just a bit.<\/p>\n<p>This page starts with a description of the collection. I mentioned above that the <code>itemId<\/code> is typically the title of the\npage. This value is actually determined by the collection, and it will be described in this section. So the &quot;manage\npanel&quot; will show you the <code>collectionId<\/code> and <code>collectionType<\/code>, and clicking into it will tell you how to link to its'\n<code>itemId<\/code> which is the last piece needed to uniquely link to a page. There's no magic to locating pages in Orchid, it's\nall easily accessible in the Admin panel!<\/p>\n<p>Below the description, you will see a list of related collections. These are collections that share a <code>collectionType<\/code>\nwith the one you're currently viewing. A single plugin will typically produce several collections, and they should all\nbe related to one another by having a common <code>collectionType<\/code>. This sidebar makes it easy to explore all collections\nfrom a single plugin.<\/p>\n<p>Next to the list of related collections, you'll find a table containing all the pages contained within the current\ncollection which are able to be selected individually with a corresponding <code>itemId<\/code>. These pages show its title (because\nit is commonly used as the <code>itemId<\/code>), and also its URL so you can be sure you know which page it is. Clicking on any row\nin this table will take you to that page.<\/p>\n<h3 id=\"plugin-discovery-and-documentation\"><a href=\"#plugin-discovery-and-documentation\" id=\"plugin-discovery-and-documentation\" class=\"anchor\"><\/a>Plugin Discovery and Documentation<\/h3>\n<p>Now that we've got an understanding of how to find all collections that your plugins generate, let's find out what other\nkind of information the admin panel offers us.<\/p>\n<p>In tutorial 5, we learned how Orchid generates your site menus for you, and I introduced a few different menu items that\nare useful for creating dynamic menus. But just like the collections, how would you have been able to find these\ndifferent menu item types if I hadn't told you? And then how would you know what configuration options to use for them\nwithout me telling you?<\/p>\n<p>Normally, you would have to go to the documentation for each plugin you're using, and search through it to find the\nexact information you need. But this has several issues: you're trusting that the documentation for that plugin is\nup-to-date, that it contains no errors, and even that the developer even has documentation! But even worse, what if\nyou're using an older version of the plugin than is being documented, so that the public documentation is actually\n<em>different<\/em> from your version? Well then you're completely out-of-luck!<\/p>\n<p>Fortunately, Orchid does not suffer from any of these problems because the admin panel brings all of this information\nto you automatically, perfectly up-to-date with your current plugins <em>no matter their version<\/em>. So let's find out where\nto get all this information!<\/p>\n<p>Click the &quot;hamburger icon&quot; at the top-right of the screen. It will open a drawer that looks like the following:<\/p>\n<p class=\"image-preview\"><img src=\"https://orchid.run/wiki/learn/tutorials/media/admin-03.png\" alt=\"plugin drawer\" /><\/p>\n<p>This drawer contains a list of <em>everything<\/em> that is registered by <em>all<\/em> plugins, grouped by their type. There are two\ntabs in this drawer. The first contains the &quot;Common Types&quot;, which are the objects you're most likely to need to\nconfigure. You'll see categories in there for &quot;pages&quot;, &quot;menu items&quot;, and a few more. The other tab, &quot;All Types&quot; contains\nall these common types, and many other objects that might be of interest to plugin or theme developers.<\/p>\n<p>But let's click the &quot;Menu Items&quot; row. It will expand to show a list of all menu items that are available, along with a\nshort description of each. You'll notice this list includes all of the &quot;link&quot;, &quot;page&quot;, &quot;static pages&quot;, and &quot;page IDs&quot;\nmenu items we used in that tutorial. Clicking into one of these items, such as &quot;link&quot;, will take you to a page that\nlooks like the following:<\/p>\n<p class=\"image-preview\"><img src=\"https://orchid.run/wiki/learn/tutorials/media/admin-04.png\" alt=\"link menu item\" /><\/p>\n<p>You'll notice that this page includes the same four tabs that were on the collections pages. That's because Orchid uses\na unified system for managing metadata, which allows everything to be automatically documented in a similar way.<\/p>\n<p>The first tab is always an &quot;overview&quot; of that item. Menu items will all include a short description to help you\nunderstand what they do. Some other types of objects, like components, might include code snippets to help you get\nstarted using them.<\/p>\n<p>But the magic starts to become apparent on the next two tabs: &quot;own options&quot; and &quot;inherited options&quot;. They both contain a\ntable of options for that item, and looks like the following:<\/p>\n<p class=\"image-preview\"><img src=\"https://orchid.run/wiki/learn/tutorials/media/admin-05.png\" alt=\"link menu item\" /><\/p>\n<p>This like tells you exactly what options can be used to set up your &quot;link&quot; menu item. Remember in the menu items\ntutorial I just told you to add the <code>title<\/code> and <code>url<\/code> options to configure it correctly? Well this is how you find that\nout! It also includes a short description for each option, and the default value for each of these options so you know\nhow it will behave if you don't provide that option. The &quot;inherited options&quot; tab will show you the configurations\navailable to all menu item types, not just the &quot;link&quot; type.<\/p>\n<p>The last tab, &quot;archetypes&quot;, is empty for the &quot;link&quot; menu item. But recall that the previous tutorial showed you how to\nuse archetypes to more easily configure batches of static pages all at one, so let's check out this tab on the\n&quot;Static Page&quot; page. You can find it under the &quot;pages&quot; link in the drawer, and the &quot;archetypes&quot; tab should look like the\nfollowing:<\/p>\n<p class=\"image-preview\"><img src=\"https://orchid.run/wiki/learn/tutorials/media/admin-06.png\" alt=\"link menu item\" /><\/p>\n<p>This tab shows a table of all the possible Archetypes for each item, if they exist, along with short descriptions of\neach. This will help you to know how you can leverage Archetypes to minimize repeated configurations in your site. This\nlist is also ordered such that the archetypes later in the list override those earlier in the list.<\/p>\n<p>Together, the overview, options, and archetypes for Orchid's various objects give you a complete picture for how to use\nthat object to customize your site. Rather than going to the docs websites for all your plugins, Orchid brings all that\ndocumentation to you in one central location to make it easier than ever to get building your site, and helps you\ndiscover features that might otherwise be missed.<\/p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>There is a lot more than you can do with the admin panel, and different plugin may also include their own unique\nfeatures, but collection inspection and plugin discovery/documentation are definitely the among the best features of\nOrchid's admin panel. I would encourage you to poke around some of the other plugin objects and get comfortable\nnavigating the admin panel, because it will be an indispensable tool as you build out your site!<\/p>\n"
              }]
            },
            "whats-on-the-menu": {
              "ownKey": "whats-on-the-menu",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "whats-on-the-menu",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/whats-on-the-menu"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "all-about-archetypes",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/all-about-archetypes"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "link-all-the-things",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/link-all-the-things"
                },
                "description": "Learn how to configure your theme and generate dynamic menus.",
                "title": "What's on the Menu?",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>Now that we have an understanding of how Orchid uses collections to find pages, let's apply this knowledge with a few\nnew concepts in order to build dynamic menus.<\/p>\n<p>Before continuing, make sure you have followed along with the previous tutorial and have started your local Orchid\nserver with <code>gradle orchidServe<\/code>. We will be building on that example in this tutorial.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/05\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"scaling-your-site\"><a href=\"#scaling-your-site\" id=\"scaling-your-site\" class=\"anchor\"><\/a>Scaling Your Site<\/h2>\n<p>Our site currently has five pages in it: one for each of our business's locations in Houston, Dallas, and Austin, which\nare considered to be in the &quot;locations&quot; page group, since they all sit at <code>/locations/...<\/code> in the site URL structure;\none more page listing all locations, and the homepage. As our business grows, we will want to add more content to our\nsite so that customers can find everything they need online. So let's add a few more pages in a couple more page\n&quot;groups&quot; for our services and staff. Add the following pages to your site (you can leave these files empty for now).<\/p>\n<pre><code class=\"language-text\">└── pages/\n    ├── locations/\n    |   ├── houston.md\n    |   ├── dallas.md\n    |   └── austin.md\n    ├── services/\n    |   ├── home-repair.md\n    |   ├── electrical.md\n    |   └── security.md\n    └── staff/\n        ├── billy-bob.md\n        └── john-doe.md\n<\/code><\/pre>\n<p>As an additional exercise, try creating index pages for these groups as well.<\/p>\n<h2 id=\"theme-customization\"><a href=\"#theme-customization\" id=\"theme-customization\" class=\"anchor\"><\/a>Theme Customization<\/h2>\n<p>Before we start adding menus to our site, we first must get familiar with how to configure the site.<\/p>\n<p>Orchid has a special file in the root of your resources, <code>config.yml<\/code>. This file is a YAML config file, and in it, you\ncan place all the configuration you need. Here are some examples of things that can be customized from <code>config.yml<\/code>:<\/p>\n<ul>\n<li>Theme colors<\/li>\n<li>Theme menus<\/li>\n<li>Which plugins to include or exclude<\/li>\n<li>Plugin parameters<\/li>\n<li>Some core Orchid functionality<\/li>\n<\/ul>\n<p>To start things off, let's pick a better color for our theme. Since we're using the BsDoc theme in this example, add the\nfollowing to our <code>config.yml<\/code> file:<\/p>\n<pre><code class=\"language-yaml\">theme:\n  primaryColor: '#dd9999'\n<\/code><\/pre>\n<p>Once your site rebuilds, you'll notice everything that was previously purple is now a sandy red! The BsDoc theme is set\nup to recompile its SCSS stylesheets injecting configuration values for its primary color. In a later tutorial, I will\ngo more in-depth about this process and how to find all the configurations available in any theme, but for now it\nsuffices to know <code>config.yml<\/code> is where you go to customize your site and your theme.<\/p>\n<p>Now we're ready to start building our site's menu!<\/p>\n<h2 id=\"theme-menus\"><a href=\"#theme-menus\" id=\"theme-menus\" class=\"anchor\"><\/a>Theme Menus<\/h2>\n<p>Most themes in Orchid will have at least one menu area, your site's primary navigation, and some will include menus for\nother areas, such as the footer. Regardless of where a menu is in your theme, it will always be configured in the same\nway: in your theme's configuration in <code>config.yml<\/code>. Let's add a menu to the theme configuration we used earlier:<\/p>\n<h3 id=\"link-menu-item\"><a href=\"#link-menu-item\" id=\"link-menu-item\" class=\"anchor\"><\/a>Link Menu Item<\/h3>\n<pre><code class=\"language-yaml\">theme:\n  primaryColor: '#dd9999'\n  menu:\n    - type: 'link'\n      title: 'Locations'\n      url: 'http://localhost:8080/locations'\n    - type: 'link'\n      title: 'Services'\n      url: 'http://localhost:8080/services'\n    - type: 'link'\n      title: 'Staff'\n      url: 'http://localhost:8080/staff'\n<\/code><\/pre>\n<p>This will generate a menu with 3 items in the theme's main navbar, with each one pointing to the index page for each of\nour page groups. Let's break the configuration down a bit more because the structure of this configuration is used in\nmany other places throughout Orchid as well.<\/p>\n<p>The <code>menu<\/code> property of our <code>theme<\/code> object in <code>config.yml<\/code> should be a list of menu items. Each menu item should include\na <code>type<\/code> field, which tells Orchid the type of menu item to use. There are many different menu item types; some examples\nare <code>link<\/code> (used in the example) which creates a menu item pointing to an arbitrary URL, and <code>page<\/code> which looks up a\npage in your site and links to it.<\/p>\n<p>Menu items are dynamically evaluated on each page and may add any number of items. <code>url<\/code> and <code>page<\/code> will each add 0 or 1\nitem to the menu (depending on whether they are configured correctly and a page can be found), but some other types like\n<code>pages<\/code> will add a menu item for each static page set up in your site pointing to that page. Not only that, but menu\nitems are inherently recursive, where a menu item might contain a submenu, which might contain a submenu, and so on.\nNote that not every theme will support fully-recursive menus, and will commonly only support 1 or two levels of nesting.<\/p>\n<p>Each type of menu item can also declare any number of options for additional customization. The <code>link<\/code> item above\nrequires 2 additional properties: a <code>url<\/code> to link to, and a <code>title<\/code>. But these <code>link<\/code> items are not ideal for the same\nreasons described in the previous tutorial: the links are hardcoded to the development URL. Let's change these menu\nitems to allow Orchid to generate the actual link dynamically, changing for development or production seamlessly as\nneeded.<\/p>\n<h3 id=\"page-menu-item\"><a href=\"#page-menu-item\" id=\"page-menu-item\" class=\"anchor\"><\/a>Page Menu Item<\/h3>\n<pre><code class=\"language-yaml\">theme:\n  primaryColor: '#dd9999'\n  menu:\n    - type: 'page'\n      itemId: 'Locations'\n    - type: 'page'\n      itemId: 'Services'\n    - type: 'page'\n      itemId: 'Staff'\n<\/code><\/pre>\n<p>This time, instead of using <code>link<\/code> menu items we're using <code>page<\/code>. Hopefully, you recognize the <code>itemId<\/code> property on\nthese menu items; if not, you may want to go back through the previous tutorial to learn about linking functions. That's\nbecause the <code>page<\/code> menu item type (and many others) locate and link to pages in the exact same way as described in that\ntutorial. But as a quick refresher: you can generally link the proper page in your site by setting the <code>itemId<\/code> to the\ntitle of the page you want to link to, and <code>collectionType<\/code> and <code>collectionId<\/code> can help make sure you're linking to\nexactly the page you expect by filtering the pages to those in a specific collection.<\/p>\n<h2 id=\"page-menus\"><a href=\"#page-menus\" id=\"page-menus\" class=\"anchor\"><\/a>Page Menus<\/h2>\n<p>Themes aren't the only things that can define menus. It is very common for individual pages to also include menus that\ndescribe the content just on that page, or for linking to its related pages. Page menus are configured in exactly the\nsame way as theme menus, it's just in a page's Front Matter instead of <code>config.yml<\/code>. Apart from that, there is\nabsolutely no difference in how menus are generated between the two. So let's look at a couple other menu item types\nthat will really take your site's menus to the next level!<\/p>\n<h3 id=\"static-pages-menu-item\"><a href=\"#static-pages-menu-item\" id=\"static-pages-menu-item\" class=\"anchor\"><\/a>Static Pages Menu Item<\/h3>\n<p>The Pages plugin that we're using to set up our locations, services, and staff pages also includes a <code>pages<\/code> menu item\ntype. This menu item type will display all the pages that the plugin is generating, optionally filtering it to a\nspecific page group. Let's use this menu item type so that each page creates a menu which links to all the other pages\nin its group.<\/p>\n<p>In all the locations pages, include the following snippet in its Front Matter:<\/p>\n<pre><code class=\"language-yaml\">\n---\nmenu:\n  - type: 'pages'\n    group: 'locations'\n---\n<\/code><\/pre>\n<p>Now, when navigating to any of our Locations pages, you'll see a sidebar with links to all of our locations. You'll also\nnotice that the BsDoc theme highlights the menu item if it matches the page you're currently on, so you always know\nwhere you are in the site! By specifying the <code>group<\/code> in the menu item config, only &quot;locations&quot; pages are added to the\nmenu, but leaving it out will include <em>all<\/em> static pages.<\/p>\n<p>You can do the same with the other page groups, but I'll leave that as an exercise for you.<\/p>\n<h3 id=\"page-ids-menu-item\"><a href=\"#page-ids-menu-item\" id=\"page-ids-menu-item\" class=\"anchor\"><\/a>Page Ids Menu Item<\/h3>\n<p>Now that we have our locations pages linking amongst one another, now let's get each page generating links just for\nitself. Rather than linking to an external URL or an internal page, menu items can also link to IDs within the page. The\n<code>pageIds<\/code> menu item, also included as part of the Static Pages plugin, will find all headings with IDs in a page's\ncontent and generate menu items anchored to that ID. Orchid's Markdown processor is set up to generate IDs for each\nheading, so let's start by adding some sections to our locations pages with headings to link to.<\/p>\n<p>For example, in <code>pages/locations/houston.md<\/code> let's add the following content. You can add similar content to the other\nlocations pages as another exercise if you wish.<\/p>\n<pre><code class=\"language-md\"># About Our Houston Location\n\nDuis et mauris in leo aliquam bibendum et ut purus. Nulla sagittis volutpat massa non vestibulum.  \n\n## Specialty Services\n\nPellentesque lorem magna, porttitor sed massa vitae, vestibulum volutpat magna. \n\n## All Staff\n\nVestibulum tristique finibus est, sed suscipit dui commodo quis. Duis condimentum in neque at auctor. \n\n# Reviews\n\n- Sed venenatis nibh a quam efficitur accumsan. \n- Vivamus in consectetur magna. \n- Donec viverra lorem nunc, eu finibus erat posuere ut. \n- Sed in leo ac est suscipit euismod a vitae sem.\n<\/code><\/pre>\n<p>Now let's set add the <code>pageIds<\/code> menu item to this page. I've also added a <code>separator<\/code> menu item between the page's own\nlinks and those that link to other locations pages for clarity.<\/p>\n<pre><code class=\"language-yaml\">\n---\nmenu:\n  - type: 'pageIds'\n    structure: 'nested'\n  - type: 'separator'\n    title: 'All Locations'\n  - type: 'pages'\n    group: 'locations'\n---\n<\/code><\/pre>\n<p>Perfect! Orchid is now reading through the content on that page, pulling out all the IDs it finds, and dynamically\ngenerating menu items that will scroll the webpage to that location in its content. You can customize these page ID menu\nitems to be either nested (such that <code>h2<\/code> headers are created as a submenu of the previous <code>h1<\/code>), or flat with no\nsubmenus.<\/p>\n<p>One important thing to note here is that only the intrinsic page content is considered when generating these page ID\nlinks. IDs from the theme or page templates are not looked at, but its just the actual content within the Markdown file\nthat is used.<\/p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>Now our site is starting to look and function like a complete website! Not only do we have lots of pages that are easy\nto customize individually, but we now have a way to dynamically generate menus which will link to all of our other\nlocations, no matter how many new locations we add!<\/p>\n<p>Let's go back and review everything we learned in this tutorial.<\/p>\n<ol>\n<li><code>config.yml<\/code> is the central location for configuring your site's theme, including colors and menus.<\/li>\n<li>The <code>theme.menu<\/code> property in <code>config.yml<\/code> sets up the primary site theme. In the BsDoc theme, this is the main\nnavbar.<\/li>\n<li>Menu configuration accepts a list of menu item objects. The <code>type<\/code> property of each object tells Orchid which type of\nmenu item to create and each item type can also declare its own options for further customization.<\/li>\n<li>Some menu items types will add just one item to the generated menu, some will add many.<\/li>\n<li>Menu items may link to external URLs, lookup and link internally to pages within your site, or link to specific IDs\nwithin a single page. Looking up internal page links uses the same convention of <code>itemId<\/code>, <code>collectionType<\/code>,\n<code>collectionId<\/code> for locating pages as the linking functions do.<\/li>\n<\/ol>\n"
              }]
            },
            "your-first-orchid-site": {
              "ownKey": "your-first-orchid-site",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "your-first-orchid-site",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/your-first-orchid-site"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "homepage-and-static-pages",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/homepage-and-static-pages"
                },
                "description": "Learn the basics of setting up and building an Orchid site with Gradle.",
                "title": "Your First Orchid Site",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>So you've decided to give <a href=\"https://orchid.run/\">Orchid<\/a> a try? Great! Follow along with this guide to get your\nfirst Orchid site set up, and learn the basics of what you can do with Orchid.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/01\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"first-steps\"><a href=\"#first-steps\" id=\"first-steps\" class=\"anchor\"><\/a>First Steps<\/h2>\n<p>Orchid is a tool built in Java and Kotlin, and is designed to be run from Gradle. Gradle is a build tool that uses\nGroovy scripts to configure your build. While it is a super-powerful tool, it can be pretty complex to use and configure\non its own, which is why Orchid has an official Gradle plugin that makes it easy for you to get up an running with\nOrchid even if you aren't familiar with Gradle.<\/p>\n<h3 id=\"install-gradle\"><a href=\"#install-gradle\" id=\"install-gradle\" class=\"anchor\"><\/a>Install Gradle<\/h3>\n<p>To start, we'll need to install Gradle. If you're on a Mac, installing Gradle is easily done with Homebrew.<\/p>\n<pre><code class=\"language-bash\"># Install Homebrew\n/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n\n# Use Homebrew to install Gradle \nbrew install gradle\n<\/code><\/pre>\n<p>If you're on another operating system, you can find the steps to install it for your system on Gradle's\n<a href=\"https://gradle.org/install/\">installation page<\/a>.<\/p>\n<h3 id=\"create-a-gradle-project\"><a href=\"#create-a-gradle-project\" id=\"create-a-gradle-project\" class=\"anchor\"><\/a>Create a Gradle project<\/h3>\n<p>Now that you've got Gradle installed, let's go to an empty directory where you want to work on your Orchid site.<\/p>\n<pre><code class=\"language-bash\">cd ~/Documents/personal/orchid\n<\/code><\/pre>\n<p>In this empty folder, run the following command, which will initialize a Gradle project for you and set up all the files\nand folders it needs.<\/p>\n<pre><code class=\"language-bash\">gradle init --type java-library\n<\/code><\/pre>\n<p>This will make your project look like:<\/p>\n<pre><code class=\"language-bash\">|__.gradle/\n|__gradle/\n|__gradlew\n|__build.gradle\n|__gradlew.bat\n|__settings.gradle\n|__src\n|____test/\n|____main/\n<\/code><\/pre>\n<h3 id=\"add-orchid-to-your-gradle-project\"><a href=\"#add-orchid-to-your-gradle-project\" id=\"add-orchid-to-your-gradle-project\" class=\"anchor\"><\/a>Add Orchid to your Gradle project<\/h3>\n<p>Now that we've got our Gradle project set up, let's configure it to be able to run Orchid. First, we'll need to open up\n<code>build.gradle<\/code> and find the <code>plugins<\/code> section.<\/p>\n<pre><code class=\"language-groovy\">plugins {\n    // Apply the java-library plugin to add support for Java Library\n    id 'java-library'\n}\n<\/code><\/pre>\n<p>Let's add the <code>com.eden.orchidPlugin<\/code> plugin to this block.<\/p>\n<pre><code class=\"language-groovy\">plugins {\n    // Apply the java-library plugin to add support for Java Library\n    id 'java-library'\n    id 'com.eden.orchidPlugin' version '0.21.1'\n}\n<\/code><\/pre>\n<p>By itself, the Orchid Gradle Plugin isn't quite enough to get Orchid running. We'll also need to tell Gradle:<\/p>\n<ol>\n<li>The Orchid plugins and themes we want to include in our site<\/li>\n<li>Where it can find those plugins and themes<\/li>\n<li>Some basic configuration values so Orchid can run properly<\/li>\n<\/ol>\n<p>To do this, add the following lines to at the end of <code>build.gradle<\/code>.<\/p>\n<pre><code class=\"language-groovy\">// 1. Include desired official Orchid plugins and themes\ndependencies {\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-core:0.21.1&quot;\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-bsdoc-theme:0.21.1&quot;\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-pages-feature:0.21.1&quot;\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-asciidoc-feature:0.21.1&quot;\n}\n\n// 2. Get Orchid from Jcenter\nrepositories {\n    mavenCentral()\n}\n\n// 3. Use the 'BsDoc' theme, and view the site locally at 'http://localhost:8080'\norchid { \n    theme = &quot;BsDoc&quot;\n    baseUrl = &quot;http://localhost:8080&quot;\n}\n<\/code><\/pre>\n<h3 id=\"run-orchid\"><a href=\"#run-orchid\" id=\"run-orchid\" class=\"anchor\"><\/a>Run Orchid<\/h3>\n<p>You now have everything you need to run Orchid and view the site. Go back to your terminal and run the following command\nto start Orchid and have it host your site with its local HTTP server so you can preview it.<\/p>\n<pre><code class=\"language-bash\">gradle orchidServe\n<\/code><\/pre>\n<p>After a few seconds, you should be able to visit <a href=\"http://localhost:8080\">http://localhost:8080<\/a> in your browser to see\nyour very first Orchid site!<\/p>\n<h2 id=\"whats-really-going-on\"><a href=\"#whats-really-going-on\" id=\"whats-really-going-on\" class=\"anchor\"><\/a>What's Really Going On?<\/h2>\n<p>After starting Orchid, you'll see a lot of stuff get logged to the console. Let's step briefly through the output so you\ncan understand what's going on.<\/p>\n<pre><code class=\"language-text\">Using the following modules: \n--------------------\n * com.eden.orchid.StandardModule\n\nAuto-loaded modules: \n--------------------\n * com.eden.orchid.bsdoc.BsDocModule\n * com.eden.orchid.impl.compilers.markdown.FlexmarkModule\n * com.eden.orchid.impl.compilers.pebble.PebbleModule\n * com.eden.orchid.languages.asciidoc.AsciidocModule\n * com.eden.orchid.pages.PagesModule\n<\/code><\/pre>\n<p>This lets you know which plugins are currently being used. Orchid will auto-load any plugin included in your Gradle\n<code>dependencies<\/code> block, which themselves may include other plugins, and this will let you know exactly what's being used\nin your Orchid site.<\/p>\n<pre><code class=\"language-text\">Flag values: \n--------------------\n-adminTheme: Default\n-baseUrl: http://localhost:8080\n-defaultTemplateExtension: peb\n-dest: /path/to/your/site/build/docs/orchid\n-dryDeploy: false\n-environment: debug\n-logLevel: VERBOSE\n-port: 8080\n-src: /path/to/your/site/src/orchid/resources\n-task: serve\n-theme: BsDoc\n-version: unspecified\n<\/code><\/pre>\n<p>This shows the command-line flags passed to Orchid from Gradle. This may be helpful for debugging your build,\nespecially if it has been run in a CI environment.<\/p>\n<pre><code class=\"language-text\">[INFO] Orchid: Running Orchid version 0.21.1, site version unspecified in debug environment\n[INFO] OrchidWebserver: Webserver Running at http://localhost:8080\n[INFO] OrchidWebsocket: Websocket running at http://localhost:8081/\n<\/code><\/pre>\n<p>This lets you know which version of Orchid you are using, as well as the version of your site. In addition, it will let\nyou know which URL your site is currently being served at. By default, this will be <code>localhost:8080<\/code>, but if that port\nis being used by another process, the port will be changed to the nearest free port.<\/p>\n<pre><code class=\"language-text\">[INFO] TaskServiceImpl: Build Starting...\n[INFO] GeneratorServiceImpl: Indexing [10000: assets]\n[INFO] GeneratorServiceImpl: Indexing [1000: home]\n[INFO] GeneratorServiceImpl: Indexing [1000: pages]\n[INFO] GeneratorServiceImpl: Indexing [11: sitemap]\n[INFO] GeneratorServiceImpl: Generating [10000: assets]\n[INFO] GeneratorServiceImpl: Generating [1000: home]\n[INFO] GeneratorServiceImpl: Generating [1000: pages]\n[INFO] GeneratorServiceImpl: Generating [11: sitemap]\n<\/code><\/pre>\n<p>Orchid works in two distinct phases: the <em>indexing<\/em> phase and the <em>generation<\/em> phase. During the indexing phase, Orchid\nwill let all plugins work together to build a model of what your final site will look like. During the generating phase,\nOrchid returns control to plugins to render all of their pages. This section of output shows you which plugins are being\nindexed and generated in which order.<\/p>\n<p>By keeping two distinct phases, Orchid can give all plugins a great way to work together to build up your site, but also\ngives everything a guarantee that all the data it needs is there before any pages are rendered. This may not make much\nsense right now, but as you get more familiar with Orchid you will start to see the power that this really gives that no\nother static site generator can match.<\/p>\n<p>The result of all this is that Orchid takes data from many different places (many different plugins), and generates an\nentire website in your destination directory (the <code>-d<\/code> flag) as static HTML, Javascript, CSS, and other related static\nassets.<\/p>\n<pre><code class=\"language-text\">Build Metrics: \n┌───────┬────────────┬───────────────┬─────────────────┬───────────────────────────┬─────────────────────────────┐\n│       │ Page Count │ Indexing Time │ Generation Time │ Mean Page Generation Time │ Median Page Generation Time │\n├───────┼────────────┼───────────────┼─────────────────┼───────────────────────────┼─────────────────────────────┤\n│  home │     2      │     50ms      │      334ms      │           166ms           │            322ms            │\n├───────┼────────────┼───────────────┼─────────────────┼───────────────────────────┼─────────────────────────────┤\n│ TOTAL │          2 │         114ms │           355ms │                     166ms │                       322ms │\n└───────┴────────────┴───────────────┴─────────────────┴───────────────────────────┴─────────────────────────────┘\n\nBuild Complete\nGenerated 2 pages in 470ms\n\nWebserver Running at http://localhost:8080\nHit [CTRL-C] to stop the server and quit Orchid\n<\/code><\/pre>\n<p>Orchid is a very fast static site generator, with build speed on par with the best tools on the market, despite being so\nmuch more powerful and flexible. Generation time is primarily limited by the raw speed of the template engine rendering\nyour pages, but this table may help you debug slow builds. Here you can see how many pages Orchid generated, and also\nthe total time taken indexing and rendering for each plugin.<\/p>\n<p>The <code>home<\/code> plugin is typically the slowest just because it includes the first page rendered and so the template cache\nwarm-up time is included in its generation time. For all plugins, you should expect a mean and median generation time to\nbe pretty similar, and if they are vastly different you may need to see if any of the pages from that plugin are causing\nissues. This can also help you identify entire plugins that are running very slowly.<\/p>\n<p>The larger sites get, the longer the total build time is, but the mean page generation time tends to drop. This is in\ncontrast to most other tools which per-page generation times tend to <em>increase significantly<\/em> for really large sites. It\nis common for the mean generation time to be closer to 20ms or less for individual pages, which means a site of\nthousands of pages could easily be built in just a couple minutes, while other tools could easily take 10 minutes or\nmore (if they can even handle sites of that scale!).<\/p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>So now that we have a bit of an idea of how to start running Orchid, let's open up\n<a href=\"http://localhost:8080\">http://localhost:8080<\/a> in our browser. Orchid has built your site into the <code>build/docs/orchid/<\/code>\ndirectory and is serving these pages directly with its own lightweight embedded HTTP server. Since an Orchid site is\njust a bunch of files on disk being served directly (with no additional server-side processing), you can even stop the\nOrchid process and start any HTTP server (like <a href=\"https://github.com/indexzero/http-server\">this one<\/a>) in that directory\nand you'd get the same result.<\/p>\n<p>Congratulations, you now have a basic Orchid site up and running! Let's go back over what we learned:<\/p>\n<ol>\n<li>Orchid is a command-line tool that is run through Gradle. Orchid provides a plugin for Gradle so that it is easy to\nget set up and running Orchid without needing to know much about Gradle.<\/li>\n<li>Orchid is a <em>static site generator<\/em>, which is a tool that takes content and generates and entire website consisting\nof only HTML, CSS, and other static files that can be hosted from any webserver.<\/li>\n<li>Orchid uses a series of plugins to generate your site, and has a unique way of managing the build lifecycle that\nactually improves per-page generation times as your site grows, unlike most other tools which tend to slow down\ndramatically.<\/li>\n<\/ol>\n<p>Stay tuned for more tutorials on how to use Orchid. We will take what we learned here and expand upon that to learn how\nto add your first pages to start customizing your site and make it unique.<\/p>\n"
              }]
            },
            "all-about-archetypes": {
              "ownKey": "all-about-archetypes",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "all-about-archetypes",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/all-about-archetypes"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "amazing-admin-panel",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/amazing-admin-panel"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "whats-on-the-menu",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/whats-on-the-menu"
                },
                "description": "Learn the unique way that Orchid enables a site to grow and adapt to large sites.",
                "title": "All About Archetypes",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>While Orchid can be used for smaller sites, it really starts to shine when you start using Archetypes to easily\nconfigure many pages at once. This tutorial will introduce you to this concept.<\/p>\n<p>Before continuing, make sure you have followed along with the previous tutorial and have started your local Orchid\nserver with <code>gradle orchidServe<\/code>. We will be building on that example in this tutorial.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/06\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"the-problem-with-large-sites\"><a href=\"#the-problem-with-large-sites\" id=\"the-problem-with-large-sites\" class=\"anchor\"><\/a>The Problem With Large Sites<\/h2>\n<p>There are literally hundreds of static site generators out there, but nearly all of them are affected with the same\nissue: how do you easily manage a site which may contain hundreds, or even <em>thousands<\/em>, of pages? Most sites will\ncontain large collections of pages which all need similar configurations, but most generators do not offer any way to\nkeep the configurations for all these pages in sync. Scaffolding pages with common configurations built-in only works\nfor new pages, but doesn't help at all when you are making large changes to the site. There must be a better way!<\/p>\n<p>Orchid was created to solve exactly these kinds of issues, of building and maintaining sites at large scale over a long\nperiod of time and many iterations. It principally uses a technique called <strong>Archetypes<\/strong> to solve this issue, but\nbefore we get too deep into the solution, let's make sure we fully understand the problem.<\/p>\n<h3 id=\"repeated-configuration\"><a href=\"#repeated-configuration\" id=\"repeated-configuration\" class=\"anchor\"><\/a>Repeated Configuration<\/h3>\n<p>In our example of building a website for a small business with multiple locations, we ended up creating one page for\neach location. The final site has pages at <code>/locations/houston<\/code>, <code>/locations/dallas<\/code> and <code>/locations/austin<\/code>, with\ncorresponding Markdown files within the <code>pages<\/code> directory of our site resources directory. These files each contain a\nlot of information in their Front Matter that is unique to that one location, such as its address, phone number, or\nbusiness hours, but also contains quite a lot of information that is intended to be the same across <em>all<\/em> of the\nlocations. An example of the full Front Matter for one of our locations pages follows:<\/p>\n<pre><code class=\"language-yaml\">---\ncity: 'Houston'\nstate: 'TX'\npostal_code: '12345'\naddress: '1234, Example Dr.'\nphone: '(123) 456-7890'\nbusiness_hours:\n  - 'M-F: 6am - 9pm'\n  - 'Sa: 6am - 10pm'\n  - 'Su: Closed'\ntemplate: 'location' \nmenu:\n  - type: pageIds\n    structure: nested\n  - type: separator\n    title: 'All Locations'\n  - type: pages\n    group: 'locations'\n---\n<\/code><\/pre>\n<p>We can break this one Front Matter heading into two sections: one section for the configuration values common to all\nlocations, and one unique to this location:<\/p>\n<pre><code class=\"language-yaml\"># unique to Houston location\ncity: 'Houston'\nstate: 'TX'\npostal_code: '12345'\naddress: '1234, Example Dr.'\nphone: '(123) 456-7890'\nbusiness_hours:\n  - 'M-F: 6am - 9pm'\n  - 'Sa: 6am - 10pm'\n  - 'Su: Closed'\n  \n# common to all locations\ntemplate: 'location' \nmenu:\n  - type: pageIds\n    structure: nested\n  - type: separator\n    title: 'All Locations'\n  - type: pages\n    group: 'locations'\n---\n<\/code><\/pre>\n<p>While we could keep copying this common configuration to all new locations, it definitely isn't ideal. It requires us to\nmake sure that all new locations have properly copied over this new configuration, or else setting up a scaffold to do\nthis for us that will surely get out of date at some point in the future.<\/p>\n<h3 id=\"inflexible-configuration\"><a href=\"#inflexible-configuration\" id=\"inflexible-configuration\" class=\"anchor\"><\/a>Inflexible Configuration<\/h3>\n<p>Another problem with managing the configurations for many pages manually or via scaffolding is that it makes it\nincredibly difficult to play around with the settings to find what works best for all pages. If you were to set up a few\npages, or a few hundred pages, using the <code>location<\/code> page template as shown earlier, and then later decided to change it,\nyou would have a long and difficult road ahead of you. Using static configuration and scaffolding just doesn't work for\nlong-term site maintenance or iterative development.<\/p>\n<h2 id=\"orchid-archetypes\"><a href=\"#orchid-archetypes\" id=\"orchid-archetypes\" class=\"anchor\"><\/a>Orchid Archetypes<\/h2>\n<p>Orchid has a unique way of addressing this problem, using a technique called <em>Archetypes<\/em>. The main idea is very\nstraightforward: instead of using the same configurations in the Front Matter of many pages, you can just put it in\n<code>config.yml<\/code> instead, and Orchid will treat it as though it were in the Front Matter!<\/p>\n<h3 id=\"all-pages-archetype\"><a href=\"#all-pages-archetype\" id=\"all-pages-archetype\" class=\"anchor\"><\/a>&quot;All Pages&quot; Archetype<\/h3>\n<p>Let's look at an example; add the following snippet to your <code>config.yml<\/code>, and remove the common configuration from all\nyour locations pages:<\/p>\n<pre><code class=\"language-yaml\">allPages:\n  template: 'location' \n  menu:\n    - type: pageIds\n      structure: nested\n    - type: separator\n      title: 'All Locations'\n    - type: pages\n      group: 'locations'\n<\/code><\/pre>\n<p>Look at that, your site looks the exact same! Only now, you don't have a bunch of configuration copied amongst your\nlocations files! By moving the common configuration to the <code>allPages<\/code> property in <code>config.yml<\/code>, you've instructed Orchid\nto use that configuration data <em>in addition<\/em> to the config present in each page's Front Matter.<\/p>\n<h3 id=\"page-group-archetype\"><a href=\"#page-group-archetype\" id=\"page-group-archetype\" class=\"anchor\"><\/a>&quot;Page Group&quot; Archetype<\/h3>\n<p>But this solution isn't perfect yet. The <code>allPages<\/code> Archetype data will be used on <em>every<\/em> page that Orchid generates,\nwhich means all our services and staff pages will also start using the page template and menu we've set up. We only want\nour locations pages to have the configuration. Fortunately, Orchid comes with many different archetypes, which are\nmore scoped to just the pages you want them on. Let's look at another one that will work much better:<\/p>\n<pre><code class=\"language-yaml\">pages:\n  locations:\n    template: 'location' \n    menu:\n      - type: pageIds\n        structure: nested\n      - type: separator\n        title: 'All Locations'\n      - type: pages\n        group: 'locations'\n<\/code><\/pre>\n<p>This time, instead of putting the archetype data at <code>allPages<\/code> in <code>config.yml<\/code>, we put it at <code>pages.locations<\/code>. Now,\nwhen the site rebuilds, this configuration data will only be pulled into our locations pages but not the services or\nstaff pages, just like we want!<\/p>\n<h3 id=\"whats-going-on-here\"><a href=\"#whats-going-on-here\" id=\"whats-going-on-here\" class=\"anchor\"><\/a>What's Going On Here?<\/h3>\n<p>You'll notice that <code>pages<\/code> is the name of the Pages plugin which creates our locations pages, and that our locations are\nall in the <code>locations/<\/code> top-level subdirectory, which gives them a &quot;group&quot; of <code>locations<\/code>. The &quot;static pages&quot; plugin is\nopinionated in this way, and expects that pages in subdirectories are related, and so provides its own custom Archetype\nto help with the configuration of that group. You can set up dedicated &quot;page group&quot; configurations for the other groups\nas well, and they will automatically adapt.<\/p>\n<p>Other plugins each have their own opinionated conventions for Archetypes as well. For example, the &quot;Posts&quot; plugin allows\nsimilar configuration to be pulled from <code>config.yml<\/code> for each post's category, and the &quot;Wiki&quot; plugin does the same for\neach section.<\/p>\n<p>There are many different types of Archetypes. Most will pull data from <code>config.yml<\/code>, some work in completely different\nways, but they are all working together to fetch the configuration values you need without having to specify them all\ndirectly in a page's Front Matter.<\/p>\n<p>With so many different ways to configure each page it can be a bit tricky to keep it all straight, but the next tutorial\nwill show you how Orchid's self-documenting nature and its admin panel allows you to find all this information for\nyourself.<\/p>\n<h3 id=\"using-multiple-archetypes\"><a href=\"#using-multiple-archetypes\" id=\"using-multiple-archetypes\" class=\"anchor\"><\/a>Using Multiple Archetypes<\/h3>\n<p>Pages usually have more than one possible archetype, and you are able to mix configuration values from all of them at\nthe same time. For example, you can use the &quot;all pages&quot; Archetype to set all pages in your site to use a given layout\ntemplate, and then use the &quot;page group&quot; Archetype to customize the page template. There are a few things to keep in\nmind, however, when configuring pages with multiple Archetypes:<\/p>\n<ul>\n<li>For single values (such as Strings or numbers):\n<ul>\n<li>Archetypes are prioritized. If multiple Archetypes provide the same property, the value from the Archetype with\nthe highest priority is chosen. For example, the &quot;page group&quot; Archetype has higher priority than the &quot;all pages&quot;\nArchetype since it is more specialized, so if both archetypes set a layout, the one set by the &quot;page group&quot;\narchetype would be used.<\/li>\n<li>Values specified in a page's Front Matter <em>always<\/em> override Archetype values. For example, if the &quot;page group&quot;\nArchetype set the layout, it can be overridden for a single page by setting the layout in that page's Front\nMatter.<\/li>\n<\/ul>\n<\/li>\n<li>For lists or maps:\n<ul>\n<li>List items are concatenated together. The order in which list items are added is unspecified, but most items that\nare configured as a list (such as menu items) have a way of manually specifying the sort order that doesn't rely\non the order the list items originally appear in.<\/li>\n<li>Maps are combined with a deep merge. If multiple Archetypes include the same key, the values at each key are\nrecursively combined with this same strategy, where higher-priority Archetypes override single values, and lists\nand maps are merged together.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Using this knowledge, let's set up our locations pages using both the &quot;all pages&quot; and &quot;page groups&quot; archetypes. We'll\nalso go ahead and set up similar archetype configs for the services and staff pages. Replace the <code>config.yml<\/code> contents\nwith the following snippet:<\/p>\n<pre><code class=\"language-yaml\">theme:\n  primaryColor: '#dd9999'\n  menu:\n    - type: 'page'\n      itemId: 'Locations'\n    - type: 'page'\n      itemId: 'Services'\n    - type: 'page'\n      itemId: 'Staff'\n\nallPages:\n  template: 'page'\n  menu:\n    - type: pageIds\n      structure: nested\n      order: 1\n\npages:\n  locations:\n    template: 'location'\n    menu:\n      - type: separator\n        title: 'All Locations'\n        order: 2\n      - type: pages\n        group: 'locations'\n        order: 3\n<\/code><\/pre>\n<p>When the site rebuilds, you'll notice that the <code>template<\/code> for the locations pages is set to <code>location<\/code>, and that all\npages have the <code>pageIds<\/code> menu item, which has been set from the &quot;all pages&quot; archetype, while the &quot;page groups&quot; archetype\nadded the page menu items for all locations.<\/p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>As your site grows in scope and complexity, there is a need to be able to configure it accordingly. There are many pages\nthat are similar, and many of those might have subtle nuances that need to be addressed individually. Orchid's\nArchetypes gives you the freedom to do exactly that, so let's recap:<\/p>\n<ol>\n<li>Large sites typically lead to lots of configuration repetition which doesn't scale very well, and is very difficult\nto change once established.<\/li>\n<li>Orchid allows pages to be configured from multiple sources, not just from its Front Matter. Most commonly, this\nadditional configuration comes from the same <code>config.yml<\/code> that you can use to configure the rest of the site, so\neverything is nicely managed from one location.<\/li>\n<li>The specifics of where in <code>config.yml<\/code> the Archetype data comes from is determined by the individual plugin. Plugins\neach have their own conventions for how to structure Archetype data that makes the most sense for that one plugin.<\/li>\n<li>Multiple Archetypes can be used simultaneously, and are ordered such that more-specific Archetypes override\nconfigurations from more-general ones. When multiple archetypes define lists or maps at the same key, they are\nmerged recursively rather than overriding one another.<\/li>\n<\/ol>\n"
              }]
            },
            "how-to-blog": {
              "ownKey": "how-to-blog",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "how-to-blog",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/how-to-blog"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "how-to-document-kotlin",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/how-to-document-kotlin"
                },
                "description": "Instructions for creating and publishing a blog with Orchid.",
                "title": "How to Write a Blog",
                "content": "<p>Orchid was created to create amazing project documentation sites, but it is by no means limited to documentation. Orchid\nis equally good at producing blogs for your portfolio site, or even for adding a newsletter to your docs to further\nengage with your users!<\/p>\n<p>This tutorial will walk you through how to create a blog, complete with archives for all your posts, and get it deployed\nto Netlify. If you want to jump right into a working project, you can find everything described here in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/blog-site\">OrchidTutorials example project<\/a>.<\/p>\n<p>Alternatively, you can simply click the &quot;Deploy to Netlify&quot; button below to automatically clone, build, and deploy the\nOrchidStarter repo to the Netlify CDN. Most of what is in this tutorial is also included in that site, so you can\nfollow along with this tutorial using the <a href=\"https://github.com/JavaEden/OrchidStarter\">starter repo<\/a> as well.<\/p>\n<p><a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/orchidhq/OrchidStarter\"><img src=\"https://www.netlify.com/img/deploy/button.svg\" alt=\"Deploy to Netlify\" /><\/a><\/p>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" id=\"getting-started\" class=\"anchor\"><\/a>Getting Started<\/h2>\n<p>We'll be using Gradle for this project, and Orchid runs as a Gradle plugin. So let's get our <code>settings.gradle<\/code> and we'll\nalso set up the <code>build.gradle<\/code>:<\/p>\n<pre><code class=\"language-groovy\">// settings.gradle\nrootProject.name = 'My Awesome Blog'\n<\/code><\/pre>\n<pre><code class=\"language-groovy\">// build.gradle\n// 1. Apply Orchid plugin\nplugins {\n    id &quot;com.eden.orchidPlugin&quot; version &quot;0.21.1&quot;\n}\n\n// 2. Include Orchid dependencies\ndependencies {\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-blog-bundle:0.21.1&quot;\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-future-imperfect-theme:0.21.1&quot;\n    orchidCompile &quot;io.github.copper-leaf.orchid:orchid-search-feature:0.21.1&quot;\n    orchidCompile &quot;io.github.copper-leaf.orchid:OrchidPluginDocs:0.21.1&quot;\n}\n\n// 3. Get dependencies from MavenCentral\nrepositories {\n    mavenCentral()\n}\n\n// 4. Use the 'FutureImperfect' theme, and set the URL it will have on Github Pages\norchid {\n    theme = &quot;FutureImperfect&quot;\n    baseUrl = &quot;https://project.netlify.com&quot;\n    version = &quot;1.0.0&quot;\n}\n<\/code><\/pre>\n<p>This is all that's required to run your Orchid site! There are still a few things we need to do to set up the blog, but\nyou can run Orchid right now with <code>./gradlew orchidServe<\/code> and view the site on http://localhost:8080. It should give you\nan output like the following:<\/p>\n<pre><code class=\"language-text\">./gradlew :docs:orchidServe\n\n&gt; Task :docs:orchidServe\nUsing the following modules: \n--------------------\n * com.eden.orchid.StandardModule\n\nAuto-loaded modules: \n--------------------\n * com.eden.orchid.editorial.EditorialModule\n * com.eden.orchid.impl.compilers.markdown.FlexmarkModule\n * com.eden.orchid.impl.compilers.pebble.PebbleModule\n * com.eden.orchid.kotlindoc.KotlindocModule\n * com.eden.orchid.pages.PagesModule\n * com.eden.orchid.search.SearchModule\n * com.eden.orchid.wiki.WikiModule\n\nFlag values: \n--------------------\n-adminTheme: Default\n-baseUrl: https://project.netlify.com\n-defaultTemplateExtension: peb\n-dest: ...\n-dryDeploy: false\n-environment: debug\n-logLevel: VERBOSE\n-port: 8080\n-src: ...\n-task: serve\n-theme: Editorial\n-version: 1.0.0\n\n[INFO] Orchid: Running Orchid version 0.16.0, site version unspecified in debug environment\n[INFO] OrchidWebserver: Webserver Running at http://localhost:8080\n[INFO] OrchidWebsocket: Websocket running at http://localhost:8081/\n[INFO] TaskServiceImpl: Build Starting...\n[INFO] GeneratorServiceImpl: Indexing [10000: assets]\n[INFO] GeneratorServiceImpl: Indexing [1000: home]\n[INFO] GeneratorServiceImpl: Indexing [1000: kotlindoc]\n[INFO] GeneratorServiceImpl: Indexing [1000: pages]\n[INFO] GeneratorServiceImpl: Indexing [1000: wiki]\n[INFO] GeneratorServiceImpl: Indexing [11: sitemap]\n[INFO] GeneratorServiceImpl: Indexing [10: indices]\n[INFO] GeneratorServiceImpl: Generating [10000: assets]\n[INFO] GeneratorServiceImpl: Generating [1000: home]\n[INFO] GeneratorServiceImpl: Generating [1000: kotlindoc]\n[INFO] GeneratorServiceImpl: Generating [1000: pages]\n[INFO] GeneratorServiceImpl: Generating [1000: wiki]\n[INFO] GeneratorServiceImpl: Generating [11: sitemap]\n[INFO] GeneratorServiceImpl: Generating [10: indices]\n\nBuild Metrics:\n┌───────┬────────────┬───────────────┬─────────────────┬───────────────────────────┬─────────────────────────────┐\n│       │ Page Count │ Indexing Time │ Generation Time │ Mean Page Generation Time │ Median Page Generation Time │\n├───────┼────────────┼───────────────┼─────────────────┼───────────────────────────┼─────────────────────────────┤\n│  home │     1      │     54ms      │      481ms      │           472ms           │            472ms            │\n├───────┼────────────┼───────────────┼─────────────────┼───────────────────────────┼─────────────────────────────┤\n│ TOTAL │          1 │      3s 496ms │           520ms │                     472ms │                       472ms │\n└───────┴────────────┴───────────────┴─────────────────┴───────────────────────────┴─────────────────────────────┘\n\nBuild Complete\nGenerated 1 page in 4s 18ms\n\n\nWebserver Running at http://localhost:8080\nHit [CTRL-C] to stop the server and quit Orchid\n<\/code><\/pre>\n<p>You will also see the basic site served on localhost:8080, which looks like:<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-01.png\" alt=\"empty Orchid site\" /><\/p>\n<p>But let's move on to the next step: adding content to the site!<\/p>\n<h2 id=\"adding-content\"><a href=\"#adding-content\" id=\"adding-content\" class=\"anchor\"><\/a>Adding Content<\/h2>\n<h3 id=\"homepage\"><a href=\"#homepage\" id=\"homepage\" class=\"anchor\"><\/a>Homepage<\/h3>\n<p>The first thing anyone will see when landing on your site is your Homepage. Orchid creates this page based on a\n<code>homepage.md<\/code> file in the root of your site's <em>resources<\/em>, which are located by default in <code>src/orchid/resources<\/code>. Let's\nstart by creating this file and adding a short description of our project to it.<\/p>\n<pre><code class=\"language-markdown\">// docs/src/orchid/resources/homepage.md\n# My Blog\n\nThis is a short description of this blog.\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-02.png\" alt=\"Orchid Site with Homepage content\" /><\/p>\n<p>A common thing to add to your blog homepage is a list of your latest blog posts. But before we add that, we'll need to\nwrite some blog posts first.<\/p>\n<h3 id=\"blog-posts\"><a href=\"#blog-posts\" id=\"blog-posts\" class=\"anchor\"><\/a>Blog Posts<\/h3>\n<p>Blog posts are Markdown files in your <code>posts/<\/code> directory, where each file is a separate blog post. The filename of the\npost must be in the format of <code>YYYY-MM-DD-[post-title].md<\/code>, with the publication date and the &quot;slug&quot; of the post which\nwill be its path in its URL.<\/p>\n<p>So let's add a few posts, such as <code>posts/2019-01-01-post-one.md<\/code>, <code>posts/2019-02-01-post-two.md<\/code>, and\n<code>posts/2019-03-01-post-three.md<\/code>. The contents of each file should start with a Front Matter section, where you can\nspecify the post's title, its tags, and other metadata, and the actual post content after that. Front Matter is a block\nof YAML between pairs of triple-dashed lines.<\/p>\n<pre><code class=\"language-markdown\"># posts/2019-01-01-post-one.md\n---\ntitle: Example Post 1\nfeaturedImage: assets/media/pic01.jpg\ntags:\n    - one\n    - two\n---\n\nExample Post 1\n<\/code><\/pre>\n<p>You'll now have a blog post at http://localhost:8080/2019/1/1/post-one that looks like the following;<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-03.png\" alt=\"Orchid blog post\" /><\/p>\n<p>Now that we have some blog posts set up, we can go back and add the latest posts to our homepage. We can do by adding\na <strong>component<\/strong> to the homepage's Front Matter, configured to display the latest posts. Orchid's Components are just a\nlist of &quot;blocks&quot; which are rendered to the page in order. There are many different types of components, and different\nplugins can add their own. An example is the <code>recentPosts<\/code> component from the orchid-posts-feature plugin. We can also add the\n<code>pageContent<\/code> component, which adds the Markdown content of the <code>homepage.md<\/code>. If you don't define any components this\none is added automatically, but if you use any additional components you'll have to add it yourself.<\/p>\n<pre><code class=\"language-markdown\"># homepage.md\n---\ncomponents:\n  - type: pageContent\n  - type: recentPosts\n    limit: 4\n    noWrapper: true\n    template:\n      - 'includes/postPreview_large'\n---\n# My Blog\n\nThis is a short description of this blog.\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-04.png\" alt=\"Orchid blog post\" /><\/p>\n<h3 id=\"creating-archives\"><a href=\"#creating-archives\" id=\"creating-archives\" class=\"anchor\"><\/a>Creating Archives<\/h3>\n<h4 id=\"post-archive\"><a href=\"#post-archive\" id=\"post-archive\" class=\"anchor\"><\/a>Post Archive<\/h4>\n<p>Now, while it is nice to show the most recent posts on your site's homepage, if you've got more than a couple posts you\nsimply can't show a complete archive on the homepage. Instead, we can use the orchid-archives-feature plugin to generate proper\narchives.<\/p>\n<p>Orchid is designed around a concept of &quot;collections&quot; of pages. When we set up the blog posts, Orchid also created a\n<code>posts<\/code> collection. We can tell the Taxonomies plugin to generate an archive of any of our collections from any plugin,\nmaking it simple to create any archives we may need.<\/p>\n<p>Configuring archives is done through a <code>config.yml<\/code> file in our site resources. This is the main entry-point to\nconfiguring <em>anything<\/em> in our site. The following snippet will set up a <em>collection archive<\/em> for all our blog posts.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\ntaxonomies:\n  collectionArchives:\n    - collectionType: 'posts'\n      collectionId: 'blog'\n<\/code><\/pre>\n<p>Now, if we visit http://localhost:8080/blog, we will see a listing of all our blog posts. As our blog grows, this\narchive will automatically become paginated, keeping any single page from growing too large.<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-05.png\" alt=\"Collection Archive\" /><\/p>\n<p>You may wish to create archives for other collections as well. If you visit http://localhost:8080/admin while your site\nis serving locally, you can view Orchid's admin panel where we can see a list of all the collections that have been set\nup for us.<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-06.png\" alt=\"Orchid Admin Panel Collections\" /><\/p>\n<h4 id=\"tag-archives\"><a href=\"#tag-archives\" id=\"tag-archives\" class=\"anchor\"><\/a>Tag Archives<\/h4>\n<p>But the full listing of posts may not be the only kind of archives we want! Most blogs will also contain listings of\nposts by tag (remember, we provided a list of tags to our posts earlier!). Orchid did not create a collection for these\ntagged pages, but that doesn't mean we can't create an archive for them too! The Taxonomies plugin is able to generate\n<em>any<\/em> kind of arbitrary archive, based on the metadata attached to each post. These are called <em>taxonomy archives<\/em>,\nbecause you get to create any kind of taxonomy (or labelling) you need.<\/p>\n<p>Configuration of a taxonomy archive is similar to a collection archive, but instead of giving it the values for a\ncollection, we tell it a property to look for in our posts' Front Matter, such as <code>tags<\/code>:<\/p>\n<pre><code class=\"language-yaml\">taxonomies:\n  collectionArchives:\n    - collectionType: 'posts'\n      collectionId: 'blog'\n  taxonomies:\n    - key: tags\n      single: false\n      orderBy:\n        - entryCount\n<\/code><\/pre>\n<p>This will now go through all our posts, find any that have a <code>tags<\/code> property in its Front Matter, and add it to that\narchive. And this will actually create <em>two<\/em> archives for each &quot;taxonomy&quot;: one listing all the pages with each tag (a\nterm archive), and another archive simply listing all the tags that it found (a taxonomy archive).<\/p>\n<p><strong>http://localhost:8080/tags<\/strong><\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-07.png\" alt=\"Taxonomy Archive\" /><\/p>\n<p><strong>http://localhost:8080/tags/one<\/strong><\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-08.png\" alt=\"Term Archive\" /><\/p>\n<h3 id=\"site-infotheme-configuration\"><a href=\"#site-infotheme-configuration\" id=\"site-infotheme-configuration\" class=\"anchor\"><\/a>Site Info/Theme Configuration<\/h3>\n<p>With the skeleton of our site content set up, it's time to make some customizations to the theme and add additional info\nabout your site, such as its name and the author of your posts. These can be added to <code>config.yml<\/code>, just like how we\nconfigured the archives.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nsite:\n  about:\n    siteName: My Blog\n    siteDescription: This is a short description of this blog.\n    avatar: 'https://picsum.photos/seed/city/320/320'\ntheme:\n  social:\n    github: 'username/project'\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-09.png\" alt=\"Orchid site with some configuration\" /><\/p>\n<p>But these configuration values didn't just come out of nowhere. Going back to the admin panel, you can find all the\noptions available for customization for your theme, for components, and for just about anything else.<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-10.png\" alt=\"Orchid site with some configuration\" /><\/p>\n<p>There's a final bit of info that we should need to <code>config.yml<\/code> before finishing: setting the author for all our posts.<\/p>\n<p>You would normally add the necessary configuration to each post's Front Matter, but it is really difficult,\ntime-consuming, and error-prone to copy this data to each post file. Instead, Orchid has <em>Archetypes<\/em> which allow you to\nset that configuration once in <code>config.yml<\/code> and have it shared amongst a bunch of pages just as if it were added to the\nFront Matter of each one.<\/p>\n<p>For adding configuration values to all post pages, use <code>posts.postPages<\/code> in the <code>config.yml<\/code>. We'll add an author to the\nblog by adding an item to the <code>posts.authors<\/code> list, and using the archetype we'll set the author for each page to the\none you just set up:<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nposts:\n  authors:\n    - name: 'Author One'\n      avatar: 'https://picsum.photos/seed/animals/320/320'\n      email: 'email@domain.tld'\n  postPages:\n    author: 'Author One'\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/blog-11.png\" alt=\"Blog post with tag archive links\" /><\/p>\n<h2 id=\"deploy-on-netlify\"><a href=\"#deploy-on-netlify\" id=\"deploy-on-netlify\" class=\"anchor\"><\/a>Deploy On Netlify<\/h2>\n<p>Our site is now ready to be deployed! For blogs and personal sites, you really can't go wrong with Netlify as your site\nhost. It offers everything you could want for both small and large sites, such as purchasing custom domains, form\nhandling, and automated site deploys. While Orchid has its own Netlify publisher for advanced use cases, it's far\nsimpler to use Netlify as intended.<\/p>\n<p>All you need to do is create an account at https://www.netlify.com/, add a <code>netlify.toml<\/code> file to the root of your repo\nwith the following content, and push to GitHub.<\/p>\n<pre><code class=\"language-toml\">[build]\n  base    = &quot;&quot;\n  publish = &quot;build/docs/orchid&quot;\n  command = &quot;./gradlew orchidBuild -PorchidEnvironment=prod&quot;\n<\/code><\/pre>\n<p>Now, once you've connected that repo to Netlify, they will take care of the rest! Of course, this is just the minimum\nneeded to deploy, and I'd encourage you to also check out their <a href=\"https://docs.netlify.com/#get-started\">full documentation<\/a>\nfor more help building and deploying your Orchid site on Netlify.<\/p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>And with all that, our blog site is finished! Now it may have seemed like a ton of work getting all that setup, but\nlet's recall all the features included in this site:<\/p>\n<ul>\n<li>A homepage that displays our latest blog posts<\/li>\n<li>A full, paginated archive of all blog posts<\/li>\n<li>A listing of all tags in your blog<\/li>\n<li>An archive for all the pages with each tag<\/li>\n<li>Ability to set the author for each post<\/li>\n<li>Ability to easily change the configurations for all your blog posts from a single location, instead of copying data\nto each post<\/li>\n<\/ul>\n<p>And everything outlined in this tutorial is really just a sampling of the full functionality available in Orchid! Orchid\nhas other plugins for different source code documentation, presentations, wikis, and much more. Check out the full list\nof plugins <a href=\"https://orchid.run/plugins\">here<\/a>, or you can even make your own!<\/p>\n<p>Thanks for following along, happy blogging!<\/p>\n"
              }]
            },
            "homepage-and-static-pages": {
              "ownKey": "homepage-and-static-pages",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "homepage-and-static-pages",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/homepage-and-static-pages"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "heart-of-the-front-matter",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/heart-of-the-front-matter"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "your-first-orchid-site",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/your-first-orchid-site"
                },
                "description": "Create your Orchid site's first pages and learn how Orchid processes files.",
                "title": "Homepage and Static Pages",
                "content": "<h2 id=\"introduction\"><a href=\"#introduction\" id=\"introduction\" class=\"anchor\"><\/a>Introduction<\/h2>\n<p>In the previous tutorial, we learned about how to create a new Orchid project and how to start it from the command line.\nIn this tutorial we will start to add our first content to our homepage and learn about the most basic, but one of the\nmost flexible plugins: Static Pages.<\/p>\n<p>Before continuing, make sure you have followed along with the first tutorial and have started your local Orchid server\nwith <code>gradle orchidServe<\/code>. We will be building on that example in this tutorial.<\/p>\n<p>You can follow along with this tutorial on your own, or find the source for this in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/02\">OrchidTutorials repository<\/a>.<\/p>\n<h2 id=\"your-homepage\"><a href=\"#your-homepage\" id=\"your-homepage\" class=\"anchor\"><\/a>Your Homepage<\/h2>\n<p>Looking at your first Orchid site, you'll notice that it is a bit plain. It's just an empty page with no menus, no\ncontent, nothing interesting at all. But let's change that!<\/p>\n<p>Every Orchid site includes a Homepage. This is first page that visitors will see when they go to the root of your\nwebsite, and is always created even if you don't include any other plugins in your Orchid build. Let's start by adding a\nnew file in your project at <code>src/orchid/resources/homepage.md<\/code> and adding the following content to it.<\/p>\n<pre><code class=\"language-text\">## Hello, Orchid\n\n&gt; You are beautiful, and so is your website.\n\nLet's build something _beautiful and unique_, **together**.\n<\/code><\/pre>\n<p>There we go, that's looking a bit better. We now have a Markdown file, and whatever you write in that file will be\nautomatically converted to HTML and embedded inside your theme.<\/p>\n<p>But this file doesn't have to be Markdown. Orchid knows a lot of different languages, and you are free to use something\nelse if you wish, such as Asciidoc. By changing the file extension from <code>.md<\/code> to <code>.ad<\/code>, you will instruct Orchid to\nprocess this file as Asciidoc rather than Markdown.<\/p>\n<p>Let's do that now. Rename <code>src/orchid/resources/homepage.md<\/code> to <code>src/orchid/resources/homepage.ad<\/code> and change its\ncontents to the equivalent in Asciidoc.<\/p>\n<pre><code class=\"language-text\">== Hello, Orchid\n\n____\nYou are beautiful, and so is your website.\n____\n\nLet's build something _beautiful and unique_, *together*.\n<\/code><\/pre>\n<h1 id=\"adding-static-pages\"><a href=\"#adding-static-pages\" id=\"adding-static-pages\" class=\"anchor\"><\/a>Adding Static Pages<\/h1>\n<h2 id=\"example-small-business\"><a href=\"#example-small-business\" id=\"example-small-business\" class=\"anchor\"><\/a>Example: Small Business<\/h2>\n<p>Having a homepage on your site is great and all, but you've probably got a lot more content that you want to show. There\nare many ways you can add additional pages to your Orchid site, but the easiest way is with the Static Pages plugin.<\/p>\n<p>Let's say you are running a small business which has multiple locations throughout Texas: one in Houston, one in Dallas,\nand one in Austin. Each location should have its own page which lists its name, address, phone number, and business\nhours. You want these pages to be in your website at <code>/locations/{locationName}<\/code>, and also to have an &quot;index&quot; page\nshowing all locations so each one can be easily located. So you want your site to have the following pages:<\/p>\n<ul>\n<li><code>/<\/code> - Site homepage<\/li>\n<li><code>/locations<\/code> - Index of all locations<\/li>\n<li><code>/locations/houston<\/code> - Houston location landing page<\/li>\n<li><code>/locations/dallas<\/code> - Dallas location landing page<\/li>\n<li><code>/locations/austin<\/code> - Austin location landing page<\/li>\n<\/ul>\n<p>Let's see how we can use the Static Pages plugin to create this site.<\/p>\n<h2 id=\"adding-location-pages\"><a href=\"#adding-location-pages\" id=\"adding-location-pages\" class=\"anchor\"><\/a>Adding Location Pages<\/h2>\n<p>We already have our Homepage set up at <code>/<\/code>, so let's go ahead and set up our Houston location page first. We'll start by\nmaking a new file at <code>src/orchid/resources/pages/locations/houston.md<\/code>. This file works just the same as your Homepage's\nfile. You can write whatever content you want inside it, and it will be converted to HTML and embedded inside your theme\nfor you. Also, just like the Homepage, you can change its file extension to have Orchid process it as another language,\nif desired.<\/p>\n<p>So let's add the following content to <code>src/orchid/resources/pages/locations/houston.md<\/code>.<\/p>\n<pre><code class=\"language-text\">## Location\n\nHouston, TX\n\n## Address\n \n1234, Example Dr.\nHouston, TX, 12345\n\n## Phone\n\n(123) 456-7890\n\n## Business Hours\n\nM-F: 6am - 9pm\nSa: 6am - 10pm\nSu: Closed\n<\/code><\/pre>\n<p>While we're at it, lets go ahead and do similar things for our Dallas and Austin locations as well. Copy the\n<code>houston.md<\/code> file to <code>dallas.md<\/code> and <code>austin.md<\/code>, change the content inside these files, and in just a moment Orchid\nwill have rebuilt your site and included these new pages for us.<\/p>\n<p>You can now view the pages for each business location at\n<a href=\"http://localhost:8080/locations/houston\">http://localhost:8080/locations/houston<\/a>,\n<a href=\"http://localhost:8080/locations/dallas\">http://localhost:8080/locations/dallas<\/a>, and\n<a href=\"http://localhost:8080/locations/austin\">http://localhost:8080/locations/austin<\/a>!<\/p>\n<h2 id=\"adding-location-index-page\"><a href=\"#adding-location-index-page\" id=\"adding-location-index-page\" class=\"anchor\"><\/a>Adding Location Index Page<\/h2>\n<p>Now that we have a unique page for each of our locations, lets go ahead and create an index page which lists all of our\nindividual locations. As you may have already guessed, we need to create a new file at\n<code>src/orchid/resources/pages/locations.md<\/code>, and add the content in there. This is because the Static Pages plugin works\nby taking <em>all<\/em> files in your <code>src/orchid/resources/pages/<\/code> directory, and copies them into your final site at that same\npath.<\/p>\n<p>However, if we were to build a really large site with static pages, it might get a bit confusing having the locations\nindex page in a different folder from the rest of the locations pages. So lets actually move\n<code>src/orchid/resources/pages/locations.md<\/code> to <code>src/orchid/resources/pages/locations/index.md<\/code>. The Static Pages plugin\nwill copy any file over directly, but for files named <code>index<\/code>, it will keep them at the root of that folder, rather than\nmaking a sub-page in that folder. So <code>src/orchid/resources/pages/locations/index.md<\/code> will become <code>/locations<\/code> instead of\n<code>/locations/index<\/code> like the other-named pages would.<\/p>\n<p>We need to get this site out fast so we can start getting people visiting all locations, so let's just hardcode links to\neach page for now. Add the following to <code>locations/index.md<\/code>:<\/p>\n<pre><code class=\"language-text\">## Our Locations\n\n- [Houston](http://localhost:8080/locations/houston)\n- [Dallas](http://localhost:8080/locations/dallas)\n- [Austin](http://localhost:8080/locations/austin)\n<\/code><\/pre>\n<h1 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h1>\n<p>Your Orchid site is starting to look pretty good, but lets review what we did:<\/p>\n<ol>\n<li>Orchid keeps most of its files in <code>src/orchid/resources/<\/code>. One special file in that folder, <code>homepage.md<\/code> can be\nadded so that Orchid can build its front page with it.<\/li>\n<li>You can add any files you want to <code>src/orchid/resources/pages/<\/code>, and Orchid will copy them over to your final site in\nthat same structure. You can also name special files here <code>index<\/code>, and they will be kept at the index of that folder\nin the final site rather than in a sub-directory named index, which can be used to create special landing pages.<\/li>\n<li>The homepage and all static pages are processed based on their file extension. Use the <code>.md<\/code> extension to process the\nfile as Markdown, and <code>.ad<\/code> to process it as Asciidoc. In fact, you'll find that <em>any<\/em> page from <em>any<\/em> plugin will\nbe processed in a similar manner, so that using all plugins will feel very similar.<\/li>\n<\/ol>\n<p>Stay tuned for more tutorials on how to use Orchid. In the next tutorial, I will show you how to improve this small\nbusiness by making the links dynamic, and also adding breadcrumbs and a customizing the locations page content to\nimprove consistency across your site and make it easier to navigate.<\/p>\n"
              }]
            },
            "how-to-document-kotlin": {
              "ownKey": "how-to-document-kotlin",
              "ownPages": [{
                "reference": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "how-to-document-kotlin",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/how-to-document-kotlin"
                },
                "next": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "how-to-blog",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/how-to-blog"
                },
                "previous": {
                  "path": "wiki/learn/tutorials",
                  "baseUrl": "https://orchid.run",
                  "fileName": "amazing-admin-panel",
                  "extension": "html",
                  "usePrettyUrl": true,
                  "link": "https://orchid.run/wiki/learn/tutorials/amazing-admin-panel"
                },
                "description": "Instructions for documenting and publishing a Kotlin project with Orchid.",
                "title": "How to Document a Kotlin Project",
                "content": "<p>Documentation is far from being the sexiest thing about software development, but it is certainly necessary. Think back\nto all the libraries and tools you use every day; they all must have some pretty good documentation, otherwise, you\nwould have never learned how to use them.<\/p>\n<p>So if you're building a library, and you want people to use it, it should also have good documentation. And if that\nlibrary happens to be written in Kotlin, you're in luck because creating a great documentation website is actually much\neasier than you might think with the help of a new tool called <a href=\"https://orchid.run/\">Orchid<\/a>.<\/p>\n<p>This tutorial will walk you through how to create a basic documentation site for your Kotlin project with Orchid,\nincluding Dokka code docs, a wiki, and changelogs, and get it deployed Github Pages. If you want to jump right into a\nworking project, you can find everything described here in the\n<a href=\"https://github.com/orchidhq/OrchidTutorials/tree/master/kotlin-site\">OrchidTutorials example project<\/a>.<\/p>\n<h2 id=\"getting-started\"><a href=\"#getting-started\" id=\"getting-started\" class=\"anchor\"><\/a>Getting Started<\/h2>\n<p>We'll be using Gradle for this project, but the process will be nearly identical if you prefer Maven.<\/p>\n<p>To start, we'll need a Kotlin project to work with. Ideally, it will be in its own Gradle subproject, such as <code>:app<\/code>,\nwhile the documentation will be in another subproject like <code>:docs<\/code>. For illustration purposes I am going to quickly set\nup an example application, but you are free to just follow along using your own library and skip directly to the\n<a href=\"#orchid-setup\"><em>Orchid Setup<\/em> section<\/a>.<\/p>\n<h3 id=\"app-setup\"><a href=\"#app-setup\" id=\"app-setup\" class=\"anchor\"><\/a>App Setup<\/h3>\n<p>Starting with a basic Gradle project, we'll need to create our two subprojects. This involves telling Gradle about our\nprojects in <code>settings.gradle<\/code>, and setting up the Kotlin plugin in the <code>:app<\/code> project's <code>build.gradle<\/code><\/p>\n<pre><code class=\"language-groovy\">// settings.gradle\nrootProject.name = 'Kotlin Project'\n\ninclude ':app'\n<\/code><\/pre>\n<pre><code class=\"language-groovy\">// app/build.gradle\nplugins {\n    id 'org.jetbrains.kotlin.jvm' version '1.3.21'\n    id 'application'\n}\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.21'\n}\napplication {\n    mainClassName = 'com.example.MainKt'\n}\n<\/code><\/pre>\n<p>Now we're ready to start adding and running Kotlin files. For simplicity, we're using the <code>application<\/code> plugin so we can\nrun a <code>main<\/code> method in our Kotlin project. We'll set up the application as an <code>Application<\/code> interface, an\n<code>ExampleApplication<\/code> class that implements that interface, and have the main method run that app. Though it is quite\nsimplistic, it will work well enough as an example of the kind of documentation Orchid will generate for it.<\/p>\n<p>So let's get these all set up!<\/p>\n<pre><code class=\"language-kotlin\">// app/src/main/kotlin/main.kt\npackage com.example\n\n/**\n * Run the ExampleApplication\n */\nfun main() {\n    ExampleApplication().run {\n        println(&quot;Running $name version $version...&quot;)\n        start(&quot;3&quot;)\n        println(&quot;Finished!&quot;)\n    }\n}\n\n/**\n * An Application that can be run with arbitrary arguments.\n */\ninterface Application {\n\n    /**\n     * The name of the application\n     */\n    val name: String\n\n    /**\n     * The current application version\n     */\n    val version: String\n\n    /**\n     * Run this application with the arguments provided\n     *\n     * @param args the args to configure the application\n     */\n    fun start(vararg args: String)\n}\n\nclass ExampleApplication : Application {\n    override val version: String = &quot;1.0.0&quot;\n    override val name: String = &quot;Example Application&quot;\n\n    override fun start(vararg args: String) {\n        for(i in 1..args.first().toInt()) {\n            println(&quot;$i...&quot;)\n            Thread.sleep(1000)\n        }\n    }\n}\n<\/code><\/pre>\n<p>Now we can run <code>./gradlew :app:run<\/code> and Gradle will compile the Kotlin sources and run its main method. You should see\nthe following output:<\/p>\n<pre><code class=\"language-text\">./gradlew :app:run\n\n&gt; Task :app:run\nRunning Example Application version 1.0.0...\n1...\n2...\n3...\nFinished!\n\nBUILD SUCCESSFUL in 4s\n2 actionable tasks: 2 executed\n<\/code><\/pre>\n<h3 id=\"orchid-setup\"><a href=\"#orchid-setup\" id=\"orchid-setup\" class=\"anchor\"><\/a>Orchid Setup<\/h3>\n<p>Now let's get our project ready to use Orchid. Orchid is a new static site generator, written in Kotlin, which\nspecializes in generating code documentation. It supports Kotlin sources but also has plugins for Java, Groovy, and\nSwift, which all work very similar to this tutorial.<\/p>\n<p>Orchid runs as a Gradle plugin and is best if it is given its own Gradle subproject. So let's get our <code>settings.gradle<\/code>\nsetup with a new <code>:docs<\/code> project, and we'll also set up the <code>docs/build.gradle<\/code>:<\/p>\n<pre><code class=\"language-groovy\">// settings.gradle\nrootProject.name = 'Kotlin Project'\n\ninclude ':app'\ninclude ':docs'\n<\/code><\/pre>\n<pre><code class=\"language-groovy\">// docs/build.gradle\n// 1. Apply Orchid plugin\nplugins {\n    id &quot;com.eden.orchidPlugin&quot; version &quot;0.21.1&quot;\n}\n\n// 2. Include Orchid dependencies\ndependencies {\n    orchidRuntime &quot;io.github.copper-leaf.orchid:orchid-docs-bundle:0.21.1&quot;\n    orchidRuntime &quot;io.github.copper-leaf.orchid:orchid-kotlindoc-feature:0.21.1&quot;\n    orchidRuntime &quot;io.github.copper-leaf.orchid:OrchidPluginDocs:0.21.1&quot;\n}\n\n// 3. Get dependencies from JCenter and Kotlinx Bintray repo\nrepositories {\n    mavenCentral()\n    maven { url = &quot;https://kotlin.bintray.com/kotlinx/&quot; }\n}\n\n// 4. Use the 'Editorial' theme, and set the URL it will have on Github Pages\norchid {\n    theme = &quot;Editorial&quot;\n    baseUrl = &quot;https://username.github.io/project&quot;\n    version = &quot;1.0.0&quot;\n}\n<\/code><\/pre>\n<p>This is all that's required to run your Orchid site! There are still a few things we need to do to set up the wiki and\ntell it where to find our Kotlin code, but you can run Orchid right now with <code>./gradlew :docs:orchidServe<\/code> and view the\nsite on http://localhost:8080. It should give you an output like the following:<\/p>\n<pre><code class=\"language-text\">./gradlew :docs:orchidServe\n\n&gt; Task :docs:orchidServe\nUsing the following modules: \n--------------------\n * com.eden.orchid.StandardModule\n\nAuto-loaded modules: \n--------------------\n * com.eden.orchid.editorial.EditorialModule\n * com.eden.orchid.impl.compilers.markdown.FlexmarkModule\n * com.eden.orchid.impl.compilers.pebble.PebbleModule\n * com.eden.orchid.kotlindoc.KotlindocModule\n * com.eden.orchid.pages.PagesModule\n * com.eden.orchid.search.SearchModule\n * com.eden.orchid.wiki.WikiModule\n\nFlag values: \n--------------------\n-adminTheme: Default\n-baseUrl: http://username.github.io/project\n-defaultTemplateExtension: peb\n-dest: ...\n-dryDeploy: false\n-environment: debug\n-logLevel: VERBOSE\n-port: 8080\n-src: ...\n-task: serve\n-theme: Editorial\n-version: 1.0.0\n\n[INFO] Orchid: Running Orchid version 0.21.1, site version unspecified in debug environment\n[INFO] OrchidWebserver: Webserver Running at http://localhost:8080\n[INFO] OrchidWebsocket: Websocket running at http://localhost:8081/\n[INFO] TaskServiceImpl: Build Starting...\n[INFO] GeneratorServiceImpl: Indexing [10000: assets]\n[INFO] GeneratorServiceImpl: Indexing [1000: home]\n[INFO] GeneratorServiceImpl: Indexing [1000: kotlindoc]\n[INFO] GeneratorServiceImpl: Indexing [1000: pages]\n[INFO] GeneratorServiceImpl: Indexing [1000: wiki]\n[INFO] GeneratorServiceImpl: Indexing [11: sitemap]\n[INFO] GeneratorServiceImpl: Indexing [10: indices]\n[INFO] GeneratorServiceImpl: Generating [10000: assets]\n[INFO] GeneratorServiceImpl: Generating [1000: home]\n[INFO] GeneratorServiceImpl: Generating [1000: kotlindoc]\n[INFO] GeneratorServiceImpl: Generating [1000: pages]\n[INFO] GeneratorServiceImpl: Generating [1000: wiki]\n[INFO] GeneratorServiceImpl: Generating [11: sitemap]\n[INFO] GeneratorServiceImpl: Generating [10: indices]\n\nBuild Metrics: \n┌───────┬────────────┬───────────────┬─────────────────┬───────────────────────────┬─────────────────────────────┐\n│       │ Page Count │ Indexing Time │ Generation Time │ Mean Page Generation Time │ Median Page Generation Time │\n├───────┼────────────┼───────────────┼─────────────────┼───────────────────────────┼─────────────────────────────┤\n│  home │     1      │     54ms      │      481ms      │           472ms           │            472ms            │\n├───────┼────────────┼───────────────┼─────────────────┼───────────────────────────┼─────────────────────────────┤\n│ TOTAL │          1 │      3s 496ms │           520ms │                     472ms │                       472ms │\n└───────┴────────────┴───────────────┴─────────────────┴───────────────────────────┴─────────────────────────────┘\n\nBuild Complete\nGenerated 1 page in 4s 18ms\n\n[WARN] Warnings:\n[WARN] WikiGenerator: \n[WARN]     - Could not find wiki summary page in 'wiki/'\n\n\nWebserver Running at http://localhost:8080\nHit [CTRL-C] to stop the server and quit Orchid\n<\/code><\/pre>\n<p>You will also see the basic site served on localhost:8080, which looks like:<\/p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/0w4awux9ya5vm1a84z5i.png\" alt=\"empty Orchid site\" /><\/p>\n<p>But let's move on to the next step: adding content to the site!<\/p>\n<h2 id=\"adding-content\"><a href=\"#adding-content\" id=\"adding-content\" class=\"anchor\"><\/a>Adding Content<\/h2>\n<h3 id=\"homepage\"><a href=\"#homepage\" id=\"homepage\" class=\"anchor\"><\/a>Homepage<\/h3>\n<p>The first thing anyone will see when landing on your site is your Homepage. Orchid creates this page based on a\n<code>homepage.md<\/code> file in the root of your site's <em>resources<\/em>, which are located by default in <code>src/orchid/resources<\/code>. Let's\nstart by creating this file and adding a short description of our project to it.<\/p>\n<pre><code class=\"language-markdown\">// docs/src/orchid/resources/homepage.md\n# Kotlin Project\n\nThis is a short description of this project.\n<\/code><\/pre>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/q9olagjvmkeud0jwxgnh.png\" alt=\"Orchid Site with Homepage content\" /><\/p>\n<p>A common thing to add to the homepage is your project's <code>README<\/code>, which has things like badges, basic setup\ninstructions, etc. We don't want to have to copy everything from the README to our Homepage file, so let's just tell\nOrchid to include the README on the homepage for us!<\/p>\n<p>To do this, we will add a <strong>Front Matter<\/strong> section to the top of the homepage file, and add the &quot;Readme&quot; <strong>Component<\/strong>\nto the homepage in that Front Matter. If you've previously used Jekyll or another static site generator, Orchid handles\nFront Matter in the exact same way: YAML between a pair of triple-dashes lines.<\/p>\n<pre><code class=\"language-markdown\">// docs/src/orchid/resources/homepage.md\n---\ncomponents:\n  - type: 'pageContent'\n  - type: 'readme'\n---\n# Kotlin Project\n\nThis is a short description of this project.\n<\/code><\/pre>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/p6yuklpfg3fxf2x5inzj.png\" alt=\"Homepage with Readme contents\" /><\/p>\n<p>Orchid's Components are just a list of &quot;blocks&quot; which are rendered to the page in order. There are many different types\nof components, and different plugins can add their own. Here, we've added the <code>readme<\/code> component, which searches for the\nREADME in your project and adds it to the page. We also added the <code>pageContent<\/code> component, which adds the Markdown\ncontent of the <code>homepage.md<\/code>. If you don't define any components this one is added automatically, but if you use\ncomponents you'll have to add it yourself.<\/p>\n<p>That's about it for the Homepage. But our site is looking a bit boring, and there's some information that the theme\nwould like us to provide. So let's go ahead and configure the theme.<\/p>\n<h3 id=\"site-infotheme-configuration\"><a href=\"#site-infotheme-configuration\" id=\"site-infotheme-configuration\" class=\"anchor\"><\/a>Site Info/Theme Configuration<\/h3>\n<p>Orchid handles configuration with a <code>config.yml<\/code> in the root of your resources. In it, we will add some basic info about\nour site, and we can also configure our theme, such as changing its colors.<\/p>\n<p>This config file includes some configurations under <code>site<\/code>, which is common info typically used by any theme you choose,\nand some theme-specific configuration under <code>Editorial<\/code>. If you remember, this key is the same value we set as our theme\nin <code>docs/build.gradle<\/code>. For the theme, we're changing the site's accent color, and also putting in the Github project\nfor a social link.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nsite:\n  about:\n    siteName: Kotlin Project\n    siteDescription: This is a short description of this project.\nEditorial:\n  primaryColor: '#DE9149'\n  social:\n    github: 'username/project'\n<\/code><\/pre>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/d2nyfiehj7tdrdnt9ugl.png\" alt=\"Orchid site with some configuration\" /><\/p>\n<p>But these configuration values didn't just come out of nowhere. If you visit http://localhost:8080/admin while your site\nis serving locally, you can view Orchid's admin panel. In here you can find all the options available for customization\nfor your theme, for components, and for just about anything else.<\/p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/dnfh7gg6cvpyryin9200.png\" alt=\"Orchid Admin Panel Theme Options\" /><\/p>\n<h3 id=\"wiki\"><a href=\"#wiki\" id=\"wiki\" class=\"anchor\"><\/a>Wiki<\/h3>\n<p>Now that our site is looking a bit more unique, we can start adding some additional content to help our users learn how\nto use the project. Orchid's Wiki plugin will help us here, allowing us to create an easily-navigable knowledge base,\nwalking users through everything they need to get going with the project.<\/p>\n<p>This plugin starts with a <code>wiki/summary.md<\/code> file. In here, we'll add relative links to the subpages in the wiki. Orchid\nwill then create a new page in your site for each entry, and join them all together so that they link from one to the\nnext, in the order declared in the summary.<\/p>\n<pre><code class=\"language-markdown\">// docs/src/orchid/resources/wiki/summary.md\n- [Installation](installation.md)\n- [Basic Configuration](configuration.md)\n- [Features](features.md)\n  - [Feature One](features/one.md)\n  - [Feature Two](features/two.md)\n- [Extending](extending.md)    \n<\/code><\/pre>\n<p>I'll leave the creation of these wiki entries to you. They each work in exactly the same way as the Homepage file and\ncan contain Markdown content and a Front Matter section with any components you wish.<\/p>\n<p>Now, if you visit http://localhost:8080/wiki you'll be able to start navigating your wiki. One of the really nice\nfeatures of Orchid is the built-in static search. All of your wiki pages support full-text search, to make it easy to\nlook up anything in your site. All the individual pages of the wiki are also linked together with forward and backward\nlinks.<\/p>\n<p>To add static search, we need to add another component to our site, called <code>orchidSearch<\/code>. This time, instead of\nattaching the component to the homepage, we will attach it to the theme's <code>metaComponents<\/code> to add the necessary assets\nto all pages, instead of just the homepage.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nsite:\n  about:\n    siteName: Kotlin Project\n    siteDescription: This is a short description of this project.\nEditorial:\n  primaryColor: '#DE9149'\n  social:\n    github: 'username/project'\n  metaComponents: # this is the replacement for the deprecated automatic search addition\n    - type: 'orchidSearch'\n<\/code><\/pre>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/5r4apzo10ip7wtnpqxos.png\" alt=\"Wiki summary with search results\" /><\/p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/nlpgex5lkcx1gjv8seur.png\" alt=\"Wiki entry with next and previous page links\" /><\/p>\n<p>The last thing we need to do is start setting up our site menus, and include a link to this wiki. You can do this in\n<code>config.yml<\/code>. Change it to look like the following:<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nsite:\n  about:\n    siteName: Kotlin Project\n    siteDescription: This is a short description of this project.\n\nEditorial:\n  primaryColor: '#DE9149'\n  legacySearch: false\n  social:\n    github: 'username/project'\n  metaComponents:\n    - type: 'orchidSearch'\n  menu:\n    - type: 'separator'\n      title: 'Wiki'\n    - type: 'wiki'\n<\/code><\/pre>\n<p>I've added a <code>menu<\/code> property to the <code>Editorial<\/code> theme config. Similar to components, a menu contains a list of menu item\ntypes which are rendered in order. A single menu item configuration may produce more than one entry in the actual menu\nas in the <code>wiki<\/code> item, which adds a link to the sidebar for each page in your wiki.<\/p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/k7f8mvcoyjojnw00htyd.png\" alt=\"Wiki Page with Wiki Menu Items\" /><\/p>\n<h3 id=\"changelog\"><a href=\"#changelog\" id=\"changelog\" class=\"anchor\"><\/a>Changelog<\/h3>\n<p>That last piece of content we want to add to our site is a changelog. This way, users can track the changes you've been\nmaking to the project, and Orchid can also use this same information to create Releases on Github.<\/p>\n<p>Changelog entries are each set up as a file in your resources <code>changelog<\/code> directory. Each entry should have a Front\nMatter section with a <code>version<\/code> property with the version name (as semantic versioning). So let's go ahead and create\nsome changelog entries, such as <code>changelog/1.0.0.md<\/code>, and maybe a few others if you want:<\/p>\n<pre><code class=\"language-markdown\">// docs/src/orchid/resources/changelog/1.0.0.md\n- Project is now ready for production!\n<\/code><\/pre>\n<p>The Changelog plugin does not create a page for the list of changelog entries by default, but we can create a\n<em>Static Page<\/em> to display the list of changelog entries. Static pages are markdown files, just like the wiki and homepage\nfiles, in the <code>pages<\/code> directory. We will create a <code>changelog.md<\/code> file and give it the <code>changelog<\/code> component to render\nour versions in order on the page http://localhost:8080/changelog:<\/p>\n<pre><code class=\"language-markdown\">// docs/src/orchid/resources/pages/changelog.md\n---\ncomponents:\n  - type: changelog\n---\n<\/code><\/pre>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/hmwr5trhhzyszyubzesz.png\" alt=\"Changelog entries\" /><\/p>\n<p>Let's also add this to our site menu, so users can easily find the recent changes:<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nsite:\n  about:\n    siteName: Kotlin Project\n    siteDescription: This is a short description of this project.\n\nEditorial:\n  primaryColor: '#DE9149'\n  legacySearch: false\n  social:\n    github: 'username/project'\n  metaComponents:\n    - type: 'orchidSearch'\n  menu:\n    - type: 'separator'\n      title: 'Wiki'\n    - type: 'wiki'\n    - type: 'page'\n      itemId: 'Changelog'\n<\/code><\/pre>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/7j1ra7v0908l3rww4ib1.png\" alt=\"Menu with Changelog item\" /><\/p>\n<h3 id=\"kotlin-code-docs\"><a href=\"#kotlin-code-docs\" id=\"kotlin-code-docs\" class=\"anchor\"><\/a>Kotlin Code Docs<\/h3>\n<h4 id=\"setting-up-the-plugin\"><a href=\"#setting-up-the-plugin\" id=\"setting-up-the-plugin\" class=\"anchor\"><\/a>Setting Up The Plugin<\/h4>\n<p>Now we're at a point where we could start documenting our Kotlin sources. First, we need to set up the plugin and point\nit at our other project with Kotlin source files. The Orchid plugin is already installed as the <code>orchid-kotlindoc-feature<\/code>\ndependency in <code>docs/build.gradle<\/code>, so we just need to update our <code>config.yml<\/code>.<\/p>\n<p>If we pop back to our admin panel, we can find the config values we need to get going. Specifically, we need to find the\n&quot;Kotlindoc&quot; <strong>Generator<\/strong> menu item in the sidebar. Clicking that shows us the available configuration values that we\nneed to add to <code>config.yml<\/code>:<\/p>\n<p><img src=\"https://thepracticaldev.s3.amazonaws.com/i/ae0099ddden8rvvbvbv1.png\" alt=\"Kotlindoc docs page in Orchid admin panel\" /><\/p>\n<p>This tells us that we can add the following snippet to <code>config.yml<\/code>, and that's all we need! We'll set <code>sourceDirs<\/code> to\nthe relative file path from the docs site resources to the app project's Kotlin sources.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nkotlindoc:\n  sourceDirs:\n    - './../../../../app/src/main/kotlin'\n<\/code><\/pre>\n<p>Now, Orchid will hook into <a href=\"https://github.com/Kotlin/dokka\">Dokka<\/a> to get the info it needs, and then generate pages\nfor each class and package it finds in your source directories (both Java and Kotlin). The fully-qualified name creates\nnested directories with that same path, so <code>com.example.ExampleApplication<\/code> will create\nhttp://localhost:8080/kotlindoc/com/example/ExampleApplication in your site.<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/kotlin-01.png\" alt=\"Kotlin Class page\" /><\/p>\n<p>We can navigate to http://localhost:8080/kotlindoc/com/example/ to view its package page as well, which looks very\nsimilar. And just as the full-text search worked on our wiki pages, it also will find matches within our code comments\non these pages as well!<\/p>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/kotlin-02.png\" alt=\"Kotlin Package page with search results\" /><\/p>\n<h4 id=\"creating-the-menus\"><a href=\"#creating-the-menus\" id=\"creating-the-menus\" class=\"anchor\"><\/a>Creating The Menus<\/h4>\n<p>We're nearly done setting up our site, there's just one more piece to the puzzle we need: menu links to our Kotlin doc\npages! We'll start by adding links to all the classes and packages in our project to the sidebar. This gets added to the\nsame menu list we used earlier for wiki pages in <code>config.yml<\/code>.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nsite:\n  about:\n    siteName: Kotlin Project\n    siteDescription: This is a short description of this project.\n\nEditorial:\n  primaryColor: '#DE9149'\n  legacySearch: false\n  social:\n    github: 'username/project'\n  metaComponents:\n    - type: 'orchidSearch'\n  menu:\n    - type: 'separator'\n      title: 'Wiki'\n    - type: 'wiki'\n    - type: 'page'\n      itemId: 'Changelog'\n    - type: 'separator'\n      title: 'API Docs'\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      node: 'classes'\n      asSubmenu: true\n      submenuTitle: 'Classes'\n    - type: 'sourcedocPages'\n      moduleType: 'kotlindoc'\n      node: 'packages'\n      asSubmenu: true\n      submenuTitle: 'Packages'\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/kotlin-03.png\" alt=\"Menu item links for all Kotlin class and package pages\" /><\/p>\n<p>There's one more menu that is nice to include here as well. Just as the theme has a menu, <em>each page<\/em> in Orchid can also\nhave its own menu, so that menus may change slightly on different parts of the site, highlighting relevant content. So\nlet's add a menu to all our Kotlin doc pages with links to each method, constructor, etc. on each page. Clicking one of\nthese menu items will link you to the appropriate <em>anchor<\/em> on the page rather than taking you to a new page.<\/p>\n<pre><code class=\"language-yaml\">kotlindoc:\n  sourceDirs:\n    - './../../../../app/src/main/kotlin'\n  sourcePages:\n    menu:\n      - type: 'sourcedocPageLinks'\n        moduleType: 'kotlindoc'\n        itemTitleType: 'SIGNATURE'\n        includeItems: true\n<\/code><\/pre>\n<p><img src=\"https://orchid.run/wiki/learn/tutorials/media/kotlin-04.png\" alt=\"Kotlindoc Class Links\" /><\/p>\n<h2 id=\"deploy-on-github-pages\"><a href=\"#deploy-on-github-pages\" id=\"deploy-on-github-pages\" class=\"anchor\"><\/a>Deploy On Github Pages<\/h2>\n<p>Our site is now ready to be deployed! For most projects, Github Pages is a great place to host your docs. All you have\nto do is push static files to the <code>gh-pages<\/code> branch of a repository and Github will host it for you.<\/p>\n<p>While many static site generators expect you to commit and push your site to this branch manually, Orchid actually makes\nit incredibly simple for you by providing you with a simple deployment pipeline. So let's get the Github Pages\npublication set up. Add the following snippet to <code>config.yml<\/code>.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nservices:\n  publications:\n    stages:\n      ghPages:\n        branch: gh-pages\n        repo: 'project'\n        username: 'username'\n<\/code><\/pre>\n<p>In addition, we will need to authenticate with Github in order to actually succeed in pushing to that branch. To do\nthat, you need to create a\n<a href=\"https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/\">Github Personal Access Token<\/a>\nand set it to the <code>githubToken<\/code> environment variable.<\/p>\n<pre><code class=\"language-sh\">export githubToken=...\n<\/code><\/pre>\n<p>Now, instead of running <code>./gradlew :docs:orchidServe<\/code> simply run <code>./gradlew :docs:orchidDeploy -PorchidEnvironment=prod<\/code>, and Orchid\nwill build your site using your production base URL, and after a successful build push the built site to the <code>gh-pages<\/code>\nbranch of your repo.<\/p>\n<p>But let's take this just one step further. We always want to make sure that our doc site is up-to-date with the Releases\non Github, so no one ever gets misleading or conflicting information. Fortunately, Orchid has another publisher that\nwill create a Github Release based on the latest changelog version! It's just as simple to set up and uses the same\n<code>githubToken<\/code> environment variable as the <code>ghPages<\/code> publisher.<\/p>\n<pre><code class=\"language-yaml\"># docs/src/orchid/resources/config.yml\nservices:\n  publications:\n    stages:\n      githubPages:\n        branch: gh-pages\n        repo: 'project'\n        username: 'username'\n      githubReleases:\n        repo: 'username/project'\n<\/code><\/pre>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" id=\"conclusion\" class=\"anchor\"><\/a>Conclusion<\/h2>\n<p>And with all that, our Kotlin project's doc site is finished! Now it may have seemed like a ton of work getting all that\nsetup, but let's recall all the features included in this site:<\/p>\n<ul>\n<li>A homepage that automatically pulls in the README<\/li>\n<li>Wiki that links forward and backward between its entries<\/li>\n<li>A changelog that gets ordered by semantic versioning<\/li>\n<li>Source-code documentation for all your Kotlin and Java sources<\/li>\n<li>Full-text search of your wiki and your KDoc comments<\/li>\n<li>Automatically-generated menu items linking to each page in your wiki and each class and package in your source code.<\/li>\n<li>Easy links to specific methods, properties, etc. on your class and package pages<\/li>\n<li>Deploy the rendered site to Github Pages<\/li>\n<li>Create a Release on Github with the latest changelog version<\/li>\n<\/ul>\n<p>That's a lot of stuff! And specifically, that's a lot that would normally need a separate tool/build process/3rd-party\nservice for each. In fact, for basic projects Orchid combines all the following tools into its one, unique, integrated\nplatform:<\/p>\n<ul>\n<li>Jekyll<\/li>\n<li>Gitbook<\/li>\n<li>Algolia<\/li>\n<li>Dokka<\/li>\n<li>Custom deployment scripts to publish to Github Pages<\/li>\n<li>Manual Release creation on Github on every release<\/li>\n<\/ul>\n<p>And everything outlined in this tutorial is really just a sampling of the full functionality available in Orchid! Orchid\nhas other plugins for different source code documentation, presentations, blogs, and much more. Check out the full list\nof plugins <a href=\"https://orchid.run/plugins\">here<\/a>, or you can even make your own!<\/p>\n<p>Thanks for following along, happy documenting!<\/p>\n"
              }]
            }
          }
        }},
        "ownPages": [{
          "reference": {
            "path": "wiki",
            "baseUrl": "https://orchid.run",
            "fileName": "learn",
            "extension": "html",
            "usePrettyUrl": true,
            "link": "https://orchid.run/wiki/learn"
          },
          "description": "",
          "title": "Tutorials",
          "content": "<html>\n <head><\/head>\n <body>\n  <h2 id=\"basic-usage-tutorials\"><a href=\"#basic-usage-tutorials\" id=\"basic-usage-tutorials\" class=\"anchor\"><\/a>Basic Usage Tutorials<\/h2> \n  <ul> \n   <li>01 - <a href=\"https://orchid.run/wiki/learn/tutorials/your-first-orchid-site\">Your First Orchid Site<\/a><\/li> \n   <li>02 - <a href=\"https://orchid.run/wiki/learn/tutorials/homepage-and-static-pages\">Homepage and Static Pages<\/a><\/li> \n   <li>03 - <a href=\"https://orchid.run/wiki/learn/tutorials/heart-of-the-front-matter\">The Heart of the (Front) Matter<\/a><\/li> \n   <li>04 - <a href=\"https://orchid.run/wiki/learn/tutorials/link-all-the-things\">Link All The Things!<\/a><\/li> \n   <li>05 - <a href=\"https://orchid.run/wiki/learn/tutorials/whats-on-the-menu\">What's on the Menu?<\/a><\/li> \n   <li>06 - <a href=\"https://orchid.run/wiki/learn/tutorials/all-about-archetypes\">All About Archetypes<\/a><\/li> \n   <li>07 - <a href=\"https://orchid.run/wiki/learn/tutorials/amazing-admin-panel\">The Amazing, Auto-Documenting Admin Panel<\/a><\/li> \n  <\/ul> \n  <h2 id=\"advanced-usage-tutorials\"><a href=\"#advanced-usage-tutorials\" id=\"advanced-usage-tutorials\" class=\"anchor\"><\/a>Advanced Usage Tutorials<\/h2> \n  <ul> \n   <li>08 - <a href=\"https://orchid.run/wiki/learn/tutorials/how-to-document-kotlin\">How to Document a Kotlin Project<\/a><\/li> \n   <li>09 - <a href=\"https://orchid.run/wiki/learn/tutorials/how-to-blog\">How to Write a Blog<\/a><\/li> \n  <\/ul> \n <\/body>\n<\/html>\n"
        }]
      }
    },
    "ownPages": [{
      "reference": {
        "path": "",
        "baseUrl": "https://orchid.run",
        "fileName": "wiki",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://orchid.run/wiki"
      },
      "description": "",
      "title": "Wiki",
      "content": ""
    }]
  }}
}